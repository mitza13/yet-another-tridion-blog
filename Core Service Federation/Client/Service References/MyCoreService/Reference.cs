//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Federation.Client.MyCoreService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault))]
    public partial class ServiceFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExceptionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.MessageList MessagesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorCodeField, value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string ExceptionName {
            get {
                return this.ExceptionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionNameField, value) != true)) {
                    this.ExceptionNameField = value;
                    this.RaisePropertyChanged("ExceptionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.MessageList Messages {
            get {
                return this.MessagesField;
            }
            set {
                if ((object.ReferenceEquals(this.MessagesField, value) != true)) {
                    this.MessagesField = value;
                    this.RaisePropertyChanged("Messages");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class CoreServiceFault : Federation.Client.MyCoreService.ServiceFault {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ValidationErrorData[] ValidationErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ValidationWarningData[] ValidationWarningsField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ValidationErrorData[] ValidationErrors {
            get {
                return this.ValidationErrorsField;
            }
            set {
                if ((object.ReferenceEquals(this.ValidationErrorsField, value) != true)) {
                    this.ValidationErrorsField = value;
                    this.RaisePropertyChanged("ValidationErrors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ValidationWarningData[] ValidationWarnings {
            get {
                return this.ValidationWarningsField;
            }
            set {
                if ((object.ReferenceEquals(this.ValidationWarningsField, value) != true)) {
                    this.ValidationWarningsField = value;
                    this.RaisePropertyChanged("ValidationWarnings");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="MessageList", Namespace="http://www.sdltridion.com/ContentManager/R6", ItemName="Message")]
    [System.SerializableAttribute()]
    public class MessageList : System.Collections.Generic.List<string> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ValidationErrorData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ValidationErrorData : Federation.Client.MyCoreService.ValidationResultData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExceptionNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorCodeField, value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string ExceptionName {
            get {
                return this.ExceptionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionNameField, value) != true)) {
                    this.ExceptionNameField = value;
                    this.RaisePropertyChanged("ExceptionName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ValidationWarningData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ValidationWarningData : Federation.Client.MyCoreService.ValidationResultData {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ValidationResultData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ValidationWarningData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ValidationErrorData))]
    public partial class ValidationResultData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string Source {
            get {
                return this.SourceField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceField, value) != true)) {
                    this.SourceField = value;
                    this.RaisePropertyChanged("Source");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IdentifiableObjectData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.RepositoryLocalObjectData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ProcessDefinitionData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.WorkflowObjectData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ActivityData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.WorkItemData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ActivityInstanceData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ActivityHistoryData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ProcessData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ProcessInstanceData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ProcessHistoryData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ActivityDefinitionData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TridionActivityDefinitionData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TridionProcessDefinitionData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.OrganizationalItemData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.FolderData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.StructureGroupData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.VirtualFolderData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ResolvedBundleData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.CategoryData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BusinessProcessTypeData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.KeywordData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TargetGroupData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.VersionedItemData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ComponentData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PageData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TemplateData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ComponentTemplateData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PageTemplateData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TemplateBuildingBlockData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.SchemaData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BundleTypeData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ProcessDefinitionAssociationData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.SystemWideObjectData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.RepositoryData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PublicationData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BluePrintNodeData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.MultimediaTypeData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ApprovalStatusData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BatchData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.RegisteredTypeData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.WorkflowTypeData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PublishTransactionData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TrusteeData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.GroupData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.UserData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.AccessTokenData))]
    public partial class IdentifiableObjectData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.AllowedActions AllowedActionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsEditableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ListInfo ListInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.BasicVersionInfo VersionInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ExtensionPropertyDictionary ExtensionPropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ApplicableActionsData ApplicableActionsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.AllowedActions AllowedActions {
            get {
                return this.AllowedActionsField;
            }
            set {
                if ((object.ReferenceEquals(this.AllowedActionsField, value) != true)) {
                    this.AllowedActionsField = value;
                    this.RaisePropertyChanged("AllowedActions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsEditable {
            get {
                return this.IsEditableField;
            }
            set {
                if ((this.IsEditableField.Equals(value) != true)) {
                    this.IsEditableField = value;
                    this.RaisePropertyChanged("IsEditable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ListInfo ListInfo {
            get {
                return this.ListInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.ListInfoField, value) != true)) {
                    this.ListInfoField = value;
                    this.RaisePropertyChanged("ListInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.BasicVersionInfo VersionInfo {
            get {
                return this.VersionInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionInfoField, value) != true)) {
                    this.VersionInfoField = value;
                    this.RaisePropertyChanged("VersionInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=6)]
        public Federation.Client.MyCoreService.ExtensionPropertyDictionary ExtensionProperties {
            get {
                return this.ExtensionPropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtensionPropertiesField, value) != true)) {
                    this.ExtensionPropertiesField = value;
                    this.RaisePropertyChanged("ExtensionProperties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=7)]
        public Federation.Client.MyCoreService.ApplicableActionsData ApplicableActions {
            get {
                return this.ApplicableActionsField;
            }
            set {
                if ((object.ReferenceEquals(this.ApplicableActionsField, value) != true)) {
                    this.ApplicableActionsField = value;
                    this.RaisePropertyChanged("ApplicableActions");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AllowedActions", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class AllowedActions : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AllowField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DenyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ManagedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Allow {
            get {
                return this.AllowField;
            }
            set {
                if ((this.AllowField.Equals(value) != true)) {
                    this.AllowField = value;
                    this.RaisePropertyChanged("Allow");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Deny {
            get {
                return this.DenyField;
            }
            set {
                if ((this.DenyField.Equals(value) != true)) {
                    this.DenyField = value;
                    this.RaisePropertyChanged("Deny");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<int> Managed {
            get {
                return this.ManagedField;
            }
            set {
                if ((this.ManagedField.Equals(value) != true)) {
                    this.ManagedField = value;
                    this.RaisePropertyChanged("Managed");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ListInfo", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.WhereUsedListInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ProcessDefinitionAssociationListInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ProcessInstanceListInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.WorkItemListInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PublishTransactionListInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ContainingBundlesListInfo))]
    public partial class ListInfo : Federation.Client.MyCoreService.Info {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BasicVersionInfo", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LimitedVersionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.FullVersionInfo))]
    public partial class BasicVersionInfo : Federation.Client.MyCoreService.Info {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> RevisionDateField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.DateTime> CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.DateTime> RevisionDate {
            get {
                return this.RevisionDateField;
            }
            set {
                if ((this.RevisionDateField.Equals(value) != true)) {
                    this.RevisionDateField = value;
                    this.RaisePropertyChanged("RevisionDate");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ApplicableActionsData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ApplicableActionsData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ApplicableActionsDataDictionary ActionsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Federation.Client.MyCoreService.ApplicableActionsDataDictionary Actions {
            get {
                return this.ActionsField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionsField, value) != true)) {
                    this.ActionsField = value;
                    this.RaisePropertyChanged("Actions");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RepositoryLocalObjectData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ProcessDefinitionData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TridionProcessDefinitionData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.OrganizationalItemData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.FolderData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.StructureGroupData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.VirtualFolderData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ResolvedBundleData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.CategoryData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BusinessProcessTypeData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.KeywordData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TargetGroupData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.VersionedItemData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ComponentData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PageData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TemplateData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ComponentTemplateData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PageTemplateData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TemplateBuildingBlockData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.SchemaData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BundleTypeData))]
    public partial class RepositoryLocalObjectData : Federation.Client.MyCoreService.IdentifiableObjectData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.BluePrintInfo BluePrintInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsPublishedInContextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LocationInfo LocationInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MetadataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToSchemaData MetadataSchemaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LockInfo LockInfoField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.BluePrintInfo BluePrintInfo {
            get {
                return this.BluePrintInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.BluePrintInfoField, value) != true)) {
                    this.BluePrintInfoField = value;
                    this.RaisePropertyChanged("BluePrintInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsPublishedInContext {
            get {
                return this.IsPublishedInContextField;
            }
            set {
                if ((this.IsPublishedInContextField.Equals(value) != true)) {
                    this.IsPublishedInContextField = value;
                    this.RaisePropertyChanged("IsPublishedInContext");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LocationInfo LocationInfo {
            get {
                return this.LocationInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationInfoField, value) != true)) {
                    this.LocationInfoField = value;
                    this.RaisePropertyChanged("LocationInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Metadata {
            get {
                return this.MetadataField;
            }
            set {
                if ((object.ReferenceEquals(this.MetadataField, value) != true)) {
                    this.MetadataField = value;
                    this.RaisePropertyChanged("Metadata");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToSchemaData MetadataSchema {
            get {
                return this.MetadataSchemaField;
            }
            set {
                if ((object.ReferenceEquals(this.MetadataSchemaField, value) != true)) {
                    this.MetadataSchemaField = value;
                    this.RaisePropertyChanged("MetadataSchema");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=5)]
        public Federation.Client.MyCoreService.LockInfo LockInfo {
            get {
                return this.LockInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.LockInfoField, value) != true)) {
                    this.LockInfoField = value;
                    this.RaisePropertyChanged("LockInfo");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessDefinitionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TridionProcessDefinitionData))]
    public partial class ProcessDefinitionData : Federation.Client.MyCoreService.RepositoryLocalObjectData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ActivityDefinitionData[] ActivityDefinitionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> StoreSnapshotField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ActivityDefinitionData[] ActivityDefinitions {
            get {
                return this.ActivityDefinitionsField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityDefinitionsField, value) != true)) {
                    this.ActivityDefinitionsField = value;
                    this.RaisePropertyChanged("ActivityDefinitions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> StoreSnapshot {
            get {
                return this.StoreSnapshotField;
            }
            set {
                if ((this.StoreSnapshotField.Equals(value) != true)) {
                    this.StoreSnapshotField = value;
                    this.RaisePropertyChanged("StoreSnapshot");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkflowObjectData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ActivityData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.WorkItemData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ActivityInstanceData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ActivityHistoryData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ProcessData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ProcessInstanceData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ProcessHistoryData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ActivityDefinitionData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TridionActivityDefinitionData))]
    public partial class WorkflowObjectData : Federation.Client.MyCoreService.IdentifiableObjectData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToRepositoryData ContextRepositoryField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToRepositoryData ContextRepository {
            get {
                return this.ContextRepositoryField;
            }
            set {
                if ((object.ReferenceEquals(this.ContextRepositoryField, value) != true)) {
                    this.ContextRepositoryField = value;
                    this.RaisePropertyChanged("ContextRepository");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ActivityInstanceData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ActivityHistoryData))]
    public partial class ActivityData : Federation.Client.MyCoreService.WorkflowObjectData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToTrusteeData AssigneeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> FinishDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FinishMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToUserData OwnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToUserData[] PerformersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToProcessData ProcessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> SuspendDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.WorkItemData[] WorkItemsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> AssignmentDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DueDateField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToTrusteeData Assignee {
            get {
                return this.AssigneeField;
            }
            set {
                if ((object.ReferenceEquals(this.AssigneeField, value) != true)) {
                    this.AssigneeField = value;
                    this.RaisePropertyChanged("Assignee");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.DateTime> FinishDate {
            get {
                return this.FinishDateField;
            }
            set {
                if ((this.FinishDateField.Equals(value) != true)) {
                    this.FinishDateField = value;
                    this.RaisePropertyChanged("FinishDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string FinishMessage {
            get {
                return this.FinishMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.FinishMessageField, value) != true)) {
                    this.FinishMessageField = value;
                    this.RaisePropertyChanged("FinishMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToUserData Owner {
            get {
                return this.OwnerField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerField, value) != true)) {
                    this.OwnerField = value;
                    this.RaisePropertyChanged("Owner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToUserData[] Performers {
            get {
                return this.PerformersField;
            }
            set {
                if ((object.ReferenceEquals(this.PerformersField, value) != true)) {
                    this.PerformersField = value;
                    this.RaisePropertyChanged("Performers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<int> Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToProcessData Process {
            get {
                return this.ProcessField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessField, value) != true)) {
                    this.ProcessField = value;
                    this.RaisePropertyChanged("Process");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.DateTime> StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.DateTime> SuspendDate {
            get {
                return this.SuspendDateField;
            }
            set {
                if ((this.SuspendDateField.Equals(value) != true)) {
                    this.SuspendDateField = value;
                    this.RaisePropertyChanged("SuspendDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.WorkItemData[] WorkItems {
            get {
                return this.WorkItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkItemsField, value) != true)) {
                    this.WorkItemsField = value;
                    this.RaisePropertyChanged("WorkItems");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=10)]
        public System.Nullable<System.DateTime> AssignmentDate {
            get {
                return this.AssignmentDateField;
            }
            set {
                if ((this.AssignmentDateField.Equals(value) != true)) {
                    this.AssignmentDateField = value;
                    this.RaisePropertyChanged("AssignmentDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=11)]
        public System.Nullable<System.DateTime> DueDate {
            get {
                return this.DueDateField;
            }
            set {
                if ((this.DueDateField.Equals(value) != true)) {
                    this.DueDateField = value;
                    this.RaisePropertyChanged("DueDate");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkItemData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class WorkItemData : Federation.Client.MyCoreService.WorkflowObjectData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToActivityData ActivityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToUserData OwnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToProcessData ProcessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToIdentifiableObjectData SubjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToRepositoryData SubjectOwningRepositoryField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToActivityData Activity {
            get {
                return this.ActivityField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityField, value) != true)) {
                    this.ActivityField = value;
                    this.RaisePropertyChanged("Activity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToUserData Owner {
            get {
                return this.OwnerField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerField, value) != true)) {
                    this.OwnerField = value;
                    this.RaisePropertyChanged("Owner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToProcessData Process {
            get {
                return this.ProcessField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessField, value) != true)) {
                    this.ProcessField = value;
                    this.RaisePropertyChanged("Process");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToIdentifiableObjectData Subject {
            get {
                return this.SubjectField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectField, value) != true)) {
                    this.SubjectField = value;
                    this.RaisePropertyChanged("Subject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=5)]
        public Federation.Client.MyCoreService.LinkToRepositoryData SubjectOwningRepository {
            get {
                return this.SubjectOwningRepositoryField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectOwningRepositoryField, value) != true)) {
                    this.SubjectOwningRepositoryField = value;
                    this.RaisePropertyChanged("SubjectOwningRepository");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityInstanceData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ActivityInstanceData : Federation.Client.MyCoreService.ActivityData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToActivityDefinitionData ActivityDefinitionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.ActivityState> ActivityStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.ActivityConstraints> ActivityConstraintsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResumeBookmarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SuspendOrFailReasonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsExpirationExecutionField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToActivityDefinitionData ActivityDefinition {
            get {
                return this.ActivityDefinitionField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityDefinitionField, value) != true)) {
                    this.ActivityDefinitionField = value;
                    this.RaisePropertyChanged("ActivityDefinition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.ActivityState> ActivityState {
            get {
                return this.ActivityStateField;
            }
            set {
                if ((this.ActivityStateField.Equals(value) != true)) {
                    this.ActivityStateField = value;
                    this.RaisePropertyChanged("ActivityState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public System.Nullable<Federation.Client.MyCoreService.ActivityConstraints> ActivityConstraints {
            get {
                return this.ActivityConstraintsField;
            }
            set {
                if ((this.ActivityConstraintsField.Equals(value) != true)) {
                    this.ActivityConstraintsField = value;
                    this.RaisePropertyChanged("ActivityConstraints");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public string ResumeBookmark {
            get {
                return this.ResumeBookmarkField;
            }
            set {
                if ((object.ReferenceEquals(this.ResumeBookmarkField, value) != true)) {
                    this.ResumeBookmarkField = value;
                    this.RaisePropertyChanged("ResumeBookmark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public string SuspendOrFailReason {
            get {
                return this.SuspendOrFailReasonField;
            }
            set {
                if ((object.ReferenceEquals(this.SuspendOrFailReasonField, value) != true)) {
                    this.SuspendOrFailReasonField = value;
                    this.RaisePropertyChanged("SuspendOrFailReason");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=5)]
        public System.Nullable<bool> IsExpirationExecution {
            get {
                return this.IsExpirationExecutionField;
            }
            set {
                if ((this.IsExpirationExecutionField.Equals(value) != true)) {
                    this.IsExpirationExecutionField = value;
                    this.RaisePropertyChanged("IsExpirationExecution");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityHistoryData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ActivityHistoryData : Federation.Client.MyCoreService.ActivityData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.ActivityType> ActivityTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToApprovalStatusData ApprovalStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActivityDefinitionTitleField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.ActivityType> ActivityType {
            get {
                return this.ActivityTypeField;
            }
            set {
                if ((this.ActivityTypeField.Equals(value) != true)) {
                    this.ActivityTypeField = value;
                    this.RaisePropertyChanged("ActivityType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToApprovalStatusData ApprovalStatus {
            get {
                return this.ApprovalStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.ApprovalStatusField, value) != true)) {
                    this.ApprovalStatusField = value;
                    this.RaisePropertyChanged("ApprovalStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public string ActivityDefinitionTitle {
            get {
                return this.ActivityDefinitionTitleField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityDefinitionTitleField, value) != true)) {
                    this.ActivityDefinitionTitleField = value;
                    this.RaisePropertyChanged("ActivityDefinitionTitle");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ProcessInstanceData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ProcessHistoryData))]
    public partial class ProcessData : Federation.Client.MyCoreService.WorkflowObjectData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ActivityData[] ActivitiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> HasSnapshotsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToIdentifiableObjectData[] SubjectsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToUserData CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToWorkflowTypeData WorkflowTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ActivityData[] Activities {
            get {
                return this.ActivitiesField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivitiesField, value) != true)) {
                    this.ActivitiesField = value;
                    this.RaisePropertyChanged("Activities");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> HasSnapshots {
            get {
                return this.HasSnapshotsField;
            }
            set {
                if ((this.HasSnapshotsField.Equals(value) != true)) {
                    this.HasSnapshotsField = value;
                    this.RaisePropertyChanged("HasSnapshots");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToIdentifiableObjectData[] Subjects {
            get {
                return this.SubjectsField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectsField, value) != true)) {
                    this.SubjectsField = value;
                    this.RaisePropertyChanged("Subjects");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public Federation.Client.MyCoreService.LinkToUserData Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public Federation.Client.MyCoreService.LinkToWorkflowTypeData WorkflowType {
            get {
                return this.WorkflowTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkflowTypeField, value) != true)) {
                    this.WorkflowTypeField = value;
                    this.RaisePropertyChanged("WorkflowType");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessInstanceData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ProcessInstanceData : Federation.Client.MyCoreService.ProcessData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToProcessDefinitionData ProcessDefinitionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.VariablesDictionary VariablesField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToProcessDefinitionData ProcessDefinition {
            get {
                return this.ProcessDefinitionField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessDefinitionField, value) != true)) {
                    this.ProcessDefinitionField = value;
                    this.RaisePropertyChanged("ProcessDefinition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.VariablesDictionary Variables {
            get {
                return this.VariablesField;
            }
            set {
                if ((object.ReferenceEquals(this.VariablesField, value) != true)) {
                    this.VariablesField = value;
                    this.RaisePropertyChanged("Variables");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessHistoryData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ProcessHistoryData : Federation.Client.MyCoreService.ProcessData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> FinishDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.ProcessFinishReason> FinishReasonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProcessDefinitionTitleField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.DateTime> FinishDate {
            get {
                return this.FinishDateField;
            }
            set {
                if ((this.FinishDateField.Equals(value) != true)) {
                    this.FinishDateField = value;
                    this.RaisePropertyChanged("FinishDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.ProcessFinishReason> FinishReason {
            get {
                return this.FinishReasonField;
            }
            set {
                if ((this.FinishReasonField.Equals(value) != true)) {
                    this.FinishReasonField = value;
                    this.RaisePropertyChanged("FinishReason");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string ProcessDefinitionTitle {
            get {
                return this.ProcessDefinitionTitleField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessDefinitionTitleField, value) != true)) {
                    this.ProcessDefinitionTitleField = value;
                    this.RaisePropertyChanged("ProcessDefinitionTitle");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityDefinitionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TridionActivityDefinitionData))]
    public partial class ActivityDefinitionData : Federation.Client.MyCoreService.WorkflowObjectData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToTrusteeData AssigneeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToProcessDefinitionData ProcessDefinitionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.ActivityConstraints> ActivityConstraintsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Federation.Client.MyCoreService.LinkToTrusteeData Assignee {
            get {
                return this.AssigneeField;
            }
            set {
                if ((object.ReferenceEquals(this.AssigneeField, value) != true)) {
                    this.AssigneeField = value;
                    this.RaisePropertyChanged("Assignee");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToProcessDefinitionData ProcessDefinition {
            get {
                return this.ProcessDefinitionField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessDefinitionField, value) != true)) {
                    this.ProcessDefinitionField = value;
                    this.RaisePropertyChanged("ProcessDefinition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public System.Nullable<Federation.Client.MyCoreService.ActivityConstraints> ActivityConstraints {
            get {
                return this.ActivityConstraintsField;
            }
            set {
                if ((this.ActivityConstraintsField.Equals(value) != true)) {
                    this.ActivityConstraintsField = value;
                    this.RaisePropertyChanged("ActivityConstraints");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TridionActivityDefinitionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class TridionActivityDefinitionData : Federation.Client.MyCoreService.ActivityDefinitionData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.ActivityType> ActivityTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToApprovalStatusData FinishApprovalStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToTridionActivityDefinitionData[] NextActivityDefinitionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScriptField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> AllowOverrideDueDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<uint> PerformingTimeoutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScriptTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExpirationScriptField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExpirationScriptTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.ActivityType> ActivityType {
            get {
                return this.ActivityTypeField;
            }
            set {
                if ((this.ActivityTypeField.Equals(value) != true)) {
                    this.ActivityTypeField = value;
                    this.RaisePropertyChanged("ActivityType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToApprovalStatusData FinishApprovalStatus {
            get {
                return this.FinishApprovalStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.FinishApprovalStatusField, value) != true)) {
                    this.FinishApprovalStatusField = value;
                    this.RaisePropertyChanged("FinishApprovalStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToTridionActivityDefinitionData[] NextActivityDefinitions {
            get {
                return this.NextActivityDefinitionsField;
            }
            set {
                if ((object.ReferenceEquals(this.NextActivityDefinitionsField, value) != true)) {
                    this.NextActivityDefinitionsField = value;
                    this.RaisePropertyChanged("NextActivityDefinitions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Script {
            get {
                return this.ScriptField;
            }
            set {
                if ((object.ReferenceEquals(this.ScriptField, value) != true)) {
                    this.ScriptField = value;
                    this.RaisePropertyChanged("Script");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public System.Nullable<bool> AllowOverrideDueDate {
            get {
                return this.AllowOverrideDueDateField;
            }
            set {
                if ((this.AllowOverrideDueDateField.Equals(value) != true)) {
                    this.AllowOverrideDueDateField = value;
                    this.RaisePropertyChanged("AllowOverrideDueDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=5)]
        public System.Nullable<uint> PerformingTimeout {
            get {
                return this.PerformingTimeoutField;
            }
            set {
                if ((this.PerformingTimeoutField.Equals(value) != true)) {
                    this.PerformingTimeoutField = value;
                    this.RaisePropertyChanged("PerformingTimeout");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=6)]
        public string ScriptType {
            get {
                return this.ScriptTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ScriptTypeField, value) != true)) {
                    this.ScriptTypeField = value;
                    this.RaisePropertyChanged("ScriptType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=7)]
        public string ExpirationScript {
            get {
                return this.ExpirationScriptField;
            }
            set {
                if ((object.ReferenceEquals(this.ExpirationScriptField, value) != true)) {
                    this.ExpirationScriptField = value;
                    this.RaisePropertyChanged("ExpirationScript");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=8)]
        public string ExpirationScriptType {
            get {
                return this.ExpirationScriptTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ExpirationScriptTypeField, value) != true)) {
                    this.ExpirationScriptTypeField = value;
                    this.RaisePropertyChanged("ExpirationScriptType");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TridionProcessDefinitionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class TridionProcessDefinitionData : Federation.Client.MyCoreService.ProcessDefinitionData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] DiagramField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public byte[] Diagram {
            get {
                return this.DiagramField;
            }
            set {
                if ((object.ReferenceEquals(this.DiagramField, value) != true)) {
                    this.DiagramField = value;
                    this.RaisePropertyChanged("Diagram");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrganizationalItemData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.FolderData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.StructureGroupData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.VirtualFolderData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ResolvedBundleData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.CategoryData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BusinessProcessTypeData))]
    public partial class OrganizationalItemData : Federation.Client.MyCoreService.RepositoryLocalObjectData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.AccessControlListData AccessControlListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsPermissionsInheritanceRootField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsRootOrganizationalItemField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.AccessControlListData AccessControlList {
            get {
                return this.AccessControlListField;
            }
            set {
                if ((object.ReferenceEquals(this.AccessControlListField, value) != true)) {
                    this.AccessControlListField = value;
                    this.RaisePropertyChanged("AccessControlList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsPermissionsInheritanceRoot {
            get {
                return this.IsPermissionsInheritanceRootField;
            }
            set {
                if ((this.IsPermissionsInheritanceRootField.Equals(value) != true)) {
                    this.IsPermissionsInheritanceRootField = value;
                    this.RaisePropertyChanged("IsPermissionsInheritanceRoot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsRootOrganizationalItem {
            get {
                return this.IsRootOrganizationalItemField;
            }
            set {
                if ((this.IsRootOrganizationalItemField.Equals(value) != true)) {
                    this.IsRootOrganizationalItemField = value;
                    this.RaisePropertyChanged("IsRootOrganizationalItem");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FolderData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class FolderData : Federation.Client.MyCoreService.OrganizationalItemData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsLinkedSchemaMandatoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToSchemaData LinkedSchemaField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsLinkedSchemaMandatory {
            get {
                return this.IsLinkedSchemaMandatoryField;
            }
            set {
                if ((this.IsLinkedSchemaMandatoryField.Equals(value) != true)) {
                    this.IsLinkedSchemaMandatoryField = value;
                    this.RaisePropertyChanged("IsLinkedSchemaMandatory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToSchemaData LinkedSchema {
            get {
                return this.LinkedSchemaField;
            }
            set {
                if ((object.ReferenceEquals(this.LinkedSchemaField, value) != true)) {
                    this.LinkedSchemaField = value;
                    this.RaisePropertyChanged("LinkedSchema");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StructureGroupData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class StructureGroupData : Federation.Client.MyCoreService.OrganizationalItemData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToPageTemplateData DefaultPageTemplateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DirectoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsActiveResolvedValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsDefaultPageTemplateInheritedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToProcessDefinitionData PageProcessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToProcessDefinitionData PageBundleProcessField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToPageTemplateData DefaultPageTemplate {
            get {
                return this.DefaultPageTemplateField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultPageTemplateField, value) != true)) {
                    this.DefaultPageTemplateField = value;
                    this.RaisePropertyChanged("DefaultPageTemplate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Directory {
            get {
                return this.DirectoryField;
            }
            set {
                if ((object.ReferenceEquals(this.DirectoryField, value) != true)) {
                    this.DirectoryField = value;
                    this.RaisePropertyChanged("Directory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsActiveResolvedValue {
            get {
                return this.IsActiveResolvedValueField;
            }
            set {
                if ((this.IsActiveResolvedValueField.Equals(value) != true)) {
                    this.IsActiveResolvedValueField = value;
                    this.RaisePropertyChanged("IsActiveResolvedValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsDefaultPageTemplateInherited {
            get {
                return this.IsDefaultPageTemplateInheritedField;
            }
            set {
                if ((this.IsDefaultPageTemplateInheritedField.Equals(value) != true)) {
                    this.IsDefaultPageTemplateInheritedField = value;
                    this.RaisePropertyChanged("IsDefaultPageTemplateInherited");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToProcessDefinitionData PageProcess {
            get {
                return this.PageProcessField;
            }
            set {
                if ((object.ReferenceEquals(this.PageProcessField, value) != true)) {
                    this.PageProcessField = value;
                    this.RaisePropertyChanged("PageProcess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=6)]
        public Federation.Client.MyCoreService.LinkToProcessDefinitionData PageBundleProcess {
            get {
                return this.PageBundleProcessField;
            }
            set {
                if ((object.ReferenceEquals(this.PageBundleProcessField, value) != true)) {
                    this.PageBundleProcessField = value;
                    this.RaisePropertyChanged("PageBundleProcess");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VirtualFolderData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ResolvedBundleData))]
    public partial class VirtualFolderData : Federation.Client.MyCoreService.OrganizationalItemData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConfigurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToSchemaData TypeSchemaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToApprovalStatusData ApprovalStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.WorkflowInfo WorkflowInfoField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Configuration {
            get {
                return this.ConfigurationField;
            }
            set {
                if ((object.ReferenceEquals(this.ConfigurationField, value) != true)) {
                    this.ConfigurationField = value;
                    this.RaisePropertyChanged("Configuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToSchemaData TypeSchema {
            get {
                return this.TypeSchemaField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeSchemaField, value) != true)) {
                    this.TypeSchemaField = value;
                    this.RaisePropertyChanged("TypeSchema");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public Federation.Client.MyCoreService.LinkToApprovalStatusData ApprovalStatus {
            get {
                return this.ApprovalStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.ApprovalStatusField, value) != true)) {
                    this.ApprovalStatusField = value;
                    this.RaisePropertyChanged("ApprovalStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public Federation.Client.MyCoreService.WorkflowInfo WorkflowInfo {
            get {
                return this.WorkflowInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkflowInfoField, value) != true)) {
                    this.WorkflowInfoField = value;
                    this.RaisePropertyChanged("WorkflowInfo");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResolvedBundleData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ResolvedBundleData : Federation.Client.MyCoreService.VirtualFolderData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ItemCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] MappedItemsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ItemCount {
            get {
                return this.ItemCountField;
            }
            set {
                if ((this.ItemCountField.Equals(value) != true)) {
                    this.ItemCountField = value;
                    this.RaisePropertyChanged("ItemCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string[] MappedItems {
            get {
                return this.MappedItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.MappedItemsField, value) != true)) {
                    this.MappedItemsField = value;
                    this.RaisePropertyChanged("MappedItems");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CategoryData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class CategoryData : Federation.Client.MyCoreService.OrganizationalItemData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToCategoryData[] AllowedParentCategoriesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsTaxonomyRootField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToSchemaData KeywordMetadataSchemaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> UseForIdentificationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> UseForNavigationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string XmlNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToCategoryData[] AllowedParentCategories {
            get {
                return this.AllowedParentCategoriesField;
            }
            set {
                if ((object.ReferenceEquals(this.AllowedParentCategoriesField, value) != true)) {
                    this.AllowedParentCategoriesField = value;
                    this.RaisePropertyChanged("AllowedParentCategories");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsTaxonomyRoot {
            get {
                return this.IsTaxonomyRootField;
            }
            set {
                if ((this.IsTaxonomyRootField.Equals(value) != true)) {
                    this.IsTaxonomyRootField = value;
                    this.RaisePropertyChanged("IsTaxonomyRoot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToSchemaData KeywordMetadataSchema {
            get {
                return this.KeywordMetadataSchemaField;
            }
            set {
                if ((object.ReferenceEquals(this.KeywordMetadataSchemaField, value) != true)) {
                    this.KeywordMetadataSchemaField = value;
                    this.RaisePropertyChanged("KeywordMetadataSchema");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> UseForIdentification {
            get {
                return this.UseForIdentificationField;
            }
            set {
                if ((this.UseForIdentificationField.Equals(value) != true)) {
                    this.UseForIdentificationField = value;
                    this.RaisePropertyChanged("UseForIdentification");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> UseForNavigation {
            get {
                return this.UseForNavigationField;
            }
            set {
                if ((this.UseForNavigationField.Equals(value) != true)) {
                    this.UseForNavigationField = value;
                    this.RaisePropertyChanged("UseForNavigation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string XmlName {
            get {
                return this.XmlNameField;
            }
            set {
                if ((object.ReferenceEquals(this.XmlNameField, value) != true)) {
                    this.XmlNameField = value;
                    this.RaisePropertyChanged("XmlName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BusinessProcessTypeData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class BusinessProcessTypeData : Federation.Client.MyCoreService.OrganizationalItemData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToSchemaData[] BundleSchemasField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CdTopologyTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.TargetTypeData[] TargetTypesField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToSchemaData[] BundleSchemas {
            get {
                return this.BundleSchemasField;
            }
            set {
                if ((object.ReferenceEquals(this.BundleSchemasField, value) != true)) {
                    this.BundleSchemasField = value;
                    this.RaisePropertyChanged("BundleSchemas");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string CdTopologyTypeId {
            get {
                return this.CdTopologyTypeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CdTopologyTypeIdField, value) != true)) {
                    this.CdTopologyTypeIdField = value;
                    this.RaisePropertyChanged("CdTopologyTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.TargetTypeData[] TargetTypes {
            get {
                return this.TargetTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetTypesField, value) != true)) {
                    this.TargetTypesField = value;
                    this.RaisePropertyChanged("TargetTypes");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KeywordData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class KeywordData : Federation.Client.MyCoreService.RepositoryLocalObjectData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsAbstractField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsRootField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToKeywordData[] ParentKeywordsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToKeywordData[] RelatedKeywordsField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsAbstract {
            get {
                return this.IsAbstractField;
            }
            set {
                if ((this.IsAbstractField.Equals(value) != true)) {
                    this.IsAbstractField = value;
                    this.RaisePropertyChanged("IsAbstract");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsRoot {
            get {
                return this.IsRootField;
            }
            set {
                if ((this.IsRootField.Equals(value) != true)) {
                    this.IsRootField = value;
                    this.RaisePropertyChanged("IsRoot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToKeywordData[] ParentKeywords {
            get {
                return this.ParentKeywordsField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentKeywordsField, value) != true)) {
                    this.ParentKeywordsField = value;
                    this.RaisePropertyChanged("ParentKeywords");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToKeywordData[] RelatedKeywords {
            get {
                return this.RelatedKeywordsField;
            }
            set {
                if ((object.ReferenceEquals(this.RelatedKeywordsField, value) != true)) {
                    this.RelatedKeywordsField = value;
                    this.RaisePropertyChanged("RelatedKeywords");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TargetGroupData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class TargetGroupData : Federation.Client.MyCoreService.RepositoryLocalObjectData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ConditionData[] ConditionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ConditionData[] Conditions {
            get {
                return this.ConditionsField;
            }
            set {
                if ((object.ReferenceEquals(this.ConditionsField, value) != true)) {
                    this.ConditionsField = value;
                    this.RaisePropertyChanged("Conditions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VersionedItemData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ComponentData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PageData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TemplateData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ComponentTemplateData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PageTemplateData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TemplateBuildingBlockData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.SchemaData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BundleTypeData))]
    public partial class VersionedItemData : Federation.Client.MyCoreService.RepositoryLocalObjectData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.DynamicVersionInfo DynamicVersionInfoField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.DynamicVersionInfo DynamicVersionInfo {
            get {
                return this.DynamicVersionInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.DynamicVersionInfoField, value) != true)) {
                    this.DynamicVersionInfoField = value;
                    this.RaisePropertyChanged("DynamicVersionInfo");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ComponentData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ComponentData : Federation.Client.MyCoreService.VersionedItemData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToApprovalStatusData ApprovalStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.BinaryContentData BinaryContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.ComponentType> ComponentTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsBasedOnMandatorySchemaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsBasedOnTridionWebSchemaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToSchemaData SchemaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.WorkflowInfo WorkflowInfoField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToApprovalStatusData ApprovalStatus {
            get {
                return this.ApprovalStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.ApprovalStatusField, value) != true)) {
                    this.ApprovalStatusField = value;
                    this.RaisePropertyChanged("ApprovalStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.BinaryContentData BinaryContent {
            get {
                return this.BinaryContentField;
            }
            set {
                if ((object.ReferenceEquals(this.BinaryContentField, value) != true)) {
                    this.BinaryContentField = value;
                    this.RaisePropertyChanged("BinaryContent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.ComponentType> ComponentType {
            get {
                return this.ComponentTypeField;
            }
            set {
                if ((this.ComponentTypeField.Equals(value) != true)) {
                    this.ComponentTypeField = value;
                    this.RaisePropertyChanged("ComponentType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsBasedOnMandatorySchema {
            get {
                return this.IsBasedOnMandatorySchemaField;
            }
            set {
                if ((this.IsBasedOnMandatorySchemaField.Equals(value) != true)) {
                    this.IsBasedOnMandatorySchemaField = value;
                    this.RaisePropertyChanged("IsBasedOnMandatorySchema");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsBasedOnTridionWebSchema {
            get {
                return this.IsBasedOnTridionWebSchemaField;
            }
            set {
                if ((this.IsBasedOnTridionWebSchemaField.Equals(value) != true)) {
                    this.IsBasedOnTridionWebSchemaField = value;
                    this.RaisePropertyChanged("IsBasedOnTridionWebSchema");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToSchemaData Schema {
            get {
                return this.SchemaField;
            }
            set {
                if ((object.ReferenceEquals(this.SchemaField, value) != true)) {
                    this.SchemaField = value;
                    this.RaisePropertyChanged("Schema");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.WorkflowInfo WorkflowInfo {
            get {
                return this.WorkflowInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkflowInfoField, value) != true)) {
                    this.WorkflowInfoField = value;
                    this.RaisePropertyChanged("WorkflowInfo");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PageData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class PageData : Federation.Client.MyCoreService.VersionedItemData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToApprovalStatusData ApprovalStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ComponentPresentationData[] ComponentPresentationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsPageTemplateInheritedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToPageTemplateData PageTemplateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.WorkflowInfo WorkflowInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToSchemaData RegionSchemaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.RegionDictionary RegionsField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToApprovalStatusData ApprovalStatus {
            get {
                return this.ApprovalStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.ApprovalStatusField, value) != true)) {
                    this.ApprovalStatusField = value;
                    this.RaisePropertyChanged("ApprovalStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ComponentPresentationData[] ComponentPresentations {
            get {
                return this.ComponentPresentationsField;
            }
            set {
                if ((object.ReferenceEquals(this.ComponentPresentationsField, value) != true)) {
                    this.ComponentPresentationsField = value;
                    this.RaisePropertyChanged("ComponentPresentations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsPageTemplateInherited {
            get {
                return this.IsPageTemplateInheritedField;
            }
            set {
                if ((this.IsPageTemplateInheritedField.Equals(value) != true)) {
                    this.IsPageTemplateInheritedField = value;
                    this.RaisePropertyChanged("IsPageTemplateInherited");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToPageTemplateData PageTemplate {
            get {
                return this.PageTemplateField;
            }
            set {
                if ((object.ReferenceEquals(this.PageTemplateField, value) != true)) {
                    this.PageTemplateField = value;
                    this.RaisePropertyChanged("PageTemplate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.WorkflowInfo WorkflowInfo {
            get {
                return this.WorkflowInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkflowInfoField, value) != true)) {
                    this.WorkflowInfoField = value;
                    this.RaisePropertyChanged("WorkflowInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=6)]
        public Federation.Client.MyCoreService.LinkToSchemaData RegionSchema {
            get {
                return this.RegionSchemaField;
            }
            set {
                if ((object.ReferenceEquals(this.RegionSchemaField, value) != true)) {
                    this.RegionSchemaField = value;
                    this.RaisePropertyChanged("RegionSchema");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=7)]
        public Federation.Client.MyCoreService.RegionDictionary Regions {
            get {
                return this.RegionsField;
            }
            set {
                if ((object.ReferenceEquals(this.RegionsField, value) != true)) {
                    this.RegionsField = value;
                    this.RaisePropertyChanged("Regions");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TemplateData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ComponentTemplateData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PageTemplateData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TemplateBuildingBlockData))]
    public partial class TemplateData : Federation.Client.MyCoreService.VersionedItemData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.BinaryContentData BinaryContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToSchemaData ParameterSchemaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TemplateTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.BinaryContentData BinaryContent {
            get {
                return this.BinaryContentField;
            }
            set {
                if ((object.ReferenceEquals(this.BinaryContentField, value) != true)) {
                    this.BinaryContentField = value;
                    this.RaisePropertyChanged("BinaryContent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToSchemaData ParameterSchema {
            get {
                return this.ParameterSchemaField;
            }
            set {
                if ((object.ReferenceEquals(this.ParameterSchemaField, value) != true)) {
                    this.ParameterSchemaField = value;
                    this.RaisePropertyChanged("ParameterSchema");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string TemplateType {
            get {
                return this.TemplateTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TemplateTypeField, value) != true)) {
                    this.TemplateTypeField = value;
                    this.RaisePropertyChanged("TemplateType");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ComponentTemplateData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ComponentTemplateData : Federation.Client.MyCoreService.TemplateData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> AllowOnPageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToApprovalStatusData ApprovalStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DynamicTemplateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsRepositoryPublishableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OutputFormatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToSchemaData[] RelatedSchemasField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToCategoryData[] TrackingCategoriesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.WorkflowInfo WorkflowInfoField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> AllowOnPage {
            get {
                return this.AllowOnPageField;
            }
            set {
                if ((this.AllowOnPageField.Equals(value) != true)) {
                    this.AllowOnPageField = value;
                    this.RaisePropertyChanged("AllowOnPage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToApprovalStatusData ApprovalStatus {
            get {
                return this.ApprovalStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.ApprovalStatusField, value) != true)) {
                    this.ApprovalStatusField = value;
                    this.RaisePropertyChanged("ApprovalStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string DynamicTemplate {
            get {
                return this.DynamicTemplateField;
            }
            set {
                if ((object.ReferenceEquals(this.DynamicTemplateField, value) != true)) {
                    this.DynamicTemplateField = value;
                    this.RaisePropertyChanged("DynamicTemplate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsRepositoryPublishable {
            get {
                return this.IsRepositoryPublishableField;
            }
            set {
                if ((this.IsRepositoryPublishableField.Equals(value) != true)) {
                    this.IsRepositoryPublishableField = value;
                    this.RaisePropertyChanged("IsRepositoryPublishable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string OutputFormat {
            get {
                return this.OutputFormatField;
            }
            set {
                if ((object.ReferenceEquals(this.OutputFormatField, value) != true)) {
                    this.OutputFormatField = value;
                    this.RaisePropertyChanged("OutputFormat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<int> Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToSchemaData[] RelatedSchemas {
            get {
                return this.RelatedSchemasField;
            }
            set {
                if ((object.ReferenceEquals(this.RelatedSchemasField, value) != true)) {
                    this.RelatedSchemasField = value;
                    this.RaisePropertyChanged("RelatedSchemas");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToCategoryData[] TrackingCategories {
            get {
                return this.TrackingCategoriesField;
            }
            set {
                if ((object.ReferenceEquals(this.TrackingCategoriesField, value) != true)) {
                    this.TrackingCategoriesField = value;
                    this.RaisePropertyChanged("TrackingCategories");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.WorkflowInfo WorkflowInfo {
            get {
                return this.WorkflowInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkflowInfoField, value) != true)) {
                    this.WorkflowInfoField = value;
                    this.RaisePropertyChanged("WorkflowInfo");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PageTemplateData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class PageTemplateData : Federation.Client.MyCoreService.TemplateData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToApprovalStatusData ApprovalStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileExtensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.WorkflowInfo WorkflowInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToSchemaData PageSchemaField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToApprovalStatusData ApprovalStatus {
            get {
                return this.ApprovalStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.ApprovalStatusField, value) != true)) {
                    this.ApprovalStatusField = value;
                    this.RaisePropertyChanged("ApprovalStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string FileExtension {
            get {
                return this.FileExtensionField;
            }
            set {
                if ((object.ReferenceEquals(this.FileExtensionField, value) != true)) {
                    this.FileExtensionField = value;
                    this.RaisePropertyChanged("FileExtension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.WorkflowInfo WorkflowInfo {
            get {
                return this.WorkflowInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkflowInfoField, value) != true)) {
                    this.WorkflowInfoField = value;
                    this.RaisePropertyChanged("WorkflowInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public Federation.Client.MyCoreService.LinkToSchemaData PageSchema {
            get {
                return this.PageSchemaField;
            }
            set {
                if ((object.ReferenceEquals(this.PageSchemaField, value) != true)) {
                    this.PageSchemaField = value;
                    this.RaisePropertyChanged("PageSchema");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TemplateBuildingBlockData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class TemplateBuildingBlockData : Federation.Client.MyCoreService.TemplateData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToApprovalStatusData ApprovalStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.WorkflowInfo WorkflowInfoField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToApprovalStatusData ApprovalStatus {
            get {
                return this.ApprovalStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.ApprovalStatusField, value) != true)) {
                    this.ApprovalStatusField = value;
                    this.RaisePropertyChanged("ApprovalStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.WorkflowInfo WorkflowInfo {
            get {
                return this.WorkflowInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkflowInfoField, value) != true)) {
                    this.WorkflowInfoField = value;
                    this.RaisePropertyChanged("WorkflowInfo");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SchemaData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BundleTypeData))]
    public partial class SchemaData : Federation.Client.MyCoreService.VersionedItemData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToMultimediaTypeData[] AllowedMultimediaTypesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToProcessDefinitionData ComponentProcessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsTridionWebSchemaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NamespaceUriField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.SchemaPurpose> PurposeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RootElementNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string XsdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToProcessDefinitionData BundleProcessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> DeleteBundleOnProcessFinishedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.RegionDefinitionData RegionDefinitionField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToMultimediaTypeData[] AllowedMultimediaTypes {
            get {
                return this.AllowedMultimediaTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.AllowedMultimediaTypesField, value) != true)) {
                    this.AllowedMultimediaTypesField = value;
                    this.RaisePropertyChanged("AllowedMultimediaTypes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToProcessDefinitionData ComponentProcess {
            get {
                return this.ComponentProcessField;
            }
            set {
                if ((object.ReferenceEquals(this.ComponentProcessField, value) != true)) {
                    this.ComponentProcessField = value;
                    this.RaisePropertyChanged("ComponentProcess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsTridionWebSchema {
            get {
                return this.IsTridionWebSchemaField;
            }
            set {
                if ((this.IsTridionWebSchemaField.Equals(value) != true)) {
                    this.IsTridionWebSchemaField = value;
                    this.RaisePropertyChanged("IsTridionWebSchema");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string NamespaceUri {
            get {
                return this.NamespaceUriField;
            }
            set {
                if ((object.ReferenceEquals(this.NamespaceUriField, value) != true)) {
                    this.NamespaceUriField = value;
                    this.RaisePropertyChanged("NamespaceUri");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.SchemaPurpose> Purpose {
            get {
                return this.PurposeField;
            }
            set {
                if ((this.PurposeField.Equals(value) != true)) {
                    this.PurposeField = value;
                    this.RaisePropertyChanged("Purpose");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string RootElementName {
            get {
                return this.RootElementNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RootElementNameField, value) != true)) {
                    this.RootElementNameField = value;
                    this.RaisePropertyChanged("RootElementName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Xsd {
            get {
                return this.XsdField;
            }
            set {
                if ((object.ReferenceEquals(this.XsdField, value) != true)) {
                    this.XsdField = value;
                    this.RaisePropertyChanged("Xsd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=8)]
        public Federation.Client.MyCoreService.LinkToProcessDefinitionData BundleProcess {
            get {
                return this.BundleProcessField;
            }
            set {
                if ((object.ReferenceEquals(this.BundleProcessField, value) != true)) {
                    this.BundleProcessField = value;
                    this.RaisePropertyChanged("BundleProcess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=9)]
        public System.Nullable<bool> DeleteBundleOnProcessFinished {
            get {
                return this.DeleteBundleOnProcessFinishedField;
            }
            set {
                if ((this.DeleteBundleOnProcessFinishedField.Equals(value) != true)) {
                    this.DeleteBundleOnProcessFinishedField = value;
                    this.RaisePropertyChanged("DeleteBundleOnProcessFinished");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=10)]
        public Federation.Client.MyCoreService.RegionDefinitionData RegionDefinition {
            get {
                return this.RegionDefinitionField;
            }
            set {
                if ((object.ReferenceEquals(this.RegionDefinitionField, value) != true)) {
                    this.RegionDefinitionField = value;
                    this.RaisePropertyChanged("RegionDefinition");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BundleTypeData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class BundleTypeData : Federation.Client.MyCoreService.SchemaData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] MappedItemsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ResolvedBundleData[] ResolvedBundlesField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string[] MappedItems {
            get {
                return this.MappedItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.MappedItemsField, value) != true)) {
                    this.MappedItemsField = value;
                    this.RaisePropertyChanged("MappedItems");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ResolvedBundleData[] ResolvedBundles {
            get {
                return this.ResolvedBundlesField;
            }
            set {
                if ((object.ReferenceEquals(this.ResolvedBundlesField, value) != true)) {
                    this.ResolvedBundlesField = value;
                    this.RaisePropertyChanged("ResolvedBundles");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessDefinitionAssociationData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ProcessDefinitionAssociationData : Federation.Client.MyCoreService.IdentifiableObjectData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToProcessDefinitionData ProcessDefinitionField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToProcessDefinitionData ProcessDefinition {
            get {
                return this.ProcessDefinitionField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessDefinitionField, value) != true)) {
                    this.ProcessDefinitionField = value;
                    this.RaisePropertyChanged("ProcessDefinition");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SystemWideObjectData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PublishingTargetData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PublicationTargetData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TargetTypeData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.RepositoryData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PublicationData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BluePrintNodeData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.MultimediaTypeData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ApprovalStatusData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BatchData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.RegisteredTypeData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.WorkflowTypeData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PublishTransactionData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TrusteeData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.GroupData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.UserData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.AccessTokenData))]
    public partial class SystemWideObjectData : Federation.Client.MyCoreService.IdentifiableObjectData {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RepositoryData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PublicationData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BluePrintNodeData))]
    public partial class RepositoryData : Federation.Client.MyCoreService.SystemWideObjectData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.AccessControlListData AccessControlListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoriesXsdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToSchemaData DefaultMultimediaSchemaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> HasChildrenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LocationInfo LocationInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MetadataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToSchemaData MetadataSchemaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToRepositoryData[] ParentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToFolderData RootFolderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToProcessDefinitionData TaskProcessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToBusinessProcessTypeData BusinessProcessTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToApprovalStatusData MinimalLocalizeApprovalStatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.AccessControlListData AccessControlList {
            get {
                return this.AccessControlListField;
            }
            set {
                if ((object.ReferenceEquals(this.AccessControlListField, value) != true)) {
                    this.AccessControlListField = value;
                    this.RaisePropertyChanged("AccessControlList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string CategoriesXsd {
            get {
                return this.CategoriesXsdField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoriesXsdField, value) != true)) {
                    this.CategoriesXsdField = value;
                    this.RaisePropertyChanged("CategoriesXsd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToSchemaData DefaultMultimediaSchema {
            get {
                return this.DefaultMultimediaSchemaField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultMultimediaSchemaField, value) != true)) {
                    this.DefaultMultimediaSchemaField = value;
                    this.RaisePropertyChanged("DefaultMultimediaSchema");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> HasChildren {
            get {
                return this.HasChildrenField;
            }
            set {
                if ((this.HasChildrenField.Equals(value) != true)) {
                    this.HasChildrenField = value;
                    this.RaisePropertyChanged("HasChildren");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LocationInfo LocationInfo {
            get {
                return this.LocationInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationInfoField, value) != true)) {
                    this.LocationInfoField = value;
                    this.RaisePropertyChanged("LocationInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Metadata {
            get {
                return this.MetadataField;
            }
            set {
                if ((object.ReferenceEquals(this.MetadataField, value) != true)) {
                    this.MetadataField = value;
                    this.RaisePropertyChanged("Metadata");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToSchemaData MetadataSchema {
            get {
                return this.MetadataSchemaField;
            }
            set {
                if ((object.ReferenceEquals(this.MetadataSchemaField, value) != true)) {
                    this.MetadataSchemaField = value;
                    this.RaisePropertyChanged("MetadataSchema");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToRepositoryData[] Parents {
            get {
                return this.ParentsField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentsField, value) != true)) {
                    this.ParentsField = value;
                    this.RaisePropertyChanged("Parents");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToFolderData RootFolder {
            get {
                return this.RootFolderField;
            }
            set {
                if ((object.ReferenceEquals(this.RootFolderField, value) != true)) {
                    this.RootFolderField = value;
                    this.RaisePropertyChanged("RootFolder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToProcessDefinitionData TaskProcess {
            get {
                return this.TaskProcessField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskProcessField, value) != true)) {
                    this.TaskProcessField = value;
                    this.RaisePropertyChanged("TaskProcess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=11)]
        public Federation.Client.MyCoreService.LinkToBusinessProcessTypeData BusinessProcessType {
            get {
                return this.BusinessProcessTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.BusinessProcessTypeField, value) != true)) {
                    this.BusinessProcessTypeField = value;
                    this.RaisePropertyChanged("BusinessProcessType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=12)]
        public Federation.Client.MyCoreService.LinkToApprovalStatusData MinimalLocalizeApprovalStatus {
            get {
                return this.MinimalLocalizeApprovalStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.MinimalLocalizeApprovalStatusField, value) != true)) {
                    this.MinimalLocalizeApprovalStatusField = value;
                    this.RaisePropertyChanged("MinimalLocalizeApprovalStatus");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PublicationData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BluePrintNodeData))]
    public partial class PublicationData : Federation.Client.MyCoreService.RepositoryData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToComponentTemplateData ComponentSnapshotTemplateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToProcessDefinitionData ComponentTemplateProcessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToComponentTemplateData DefaultComponentTemplateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToPageTemplateData DefaultPageTemplateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToTemplateBuildingBlockData DefaultTemplateBuildingBlockField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MultimediaPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MultimediaUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToPageTemplateData PageSnapshotTemplateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToProcessDefinitionData PageTemplateProcessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PublicationPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PublicationTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PublicationUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToStructureGroupData RootStructureGroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> ShareProcessAssociationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToProcessDefinitionData TemplateBundleProcessField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToComponentTemplateData ComponentSnapshotTemplate {
            get {
                return this.ComponentSnapshotTemplateField;
            }
            set {
                if ((object.ReferenceEquals(this.ComponentSnapshotTemplateField, value) != true)) {
                    this.ComponentSnapshotTemplateField = value;
                    this.RaisePropertyChanged("ComponentSnapshotTemplate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToProcessDefinitionData ComponentTemplateProcess {
            get {
                return this.ComponentTemplateProcessField;
            }
            set {
                if ((object.ReferenceEquals(this.ComponentTemplateProcessField, value) != true)) {
                    this.ComponentTemplateProcessField = value;
                    this.RaisePropertyChanged("ComponentTemplateProcess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToComponentTemplateData DefaultComponentTemplate {
            get {
                return this.DefaultComponentTemplateField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultComponentTemplateField, value) != true)) {
                    this.DefaultComponentTemplateField = value;
                    this.RaisePropertyChanged("DefaultComponentTemplate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToPageTemplateData DefaultPageTemplate {
            get {
                return this.DefaultPageTemplateField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultPageTemplateField, value) != true)) {
                    this.DefaultPageTemplateField = value;
                    this.RaisePropertyChanged("DefaultPageTemplate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToTemplateBuildingBlockData DefaultTemplateBuildingBlock {
            get {
                return this.DefaultTemplateBuildingBlockField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultTemplateBuildingBlockField, value) != true)) {
                    this.DefaultTemplateBuildingBlockField = value;
                    this.RaisePropertyChanged("DefaultTemplateBuildingBlock");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string MultimediaPath {
            get {
                return this.MultimediaPathField;
            }
            set {
                if ((object.ReferenceEquals(this.MultimediaPathField, value) != true)) {
                    this.MultimediaPathField = value;
                    this.RaisePropertyChanged("MultimediaPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string MultimediaUrl {
            get {
                return this.MultimediaUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.MultimediaUrlField, value) != true)) {
                    this.MultimediaUrlField = value;
                    this.RaisePropertyChanged("MultimediaUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToPageTemplateData PageSnapshotTemplate {
            get {
                return this.PageSnapshotTemplateField;
            }
            set {
                if ((object.ReferenceEquals(this.PageSnapshotTemplateField, value) != true)) {
                    this.PageSnapshotTemplateField = value;
                    this.RaisePropertyChanged("PageSnapshotTemplate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToProcessDefinitionData PageTemplateProcess {
            get {
                return this.PageTemplateProcessField;
            }
            set {
                if ((object.ReferenceEquals(this.PageTemplateProcessField, value) != true)) {
                    this.PageTemplateProcessField = value;
                    this.RaisePropertyChanged("PageTemplateProcess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string PublicationPath {
            get {
                return this.PublicationPathField;
            }
            set {
                if ((object.ReferenceEquals(this.PublicationPathField, value) != true)) {
                    this.PublicationPathField = value;
                    this.RaisePropertyChanged("PublicationPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string PublicationType {
            get {
                return this.PublicationTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.PublicationTypeField, value) != true)) {
                    this.PublicationTypeField = value;
                    this.RaisePropertyChanged("PublicationType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string PublicationUrl {
            get {
                return this.PublicationUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.PublicationUrlField, value) != true)) {
                    this.PublicationUrlField = value;
                    this.RaisePropertyChanged("PublicationUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToStructureGroupData RootStructureGroup {
            get {
                return this.RootStructureGroupField;
            }
            set {
                if ((object.ReferenceEquals(this.RootStructureGroupField, value) != true)) {
                    this.RootStructureGroupField = value;
                    this.RaisePropertyChanged("RootStructureGroup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> ShareProcessAssociations {
            get {
                return this.ShareProcessAssociationsField;
            }
            set {
                if ((this.ShareProcessAssociationsField.Equals(value) != true)) {
                    this.ShareProcessAssociationsField = value;
                    this.RaisePropertyChanged("ShareProcessAssociations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToProcessDefinitionData TemplateBundleProcess {
            get {
                return this.TemplateBundleProcessField;
            }
            set {
                if ((object.ReferenceEquals(this.TemplateBundleProcessField, value) != true)) {
                    this.TemplateBundleProcessField = value;
                    this.RaisePropertyChanged("TemplateBundleProcess");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BluePrintNodeData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class BluePrintNodeData : Federation.Client.MyCoreService.PublicationData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.RepositoryLocalObjectData ItemField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.RepositoryLocalObjectData Item {
            get {
                return this.ItemField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemField, value) != true)) {
                    this.ItemField = value;
                    this.RaisePropertyChanged("Item");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MultimediaTypeData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class MultimediaTypeData : Federation.Client.MyCoreService.SystemWideObjectData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.FileExtensionsList FileExtensionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MimeTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.FileExtensionsList FileExtensions {
            get {
                return this.FileExtensionsField;
            }
            set {
                if ((object.ReferenceEquals(this.FileExtensionsField, value) != true)) {
                    this.FileExtensionsField = value;
                    this.RaisePropertyChanged("FileExtensions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string MimeType {
            get {
                return this.MimeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MimeTypeField, value) != true)) {
                    this.MimeTypeField = value;
                    this.RaisePropertyChanged("MimeType");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ApprovalStatusData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ApprovalStatusData : Federation.Client.MyCoreService.SystemWideObjectData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsDeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PositionField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<int> Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BatchData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class BatchData : Federation.Client.MyCoreService.SystemWideObjectData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> NumberOfDoneOperationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.BatchOperationData[] OperationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToUserData PerformerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StartAtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TotalNumberOfOperationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.AccessTokenData PerformerAccessTokenField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<int> NumberOfDoneOperations {
            get {
                return this.NumberOfDoneOperationsField;
            }
            set {
                if ((this.NumberOfDoneOperationsField.Equals(value) != true)) {
                    this.NumberOfDoneOperationsField = value;
                    this.RaisePropertyChanged("NumberOfDoneOperations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.BatchOperationData[] Operations {
            get {
                return this.OperationsField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationsField, value) != true)) {
                    this.OperationsField = value;
                    this.RaisePropertyChanged("Operations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToUserData Performer {
            get {
                return this.PerformerField;
            }
            set {
                if ((object.ReferenceEquals(this.PerformerField, value) != true)) {
                    this.PerformerField = value;
                    this.RaisePropertyChanged("Performer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.DateTime> StartAt {
            get {
                return this.StartAtField;
            }
            set {
                if ((this.StartAtField.Equals(value) != true)) {
                    this.StartAtField = value;
                    this.RaisePropertyChanged("StartAt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<int> TotalNumberOfOperations {
            get {
                return this.TotalNumberOfOperationsField;
            }
            set {
                if ((this.TotalNumberOfOperationsField.Equals(value) != true)) {
                    this.TotalNumberOfOperationsField = value;
                    this.RaisePropertyChanged("TotalNumberOfOperations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=5)]
        public Federation.Client.MyCoreService.AccessTokenData PerformerAccessToken {
            get {
                return this.PerformerAccessTokenField;
            }
            set {
                if ((object.ReferenceEquals(this.PerformerAccessTokenField, value) != true)) {
                    this.PerformerAccessTokenField = value;
                    this.RaisePropertyChanged("PerformerAccessToken");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RegisteredTypeData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.WorkflowTypeData))]
    public partial class RegisteredTypeData : Federation.Client.MyCoreService.SystemWideObjectData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkflowTypeData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class WorkflowTypeData : Federation.Client.MyCoreService.RegisteredTypeData {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PublishTransactionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class PublishTransactionData : Federation.Client.MyCoreService.SystemWideObjectData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToUserData CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.DeployerAction> DeployerActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> HasRenderFailuresField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InformationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.PublishInstructionBaseData InstructionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToIdentifiableObjectData[] ItemsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.PublishPriority> PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.PublishContextData[] PublishContextsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.PublishTransactionState> StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StateChangeDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsCompletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PublisherHostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToTargetTypeData TargetTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.TimeSpan> RenderingTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.TimeSpan> ResolvingTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.TimeSpan> TotalExecutionTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToUserData Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.DeployerAction> DeployerAction {
            get {
                return this.DeployerActionField;
            }
            set {
                if ((this.DeployerActionField.Equals(value) != true)) {
                    this.DeployerActionField = value;
                    this.RaisePropertyChanged("DeployerAction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> HasRenderFailures {
            get {
                return this.HasRenderFailuresField;
            }
            set {
                if ((this.HasRenderFailuresField.Equals(value) != true)) {
                    this.HasRenderFailuresField = value;
                    this.RaisePropertyChanged("HasRenderFailures");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Information {
            get {
                return this.InformationField;
            }
            set {
                if ((object.ReferenceEquals(this.InformationField, value) != true)) {
                    this.InformationField = value;
                    this.RaisePropertyChanged("Information");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.PublishInstructionBaseData Instruction {
            get {
                return this.InstructionField;
            }
            set {
                if ((object.ReferenceEquals(this.InstructionField, value) != true)) {
                    this.InstructionField = value;
                    this.RaisePropertyChanged("Instruction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToIdentifiableObjectData[] Items {
            get {
                return this.ItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemsField, value) != true)) {
                    this.ItemsField = value;
                    this.RaisePropertyChanged("Items");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.PublishPriority> Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.PublishContextData[] PublishContexts {
            get {
                return this.PublishContextsField;
            }
            set {
                if ((object.ReferenceEquals(this.PublishContextsField, value) != true)) {
                    this.PublishContextsField = value;
                    this.RaisePropertyChanged("PublishContexts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.PublishTransactionState> State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.DateTime> StateChangeDateTime {
            get {
                return this.StateChangeDateTimeField;
            }
            set {
                if ((this.StateChangeDateTimeField.Equals(value) != true)) {
                    this.StateChangeDateTimeField = value;
                    this.RaisePropertyChanged("StateChangeDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=10)]
        public System.Nullable<bool> IsCompleted {
            get {
                return this.IsCompletedField;
            }
            set {
                if ((this.IsCompletedField.Equals(value) != true)) {
                    this.IsCompletedField = value;
                    this.RaisePropertyChanged("IsCompleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=11)]
        public string PublisherHost {
            get {
                return this.PublisherHostField;
            }
            set {
                if ((object.ReferenceEquals(this.PublisherHostField, value) != true)) {
                    this.PublisherHostField = value;
                    this.RaisePropertyChanged("PublisherHost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=12)]
        public Federation.Client.MyCoreService.LinkToTargetTypeData TargetType {
            get {
                return this.TargetTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetTypeField, value) != true)) {
                    this.TargetTypeField = value;
                    this.RaisePropertyChanged("TargetType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=13)]
        public System.Nullable<System.TimeSpan> RenderingTime {
            get {
                return this.RenderingTimeField;
            }
            set {
                if ((this.RenderingTimeField.Equals(value) != true)) {
                    this.RenderingTimeField = value;
                    this.RaisePropertyChanged("RenderingTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=14)]
        public System.Nullable<System.TimeSpan> ResolvingTime {
            get {
                return this.ResolvingTimeField;
            }
            set {
                if ((this.ResolvingTimeField.Equals(value) != true)) {
                    this.ResolvingTimeField = value;
                    this.RaisePropertyChanged("ResolvingTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=15)]
        public System.Nullable<System.TimeSpan> TotalExecutionTime {
            get {
                return this.TotalExecutionTimeField;
            }
            set {
                if ((this.TotalExecutionTimeField.Equals(value) != true)) {
                    this.TotalExecutionTimeField = value;
                    this.RaisePropertyChanged("TotalExecutionTime");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrusteeData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.GroupData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.UserData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.AccessTokenData))]
    public partial class TrusteeData : Federation.Client.MyCoreService.SystemWideObjectData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.GroupMembershipData[] GroupMembershipsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsPredefinedField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.GroupMembershipData[] GroupMemberships {
            get {
                return this.GroupMembershipsField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupMembershipsField, value) != true)) {
                    this.GroupMembershipsField = value;
                    this.RaisePropertyChanged("GroupMemberships");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsPredefined {
            get {
                return this.IsPredefinedField;
            }
            set {
                if ((this.IsPredefinedField.Equals(value) != true)) {
                    this.IsPredefinedField = value;
                    this.RaisePropertyChanged("IsPredefined");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class GroupData : Federation.Client.MyCoreService.TrusteeData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ClaimMappingData[] ClaimMappingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> DefaultGroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkWithIsEditableToRepositoryData[] ScopeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.SystemPrivilegesDictionary InheritedSystemPrivilegesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.SystemPrivilege[] SystemPrivilegesField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ClaimMappingData[] ClaimMappings {
            get {
                return this.ClaimMappingsField;
            }
            set {
                if ((object.ReferenceEquals(this.ClaimMappingsField, value) != true)) {
                    this.ClaimMappingsField = value;
                    this.RaisePropertyChanged("ClaimMappings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<int> DefaultGroupId {
            get {
                return this.DefaultGroupIdField;
            }
            set {
                if ((this.DefaultGroupIdField.Equals(value) != true)) {
                    this.DefaultGroupIdField = value;
                    this.RaisePropertyChanged("DefaultGroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkWithIsEditableToRepositoryData[] Scope {
            get {
                return this.ScopeField;
            }
            set {
                if ((object.ReferenceEquals(this.ScopeField, value) != true)) {
                    this.ScopeField = value;
                    this.RaisePropertyChanged("Scope");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public Federation.Client.MyCoreService.SystemPrivilegesDictionary InheritedSystemPrivileges {
            get {
                return this.InheritedSystemPrivilegesField;
            }
            set {
                if ((object.ReferenceEquals(this.InheritedSystemPrivilegesField, value) != true)) {
                    this.InheritedSystemPrivilegesField = value;
                    this.RaisePropertyChanged("InheritedSystemPrivileges");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public Federation.Client.MyCoreService.SystemPrivilege[] SystemPrivileges {
            get {
                return this.SystemPrivilegesField;
            }
            set {
                if ((object.ReferenceEquals(this.SystemPrivilegesField, value) != true)) {
                    this.SystemPrivilegesField = value;
                    this.RaisePropertyChanged("SystemPrivileges");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.AccessTokenData))]
    public partial class UserData : Federation.Client.MyCoreService.TrusteeData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsEnabledEditableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsPrivilegesEditableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> LanguageIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> LocaleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PrivilegesField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsEnabled {
            get {
                return this.IsEnabledField;
            }
            set {
                if ((this.IsEnabledField.Equals(value) != true)) {
                    this.IsEnabledField = value;
                    this.RaisePropertyChanged("IsEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsEnabledEditable {
            get {
                return this.IsEnabledEditableField;
            }
            set {
                if ((this.IsEnabledEditableField.Equals(value) != true)) {
                    this.IsEnabledEditableField = value;
                    this.RaisePropertyChanged("IsEnabledEditable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsPrivilegesEditable {
            get {
                return this.IsPrivilegesEditableField;
            }
            set {
                if ((this.IsPrivilegesEditableField.Equals(value) != true)) {
                    this.IsPrivilegesEditableField = value;
                    this.RaisePropertyChanged("IsPrivilegesEditable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<int> LanguageId {
            get {
                return this.LanguageIdField;
            }
            set {
                if ((this.LanguageIdField.Equals(value) != true)) {
                    this.LanguageIdField = value;
                    this.RaisePropertyChanged("LanguageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<int> LocaleId {
            get {
                return this.LocaleIdField;
            }
            set {
                if ((this.LocaleIdField.Equals(value) != true)) {
                    this.LocaleIdField = value;
                    this.RaisePropertyChanged("LocaleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<int> Privileges {
            get {
                return this.PrivilegesField;
            }
            set {
                if ((this.PrivilegesField.Equals(value) != true)) {
                    this.PrivilegesField = value;
                    this.RaisePropertyChanged("Privileges");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccessTokenData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class AccessTokenData : Federation.Client.MyCoreService.UserData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ExpiresAtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SignatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.SystemPrivilegesDictionary InheritedSystemPrivilegesField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.DateTime ExpiresAt {
            get {
                return this.ExpiresAtField;
            }
            set {
                if ((this.ExpiresAtField.Equals(value) != true)) {
                    this.ExpiresAtField = value;
                    this.RaisePropertyChanged("ExpiresAt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Signature {
            get {
                return this.SignatureField;
            }
            set {
                if ((object.ReferenceEquals(this.SignatureField, value) != true)) {
                    this.SignatureField = value;
                    this.RaisePropertyChanged("Signature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public Federation.Client.MyCoreService.SystemPrivilegesDictionary InheritedSystemPrivileges {
            get {
                return this.InheritedSystemPrivilegesField;
            }
            set {
                if ((object.ReferenceEquals(this.InheritedSystemPrivilegesField, value) != true)) {
                    this.InheritedSystemPrivilegesField = value;
                    this.RaisePropertyChanged("InheritedSystemPrivileges");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ExtensionPropertyDictionary", Namespace="http://www.sdltridion.com/ContentManager/R6", ItemName="ExtensionProperty", KeyName="Name", ValueName="Value")]
    [System.SerializableAttribute()]
    public class ExtensionPropertyDictionary : System.Collections.Generic.Dictionary<string, string> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PublishingTargetData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PublicationTargetData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TargetTypeData))]
    public partial class PublishingTargetData : Federation.Client.MyCoreService.SystemWideObjectData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PublicationTargetData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class PublicationTargetData : Federation.Client.MyCoreService.PublishingTargetData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> DefaultCodePageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.TargetDestinationData[] DestinationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToApprovalStatusData MinApprovalStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.PublishPriority> PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToPublicationData[] PublicationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetLanguageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToTargetTypeData[] TargetTypesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsEmulatedField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<int> DefaultCodePage {
            get {
                return this.DefaultCodePageField;
            }
            set {
                if ((this.DefaultCodePageField.Equals(value) != true)) {
                    this.DefaultCodePageField = value;
                    this.RaisePropertyChanged("DefaultCodePage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.TargetDestinationData[] Destinations {
            get {
                return this.DestinationsField;
            }
            set {
                if ((object.ReferenceEquals(this.DestinationsField, value) != true)) {
                    this.DestinationsField = value;
                    this.RaisePropertyChanged("Destinations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToApprovalStatusData MinApprovalStatus {
            get {
                return this.MinApprovalStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.MinApprovalStatusField, value) != true)) {
                    this.MinApprovalStatusField = value;
                    this.RaisePropertyChanged("MinApprovalStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.PublishPriority> Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToPublicationData[] Publications {
            get {
                return this.PublicationsField;
            }
            set {
                if ((object.ReferenceEquals(this.PublicationsField, value) != true)) {
                    this.PublicationsField = value;
                    this.RaisePropertyChanged("Publications");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string TargetLanguage {
            get {
                return this.TargetLanguageField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetLanguageField, value) != true)) {
                    this.TargetLanguageField = value;
                    this.RaisePropertyChanged("TargetLanguage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToTargetTypeData[] TargetTypes {
            get {
                return this.TargetTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetTypesField, value) != true)) {
                    this.TargetTypesField = value;
                    this.RaisePropertyChanged("TargetTypes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=7)]
        public System.Nullable<bool> IsEmulated {
            get {
                return this.IsEmulatedField;
            }
            set {
                if ((this.IsEmulatedField.Equals(value) != true)) {
                    this.IsEmulatedField = value;
                    this.RaisePropertyChanged("IsEmulated");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TargetTypeData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class TargetTypeData : Federation.Client.MyCoreService.PublishingTargetData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.AccessControlListData AccessControlListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToBusinessProcessTypeData BusinessProcessTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToApprovalStatusData MinimalApprovalStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.PublishPriority> PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PurposeField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.AccessControlListData AccessControlList {
            get {
                return this.AccessControlListField;
            }
            set {
                if ((object.ReferenceEquals(this.AccessControlListField, value) != true)) {
                    this.AccessControlListField = value;
                    this.RaisePropertyChanged("AccessControlList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToBusinessProcessTypeData BusinessProcessType {
            get {
                return this.BusinessProcessTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.BusinessProcessTypeField, value) != true)) {
                    this.BusinessProcessTypeField = value;
                    this.RaisePropertyChanged("BusinessProcessType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToApprovalStatusData MinimalApprovalStatus {
            get {
                return this.MinimalApprovalStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.MinimalApprovalStatusField, value) != true)) {
                    this.MinimalApprovalStatusField = value;
                    this.RaisePropertyChanged("MinimalApprovalStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.PublishPriority> Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Purpose {
            get {
                return this.PurposeField;
            }
            set {
                if ((object.ReferenceEquals(this.PurposeField, value) != true)) {
                    this.PurposeField = value;
                    this.RaisePropertyChanged("Purpose");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupMembershipData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class GroupMembershipData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToGroupData GroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkWithIsEditableToRepositoryData[] ScopeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Federation.Client.MyCoreService.LinkToGroupData Group {
            get {
                return this.GroupField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupField, value) != true)) {
                    this.GroupField = value;
                    this.RaisePropertyChanged("Group");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Federation.Client.MyCoreService.LinkWithIsEditableToRepositoryData[] Scope {
            get {
                return this.ScopeField;
            }
            set {
                if ((object.ReferenceEquals(this.ScopeField, value) != true)) {
                    this.ScopeField = value;
                    this.RaisePropertyChanged("Scope");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="SystemPrivilegesDictionary", Namespace="http://www.sdltridion.com/ContentManager/R6", ItemName="Item", KeyName="SystemPrivilege", ValueName="Groups")]
    [System.SerializableAttribute()]
    public class SystemPrivilegesDictionary : System.Collections.Generic.Dictionary<Federation.Client.MyCoreService.SystemPrivilege, Federation.Client.MyCoreService.LinkToGroupData[]> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Info", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BluePrintInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LocationInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PublishLocationInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LockInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.WorkflowInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.DynamicVersionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BasicVersionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LimitedVersionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.FullVersionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PublishInfoData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ListInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.WhereUsedListInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ProcessDefinitionAssociationListInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ProcessInstanceListInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.WorkItemListInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PublishTransactionListInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ContainingBundlesListInfo))]
    public partial class Info : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BluePrintInfo", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class BluePrintInfo : Federation.Client.MyCoreService.Info {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsLocalizedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsSharedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToRepositoryData OwningRepositoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToRepositoryLocalObjectData PrimaryBluePrintParentItemField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsLocalized {
            get {
                return this.IsLocalizedField;
            }
            set {
                if ((this.IsLocalizedField.Equals(value) != true)) {
                    this.IsLocalizedField = value;
                    this.RaisePropertyChanged("IsLocalized");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsShared {
            get {
                return this.IsSharedField;
            }
            set {
                if ((this.IsSharedField.Equals(value) != true)) {
                    this.IsSharedField = value;
                    this.RaisePropertyChanged("IsShared");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToRepositoryData OwningRepository {
            get {
                return this.OwningRepositoryField;
            }
            set {
                if ((object.ReferenceEquals(this.OwningRepositoryField, value) != true)) {
                    this.OwningRepositoryField = value;
                    this.RaisePropertyChanged("OwningRepository");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToRepositoryLocalObjectData PrimaryBluePrintParentItem {
            get {
                return this.PrimaryBluePrintParentItemField;
            }
            set {
                if ((object.ReferenceEquals(this.PrimaryBluePrintParentItemField, value) != true)) {
                    this.PrimaryBluePrintParentItemField = value;
                    this.RaisePropertyChanged("PrimaryBluePrintParentItem");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LocationInfo", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PublishLocationInfo))]
    public partial class LocationInfo : Federation.Client.MyCoreService.Info {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToRepositoryData ContextRepositoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToOrganizationalItemData OrganizationalItemField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WebDavUrlField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToRepositoryData ContextRepository {
            get {
                return this.ContextRepositoryField;
            }
            set {
                if ((object.ReferenceEquals(this.ContextRepositoryField, value) != true)) {
                    this.ContextRepositoryField = value;
                    this.RaisePropertyChanged("ContextRepository");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToOrganizationalItemData OrganizationalItem {
            get {
                return this.OrganizationalItemField;
            }
            set {
                if ((object.ReferenceEquals(this.OrganizationalItemField, value) != true)) {
                    this.OrganizationalItemField = value;
                    this.RaisePropertyChanged("OrganizationalItem");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Path {
            get {
                return this.PathField;
            }
            set {
                if ((object.ReferenceEquals(this.PathField, value) != true)) {
                    this.PathField = value;
                    this.RaisePropertyChanged("Path");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string WebDavUrl {
            get {
                return this.WebDavUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.WebDavUrlField, value) != true)) {
                    this.WebDavUrlField = value;
                    this.RaisePropertyChanged("WebDavUrl");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PublishLocationInfo", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class PublishLocationInfo : Federation.Client.MyCoreService.LocationInfo {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PublishLocationPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PublishLocationUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PublishPathField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string PublishLocationPath {
            get {
                return this.PublishLocationPathField;
            }
            set {
                if ((object.ReferenceEquals(this.PublishLocationPathField, value) != true)) {
                    this.PublishLocationPathField = value;
                    this.RaisePropertyChanged("PublishLocationPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string PublishLocationUrl {
            get {
                return this.PublishLocationUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.PublishLocationUrlField, value) != true)) {
                    this.PublishLocationUrlField = value;
                    this.RaisePropertyChanged("PublishLocationUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string PublishPath {
            get {
                return this.PublishPathField;
            }
            set {
                if ((object.ReferenceEquals(this.PublishPathField, value) != true)) {
                    this.PublishPathField = value;
                    this.RaisePropertyChanged("PublishPath");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LockInfo", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LockInfo : Federation.Client.MyCoreService.Info {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LockDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.LockType> LockTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToUserData LockUserField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.DateTime> LockDate {
            get {
                return this.LockDateField;
            }
            set {
                if ((this.LockDateField.Equals(value) != true)) {
                    this.LockDateField = value;
                    this.RaisePropertyChanged("LockDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.LockType> LockType {
            get {
                return this.LockTypeField;
            }
            set {
                if ((this.LockTypeField.Equals(value) != true)) {
                    this.LockTypeField = value;
                    this.RaisePropertyChanged("LockType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToUserData LockUser {
            get {
                return this.LockUserField;
            }
            set {
                if ((object.ReferenceEquals(this.LockUserField, value) != true)) {
                    this.LockUserField = value;
                    this.RaisePropertyChanged("LockUser");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkflowInfo", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class WorkflowInfo : Federation.Client.MyCoreService.Info {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActivityDefinitionDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToActivityInstanceData ActivityInstanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToTrusteeData AssigneeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> FinishDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToUserData PerformerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PreviousMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToProcessInstanceData ProcessInstanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.ActivityState> ActivityStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.ActivityConstraints> ActivityConstraintsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> AssignmentDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DueDateField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string ActivityDefinitionDescription {
            get {
                return this.ActivityDefinitionDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityDefinitionDescriptionField, value) != true)) {
                    this.ActivityDefinitionDescriptionField = value;
                    this.RaisePropertyChanged("ActivityDefinitionDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToActivityInstanceData ActivityInstance {
            get {
                return this.ActivityInstanceField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityInstanceField, value) != true)) {
                    this.ActivityInstanceField = value;
                    this.RaisePropertyChanged("ActivityInstance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToTrusteeData Assignee {
            get {
                return this.AssigneeField;
            }
            set {
                if ((object.ReferenceEquals(this.AssigneeField, value) != true)) {
                    this.AssigneeField = value;
                    this.RaisePropertyChanged("Assignee");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.DateTime> CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.DateTime> FinishDate {
            get {
                return this.FinishDateField;
            }
            set {
                if ((this.FinishDateField.Equals(value) != true)) {
                    this.FinishDateField = value;
                    this.RaisePropertyChanged("FinishDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToUserData Performer {
            get {
                return this.PerformerField;
            }
            set {
                if ((object.ReferenceEquals(this.PerformerField, value) != true)) {
                    this.PerformerField = value;
                    this.RaisePropertyChanged("Performer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string PreviousMessage {
            get {
                return this.PreviousMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.PreviousMessageField, value) != true)) {
                    this.PreviousMessageField = value;
                    this.RaisePropertyChanged("PreviousMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToProcessInstanceData ProcessInstance {
            get {
                return this.ProcessInstanceField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessInstanceField, value) != true)) {
                    this.ProcessInstanceField = value;
                    this.RaisePropertyChanged("ProcessInstance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.DateTime> StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=9)]
        public System.Nullable<Federation.Client.MyCoreService.ActivityState> ActivityState {
            get {
                return this.ActivityStateField;
            }
            set {
                if ((this.ActivityStateField.Equals(value) != true)) {
                    this.ActivityStateField = value;
                    this.RaisePropertyChanged("ActivityState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=10)]
        public System.Nullable<Federation.Client.MyCoreService.ActivityConstraints> ActivityConstraints {
            get {
                return this.ActivityConstraintsField;
            }
            set {
                if ((this.ActivityConstraintsField.Equals(value) != true)) {
                    this.ActivityConstraintsField = value;
                    this.RaisePropertyChanged("ActivityConstraints");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=11)]
        public System.Nullable<System.DateTime> AssignmentDate {
            get {
                return this.AssignmentDateField;
            }
            set {
                if ((this.AssignmentDateField.Equals(value) != true)) {
                    this.AssignmentDateField = value;
                    this.RaisePropertyChanged("AssignmentDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=12)]
        public System.Nullable<System.DateTime> DueDate {
            get {
                return this.DueDateField;
            }
            set {
                if ((this.DueDateField.Equals(value) != true)) {
                    this.DueDateField = value;
                    this.RaisePropertyChanged("DueDate");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DynamicVersionInfo", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class DynamicVersionInfo : Federation.Client.MyCoreService.Info {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RevisionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> RevisionDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToUserData RevisorField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<int> Revision {
            get {
                return this.RevisionField;
            }
            set {
                if ((this.RevisionField.Equals(value) != true)) {
                    this.RevisionField = value;
                    this.RaisePropertyChanged("Revision");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.DateTime> RevisionDate {
            get {
                return this.RevisionDateField;
            }
            set {
                if ((this.RevisionDateField.Equals(value) != true)) {
                    this.RevisionDateField = value;
                    this.RaisePropertyChanged("RevisionDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToUserData Revisor {
            get {
                return this.RevisorField;
            }
            set {
                if ((object.ReferenceEquals(this.RevisorField, value) != true)) {
                    this.RevisorField = value;
                    this.RaisePropertyChanged("Revisor");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LimitedVersionInfo", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.FullVersionInfo))]
    public partial class LimitedVersionInfo : Federation.Client.MyCoreService.BasicVersionInfo {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToUserData CreatorField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToUserData Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FullVersionInfo", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class FullVersionInfo : Federation.Client.MyCoreService.LimitedVersionInfo {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CheckOutDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToUserData CheckOutUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsNewField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> LastVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.LockType> LockTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RevisionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToUserData RevisorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SystemCommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> VersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserCommentField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.DateTime> CheckOutDate {
            get {
                return this.CheckOutDateField;
            }
            set {
                if ((this.CheckOutDateField.Equals(value) != true)) {
                    this.CheckOutDateField = value;
                    this.RaisePropertyChanged("CheckOutDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToUserData CheckOutUser {
            get {
                return this.CheckOutUserField;
            }
            set {
                if ((object.ReferenceEquals(this.CheckOutUserField, value) != true)) {
                    this.CheckOutUserField = value;
                    this.RaisePropertyChanged("CheckOutUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsNew {
            get {
                return this.IsNewField;
            }
            set {
                if ((this.IsNewField.Equals(value) != true)) {
                    this.IsNewField = value;
                    this.RaisePropertyChanged("IsNew");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<int> LastVersion {
            get {
                return this.LastVersionField;
            }
            set {
                if ((this.LastVersionField.Equals(value) != true)) {
                    this.LastVersionField = value;
                    this.RaisePropertyChanged("LastVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.LockType> LockType {
            get {
                return this.LockTypeField;
            }
            set {
                if ((this.LockTypeField.Equals(value) != true)) {
                    this.LockTypeField = value;
                    this.RaisePropertyChanged("LockType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<int> Revision {
            get {
                return this.RevisionField;
            }
            set {
                if ((this.RevisionField.Equals(value) != true)) {
                    this.RevisionField = value;
                    this.RaisePropertyChanged("Revision");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToUserData Revisor {
            get {
                return this.RevisorField;
            }
            set {
                if ((object.ReferenceEquals(this.RevisorField, value) != true)) {
                    this.RevisorField = value;
                    this.RaisePropertyChanged("Revisor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string SystemComment {
            get {
                return this.SystemCommentField;
            }
            set {
                if ((object.ReferenceEquals(this.SystemCommentField, value) != true)) {
                    this.SystemCommentField = value;
                    this.RaisePropertyChanged("SystemComment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<int> Version {
            get {
                return this.VersionField;
            }
            set {
                if ((this.VersionField.Equals(value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=9)]
        public string UserComment {
            get {
                return this.UserCommentField;
            }
            set {
                if ((object.ReferenceEquals(this.UserCommentField, value) != true)) {
                    this.UserCommentField = value;
                    this.RaisePropertyChanged("UserComment");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PublishInfoData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class PublishInfoData : Federation.Client.MyCoreService.Info {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToPublicationTargetData PublicationTargetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PublishedAtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToVersionedItemData RenderedWithField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToRepositoryData RepositoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToUserData UserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToTargetTypeData TargetTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetPurposeField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToPublicationTargetData PublicationTarget {
            get {
                return this.PublicationTargetField;
            }
            set {
                if ((object.ReferenceEquals(this.PublicationTargetField, value) != true)) {
                    this.PublicationTargetField = value;
                    this.RaisePropertyChanged("PublicationTarget");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.DateTime PublishedAt {
            get {
                return this.PublishedAtField;
            }
            set {
                if ((this.PublishedAtField.Equals(value) != true)) {
                    this.PublishedAtField = value;
                    this.RaisePropertyChanged("PublishedAt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToVersionedItemData RenderedWith {
            get {
                return this.RenderedWithField;
            }
            set {
                if ((object.ReferenceEquals(this.RenderedWithField, value) != true)) {
                    this.RenderedWithField = value;
                    this.RaisePropertyChanged("RenderedWith");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToRepositoryData Repository {
            get {
                return this.RepositoryField;
            }
            set {
                if ((object.ReferenceEquals(this.RepositoryField, value) != true)) {
                    this.RepositoryField = value;
                    this.RaisePropertyChanged("Repository");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToUserData User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=5)]
        public Federation.Client.MyCoreService.LinkToTargetTypeData TargetType {
            get {
                return this.TargetTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetTypeField, value) != true)) {
                    this.TargetTypeField = value;
                    this.RaisePropertyChanged("TargetType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=6)]
        public string TargetPurpose {
            get {
                return this.TargetPurposeField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetPurposeField, value) != true)) {
                    this.TargetPurposeField = value;
                    this.RaisePropertyChanged("TargetPurpose");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WhereUsedListInfo", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class WhereUsedListInfo : Federation.Client.MyCoreService.ListInfo {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.WhereUsedCommentToken> CommentTokenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] VersionsField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.WhereUsedCommentToken> CommentToken {
            get {
                return this.CommentTokenField;
            }
            set {
                if ((this.CommentTokenField.Equals(value) != true)) {
                    this.CommentTokenField = value;
                    this.RaisePropertyChanged("CommentToken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public int[] Versions {
            get {
                return this.VersionsField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionsField, value) != true)) {
                    this.VersionsField = value;
                    this.RaisePropertyChanged("Versions");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessDefinitionAssociationListInfo", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ProcessDefinitionAssociationListInfo : Federation.Client.MyCoreService.ListInfo {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.ItemType> ControlledItemTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsPublishedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.LockType> ItemLockField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PublicationTitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> SubTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.ItemType> ControlledItemType {
            get {
                return this.ControlledItemTypeField;
            }
            set {
                if ((this.ControlledItemTypeField.Equals(value) != true)) {
                    this.ControlledItemTypeField = value;
                    this.RaisePropertyChanged("ControlledItemType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsPublished {
            get {
                return this.IsPublishedField;
            }
            set {
                if ((this.IsPublishedField.Equals(value) != true)) {
                    this.IsPublishedField = value;
                    this.RaisePropertyChanged("IsPublished");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.LockType> ItemLock {
            get {
                return this.ItemLockField;
            }
            set {
                if ((this.ItemLockField.Equals(value) != true)) {
                    this.ItemLockField = value;
                    this.RaisePropertyChanged("ItemLock");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string PublicationTitle {
            get {
                return this.PublicationTitleField;
            }
            set {
                if ((object.ReferenceEquals(this.PublicationTitleField, value) != true)) {
                    this.PublicationTitleField = value;
                    this.RaisePropertyChanged("PublicationTitle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<int> SubType {
            get {
                return this.SubTypeField;
            }
            set {
                if ((this.SubTypeField.Equals(value) != true)) {
                    this.SubTypeField = value;
                    this.RaisePropertyChanged("SubType");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessInstanceListInfo", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ProcessInstanceListInfo : Federation.Client.MyCoreService.ListInfo {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.ActivityType> ActivityDefinitionTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToApprovalStatusData ApprovalStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ActivityInstanceData CurrentActivityField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.ActivityType> ActivityDefinitionType {
            get {
                return this.ActivityDefinitionTypeField;
            }
            set {
                if ((this.ActivityDefinitionTypeField.Equals(value) != true)) {
                    this.ActivityDefinitionTypeField = value;
                    this.RaisePropertyChanged("ActivityDefinitionType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToApprovalStatusData ApprovalStatus {
            get {
                return this.ApprovalStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.ApprovalStatusField, value) != true)) {
                    this.ApprovalStatusField = value;
                    this.RaisePropertyChanged("ApprovalStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ActivityInstanceData CurrentActivity {
            get {
                return this.CurrentActivityField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentActivityField, value) != true)) {
                    this.CurrentActivityField = value;
                    this.RaisePropertyChanged("CurrentActivity");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkItemListInfo", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class WorkItemListInfo : Federation.Client.MyCoreService.ListInfo {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ActivityCreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActivityDefinitionTitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ActivityStartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.ActivityState> ActivityStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.ActivityType> ActivityTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsPublishedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> SubTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.DateTime> ActivityCreationDate {
            get {
                return this.ActivityCreationDateField;
            }
            set {
                if ((this.ActivityCreationDateField.Equals(value) != true)) {
                    this.ActivityCreationDateField = value;
                    this.RaisePropertyChanged("ActivityCreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string ActivityDefinitionTitle {
            get {
                return this.ActivityDefinitionTitleField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityDefinitionTitleField, value) != true)) {
                    this.ActivityDefinitionTitleField = value;
                    this.RaisePropertyChanged("ActivityDefinitionTitle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.DateTime> ActivityStartDate {
            get {
                return this.ActivityStartDateField;
            }
            set {
                if ((this.ActivityStartDateField.Equals(value) != true)) {
                    this.ActivityStartDateField = value;
                    this.RaisePropertyChanged("ActivityStartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.ActivityState> ActivityState {
            get {
                return this.ActivityStateField;
            }
            set {
                if ((this.ActivityStateField.Equals(value) != true)) {
                    this.ActivityStateField = value;
                    this.RaisePropertyChanged("ActivityState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.ActivityType> ActivityType {
            get {
                return this.ActivityTypeField;
            }
            set {
                if ((this.ActivityTypeField.Equals(value) != true)) {
                    this.ActivityTypeField = value;
                    this.RaisePropertyChanged("ActivityType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsPublished {
            get {
                return this.IsPublishedField;
            }
            set {
                if ((this.IsPublishedField.Equals(value) != true)) {
                    this.IsPublishedField = value;
                    this.RaisePropertyChanged("IsPublished");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<int> SubType {
            get {
                return this.SubTypeField;
            }
            set {
                if ((this.SubTypeField.Equals(value) != true)) {
                    this.SubTypeField = value;
                    this.RaisePropertyChanged("SubType");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PublishTransactionListInfo", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class PublishTransactionListInfo : Federation.Client.MyCoreService.ListInfo {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ItemPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PublicationTargetTitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PublicationTitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PublishActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ScheduleTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string ItemPath {
            get {
                return this.ItemPathField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemPathField, value) != true)) {
                    this.ItemPathField = value;
                    this.RaisePropertyChanged("ItemPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string PublicationTargetTitle {
            get {
                return this.PublicationTargetTitleField;
            }
            set {
                if ((object.ReferenceEquals(this.PublicationTargetTitleField, value) != true)) {
                    this.PublicationTargetTitleField = value;
                    this.RaisePropertyChanged("PublicationTargetTitle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string PublicationTitle {
            get {
                return this.PublicationTitleField;
            }
            set {
                if ((object.ReferenceEquals(this.PublicationTitleField, value) != true)) {
                    this.PublicationTitleField = value;
                    this.RaisePropertyChanged("PublicationTitle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<int> PublishAction {
            get {
                return this.PublishActionField;
            }
            set {
                if ((this.PublishActionField.Equals(value) != true)) {
                    this.PublishActionField = value;
                    this.RaisePropertyChanged("PublishAction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.DateTime> ScheduleTime {
            get {
                return this.ScheduleTimeField;
            }
            set {
                if ((this.ScheduleTimeField.Equals(value) != true)) {
                    this.ScheduleTimeField = value;
                    this.RaisePropertyChanged("ScheduleTime");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContainingBundlesListInfo", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ContainingBundlesListInfo : Federation.Client.MyCoreService.ListInfo {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToProcessDefinitionData BundleProcessField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToProcessDefinitionData BundleProcess {
            get {
                return this.BundleProcessField;
            }
            set {
                if ((object.ReferenceEquals(this.BundleProcessField, value) != true)) {
                    this.BundleProcessField = value;
                    this.RaisePropertyChanged("BundleProcess");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToRepositoryData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkWithIsEditableToRepositoryData))]
    public partial class LinkToRepositoryData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToRepositoryLocalObjectData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LinkToRepositoryLocalObjectData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Link", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToApprovalStatusData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToUserData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkWithDescriptionUserData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToSchemaData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ExpandableLinkToSchemaData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToOrganizationalItemData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToTrusteeData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToProcessData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToActivityData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToIdentifiableObjectData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToActivityDefinitionData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToWorkflowTypeData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToProcessDefinitionData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToTridionActivityDefinitionData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ExpandableLinkToTridionActivityDefinitionData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToPageTemplateData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToActivityInstanceData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToProcessInstanceData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToCategoryData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToPublicationData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToTargetTypeData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToBusinessProcessTypeData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToKeywordData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToTargetGroupData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToMultimediaTypeData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToComponentData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToComponentTemplateData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToFolderData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToRepositoryLocalObjectData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToTemplateBuildingBlockData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToStructureGroupData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToGroupData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToVersionedItemData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToPublicationTargetData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToTemplateData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkToRepositoryData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkWithIsEditableToRepositoryData))]
    public partial class Link : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdRefField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WebDavUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string IdRef {
            get {
                return this.IdRefField;
            }
            set {
                if ((object.ReferenceEquals(this.IdRefField, value) != true)) {
                    this.IdRefField = value;
                    this.RaisePropertyChanged("IdRef");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string WebDavUrl {
            get {
                return this.WebDavUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.WebDavUrlField, value) != true)) {
                    this.WebDavUrlField = value;
                    this.RaisePropertyChanged("WebDavUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToApprovalStatusData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LinkToApprovalStatusData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToUserData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LinkWithDescriptionUserData))]
    public partial class LinkToUserData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkWithDescriptionUserData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LinkWithDescriptionUserData : Federation.Client.MyCoreService.LinkToUserData {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToSchemaData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ExpandableLinkToSchemaData))]
    public partial class LinkToSchemaData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExpandableLinkToSchemaData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ExpandableLinkToSchemaData : Federation.Client.MyCoreService.LinkToSchemaData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.SchemaData ExpandedDataField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.SchemaData ExpandedData {
            get {
                return this.ExpandedDataField;
            }
            set {
                if ((object.ReferenceEquals(this.ExpandedDataField, value) != true)) {
                    this.ExpandedDataField = value;
                    this.RaisePropertyChanged("ExpandedData");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToOrganizationalItemData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LinkToOrganizationalItemData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToTrusteeData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LinkToTrusteeData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToProcessData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LinkToProcessData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToActivityData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LinkToActivityData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToIdentifiableObjectData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LinkToIdentifiableObjectData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToActivityDefinitionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LinkToActivityDefinitionData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToWorkflowTypeData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LinkToWorkflowTypeData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToProcessDefinitionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LinkToProcessDefinitionData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToTridionActivityDefinitionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ExpandableLinkToTridionActivityDefinitionData))]
    public partial class LinkToTridionActivityDefinitionData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExpandableLinkToTridionActivityDefinitionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ExpandableLinkToTridionActivityDefinitionData : Federation.Client.MyCoreService.LinkToTridionActivityDefinitionData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.TridionActivityDefinitionData ExpandedDataField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.TridionActivityDefinitionData ExpandedData {
            get {
                return this.ExpandedDataField;
            }
            set {
                if ((object.ReferenceEquals(this.ExpandedDataField, value) != true)) {
                    this.ExpandedDataField = value;
                    this.RaisePropertyChanged("ExpandedData");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToPageTemplateData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LinkToPageTemplateData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToActivityInstanceData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LinkToActivityInstanceData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToProcessInstanceData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LinkToProcessInstanceData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToCategoryData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LinkToCategoryData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToPublicationData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LinkToPublicationData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToTargetTypeData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LinkToTargetTypeData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToBusinessProcessTypeData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LinkToBusinessProcessTypeData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToKeywordData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LinkToKeywordData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToTargetGroupData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LinkToTargetGroupData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToMultimediaTypeData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LinkToMultimediaTypeData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToComponentData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LinkToComponentData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToComponentTemplateData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LinkToComponentTemplateData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToFolderData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LinkToFolderData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToTemplateBuildingBlockData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LinkToTemplateBuildingBlockData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToStructureGroupData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LinkToStructureGroupData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToGroupData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LinkToGroupData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToVersionedItemData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LinkToVersionedItemData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToPublicationTargetData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LinkToPublicationTargetData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkToTemplateData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LinkToTemplateData : Federation.Client.MyCoreService.Link {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkWithIsEditableToRepositoryData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LinkWithIsEditableToRepositoryData : Federation.Client.MyCoreService.LinkToRepositoryData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsEditableField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsEditable {
            get {
                return this.IsEditableField;
            }
            set {
                if ((this.IsEditableField.Equals(value) != true)) {
                    this.IsEditableField = value;
                    this.RaisePropertyChanged("IsEditable");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RegionDefinitionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class RegionDefinitionData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ComponentPresentationConstraintData[] ComponentPresentationConstraintsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ComponentPresentationData[] DefaultComponentPresentationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.RegionSchemaDictionary NestedRegionsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ComponentPresentationConstraintData[] ComponentPresentationConstraints {
            get {
                return this.ComponentPresentationConstraintsField;
            }
            set {
                if ((object.ReferenceEquals(this.ComponentPresentationConstraintsField, value) != true)) {
                    this.ComponentPresentationConstraintsField = value;
                    this.RaisePropertyChanged("ComponentPresentationConstraints");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ComponentPresentationData[] DefaultComponentPresentations {
            get {
                return this.DefaultComponentPresentationsField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultComponentPresentationsField, value) != true)) {
                    this.DefaultComponentPresentationsField = value;
                    this.RaisePropertyChanged("DefaultComponentPresentations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.RegionSchemaDictionary NestedRegions {
            get {
                return this.NestedRegionsField;
            }
            set {
                if ((object.ReferenceEquals(this.NestedRegionsField, value) != true)) {
                    this.NestedRegionsField = value;
                    this.RaisePropertyChanged("NestedRegions");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SchemaPurpose", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum SchemaPurpose : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Component = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Multimedia = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Embedded = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Metadata = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Protocol = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        VirtualFolderType = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TemplateParameters = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Bundle = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Region = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Widget = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownByClient = -2147483648,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="LockType", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum LockType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CheckedOut = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Permanent = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NewItem = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InWorkflow = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Reserved = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownByClient = -2147483648,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityConstraints", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum ActivityConstraints : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DenyBundleMetadataEditing = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DenySubjectEditing = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DenyAddRemoveWorkItem = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownByClient = -2147483648,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityState", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum ActivityState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Assigned = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Started = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failed = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Finished = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Suspended = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WaitingForWorkflowAgent = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownByClient = -2147483648,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityType", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum ActivityType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Normal = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Decision = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownByClient = -2147483648,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="VariablesDictionary", Namespace="http://www.sdltridion.com/ContentManager/R6", ItemName="Variable", KeyName="Name", ValueName="Value")]
    [System.SerializableAttribute()]
    public class VariablesDictionary : System.Collections.Generic.Dictionary<string, string> {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessFinishReason", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum ProcessFinishReason : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CompletedNormally = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ForceFinished = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Terminated = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownByClient = -2147483648,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccessControlListData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class AccessControlListData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.AccessControlEntryData[] AccessControlEntriesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.AccessControlEntryData[] AccessControlEntries {
            get {
                return this.AccessControlEntriesField;
            }
            set {
                if ((object.ReferenceEquals(this.AccessControlEntriesField, value) != true)) {
                    this.AccessControlEntriesField = value;
                    this.RaisePropertyChanged("AccessControlEntries");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccessControlEntryData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class AccessControlEntryData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.Permissions AllowedPermissionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.Rights AllowedRightsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.Permissions DeniedPermissionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.Rights DeniedRightsField;
        
        private Federation.Client.MyCoreService.LinkToTrusteeData TrusteeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Federation.Client.MyCoreService.Permissions AllowedPermissions {
            get {
                return this.AllowedPermissionsField;
            }
            set {
                if ((this.AllowedPermissionsField.Equals(value) != true)) {
                    this.AllowedPermissionsField = value;
                    this.RaisePropertyChanged("AllowedPermissions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Federation.Client.MyCoreService.Rights AllowedRights {
            get {
                return this.AllowedRightsField;
            }
            set {
                if ((this.AllowedRightsField.Equals(value) != true)) {
                    this.AllowedRightsField = value;
                    this.RaisePropertyChanged("AllowedRights");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Federation.Client.MyCoreService.Permissions DeniedPermissions {
            get {
                return this.DeniedPermissionsField;
            }
            set {
                if ((this.DeniedPermissionsField.Equals(value) != true)) {
                    this.DeniedPermissionsField = value;
                    this.RaisePropertyChanged("DeniedPermissions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Federation.Client.MyCoreService.Rights DeniedRights {
            get {
                return this.DeniedRightsField;
            }
            set {
                if ((this.DeniedRightsField.Equals(value) != true)) {
                    this.DeniedRightsField = value;
                    this.RaisePropertyChanged("DeniedRights");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToTrusteeData Trustee {
            get {
                return this.TrusteeField;
            }
            set {
                if ((object.ReferenceEquals(this.TrusteeField, value) != true)) {
                    this.TrusteeField = value;
                    this.RaisePropertyChanged("Trustee");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="Permissions", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum Permissions : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Read = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Write = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Delete = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Localize = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownByClient = -2147483648,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="Rights", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum Rights : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 524287,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PublicationAccess = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PublicationManagement = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FolderManagement = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StructureGroupManagement = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SchemaManagement = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ComponentManagement = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ComponentTemplateManagement = 64,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PageManagement = 128,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PageTemplateManagement = 256,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ProfileManagement = 512,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PublishManagement = 1024,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PermissionManagement = 2048,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WorkflowManagement = 4096,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CategoryManagement = 8192,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TemplateBuildingBlockManagement = 16384,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        VirtualFolderManagement = 32768,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BundleManagement = 65536,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BusinessProcessTypeManagement = 131072,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PublicationAdministration = 262144,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownByClient = -2147483648,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PublishPriority", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum PublishPriority : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Low = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Normal = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        High = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownByClient = -2147483648,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TargetDestinationData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class TargetDestinationData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProtocolDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToSchemaData ProtocolSchemaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string ProtocolData {
            get {
                return this.ProtocolDataField;
            }
            set {
                if ((object.ReferenceEquals(this.ProtocolDataField, value) != true)) {
                    this.ProtocolDataField = value;
                    this.RaisePropertyChanged("ProtocolData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToSchemaData ProtocolSchema {
            get {
                return this.ProtocolSchemaField;
            }
            set {
                if ((object.ReferenceEquals(this.ProtocolSchemaField, value) != true)) {
                    this.ProtocolSchemaField = value;
                    this.RaisePropertyChanged("ProtocolSchema");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConditionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TargetGroupConditionData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.CustomerCharacteristicConditionData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TrackingKeyConditionData))]
    public partial class ConditionData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> NegateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> Negate {
            get {
                return this.NegateField;
            }
            set {
                if ((this.NegateField.Equals(value) != true)) {
                    this.NegateField = value;
                    this.RaisePropertyChanged("Negate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TargetGroupConditionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class TargetGroupConditionData : Federation.Client.MyCoreService.ConditionData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToTargetGroupData TargetGroupField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToTargetGroupData TargetGroup {
            get {
                return this.TargetGroupField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetGroupField, value) != true)) {
                    this.TargetGroupField = value;
                    this.RaisePropertyChanged("TargetGroup");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomerCharacteristicConditionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class CustomerCharacteristicConditionData : Federation.Client.MyCoreService.ConditionData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.ConditionOperator> OperatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<Federation.Client.MyCoreService.ConditionOperator> Operator {
            get {
                return this.OperatorField;
            }
            set {
                if ((this.OperatorField.Equals(value) != true)) {
                    this.OperatorField = value;
                    this.RaisePropertyChanged("Operator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrackingKeyConditionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class TrackingKeyConditionData : Federation.Client.MyCoreService.ConditionData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToKeywordData KeywordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.NumericalConditionOperator> OperatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToKeywordData Keyword {
            get {
                return this.KeywordField;
            }
            set {
                if ((object.ReferenceEquals(this.KeywordField, value) != true)) {
                    this.KeywordField = value;
                    this.RaisePropertyChanged("Keyword");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<Federation.Client.MyCoreService.NumericalConditionOperator> Operator {
            get {
                return this.OperatorField;
            }
            set {
                if ((this.OperatorField.Equals(value) != true)) {
                    this.OperatorField = value;
                    this.RaisePropertyChanged("Operator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConditionOperator", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum ConditionOperator : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Equals = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GreaterThan = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LessThan = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotEqual = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StringEquals = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Contains = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StartsWith = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EndsWith = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownByClient = -2147483648,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NumericalConditionOperator", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum NumericalConditionOperator : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Equals = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GreaterThan = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LessThan = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotEqual = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownByClient = -2147483648,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BinaryContentData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class BinaryContentData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> BinaryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> FileSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FilenameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsExternalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToMultimediaTypeData MultimediaTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UploadFromFileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MimeTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExternalBinaryUriField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> SizeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<int> BinaryId {
            get {
                return this.BinaryIdField;
            }
            set {
                if ((this.BinaryIdField.Equals(value) != true)) {
                    this.BinaryIdField = value;
                    this.RaisePropertyChanged("BinaryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<int> FileSize {
            get {
                return this.FileSizeField;
            }
            set {
                if ((this.FileSizeField.Equals(value) != true)) {
                    this.FileSizeField = value;
                    this.RaisePropertyChanged("FileSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Filename {
            get {
                return this.FilenameField;
            }
            set {
                if ((object.ReferenceEquals(this.FilenameField, value) != true)) {
                    this.FilenameField = value;
                    this.RaisePropertyChanged("Filename");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsExternal {
            get {
                return this.IsExternalField;
            }
            set {
                if ((this.IsExternalField.Equals(value) != true)) {
                    this.IsExternalField = value;
                    this.RaisePropertyChanged("IsExternal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToMultimediaTypeData MultimediaType {
            get {
                return this.MultimediaTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MultimediaTypeField, value) != true)) {
                    this.MultimediaTypeField = value;
                    this.RaisePropertyChanged("MultimediaType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string UploadFromFile {
            get {
                return this.UploadFromFileField;
            }
            set {
                if ((object.ReferenceEquals(this.UploadFromFileField, value) != true)) {
                    this.UploadFromFileField = value;
                    this.RaisePropertyChanged("UploadFromFile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=6)]
        public string MimeType {
            get {
                return this.MimeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MimeTypeField, value) != true)) {
                    this.MimeTypeField = value;
                    this.RaisePropertyChanged("MimeType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=7)]
        public string ExternalBinaryUri {
            get {
                return this.ExternalBinaryUriField;
            }
            set {
                if ((object.ReferenceEquals(this.ExternalBinaryUriField, value) != true)) {
                    this.ExternalBinaryUriField = value;
                    this.RaisePropertyChanged("ExternalBinaryUri");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=8)]
        public System.Nullable<long> Size {
            get {
                return this.SizeField;
            }
            set {
                if ((this.SizeField.Equals(value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ComponentType", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum ComponentType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Normal = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Multimedia = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Widget = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownByClient = -2147483648,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ComponentPresentationData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ComponentPresentationData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToComponentData ComponentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToComponentTemplateData ComponentTemplateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.TargetGroupConditionData[] ConditionsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToComponentData Component {
            get {
                return this.ComponentField;
            }
            set {
                if ((object.ReferenceEquals(this.ComponentField, value) != true)) {
                    this.ComponentField = value;
                    this.RaisePropertyChanged("Component");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToComponentTemplateData ComponentTemplate {
            get {
                return this.ComponentTemplateField;
            }
            set {
                if ((object.ReferenceEquals(this.ComponentTemplateField, value) != true)) {
                    this.ComponentTemplateField = value;
                    this.RaisePropertyChanged("ComponentTemplate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.TargetGroupConditionData[] Conditions {
            get {
                return this.ConditionsField;
            }
            set {
                if ((object.ReferenceEquals(this.ConditionsField, value) != true)) {
                    this.ConditionsField = value;
                    this.RaisePropertyChanged("Conditions");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="RegionDictionary", Namespace="http://www.sdltridion.com/ContentManager/R6", ItemName="Region", KeyName="Name", ValueName="RegionData")]
    [System.SerializableAttribute()]
    public class RegionDictionary : System.Collections.Generic.Dictionary<string, Federation.Client.MyCoreService.RegionData> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RegionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class RegionData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ComponentPresentationData[] ComponentPresentationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MetadataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToSchemaData RegionSchemaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.RegionDictionary RegionsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ComponentPresentationData[] ComponentPresentations {
            get {
                return this.ComponentPresentationsField;
            }
            set {
                if ((object.ReferenceEquals(this.ComponentPresentationsField, value) != true)) {
                    this.ComponentPresentationsField = value;
                    this.RaisePropertyChanged("ComponentPresentations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Metadata {
            get {
                return this.MetadataField;
            }
            set {
                if ((object.ReferenceEquals(this.MetadataField, value) != true)) {
                    this.MetadataField = value;
                    this.RaisePropertyChanged("Metadata");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToSchemaData RegionSchema {
            get {
                return this.RegionSchemaField;
            }
            set {
                if ((object.ReferenceEquals(this.RegionSchemaField, value) != true)) {
                    this.RegionSchemaField = value;
                    this.RaisePropertyChanged("RegionSchema");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.RegionDictionary Regions {
            get {
                return this.RegionsField;
            }
            set {
                if ((object.ReferenceEquals(this.RegionsField, value) != true)) {
                    this.RegionsField = value;
                    this.RaisePropertyChanged("Regions");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ComponentPresentationConstraintData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ClassificationConstraintData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.LocationConstraintData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.OccurenceConstraintData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TypeConstraintData))]
    public partial class ComponentPresentationConstraintData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="RegionSchemaDictionary", Namespace="http://www.sdltridion.com/ContentManager/R6", ItemName="Region", KeyName="Name", ValueName="RegionSchema")]
    [System.SerializableAttribute()]
    public class RegionSchemaDictionary : System.Collections.Generic.Dictionary<string, Federation.Client.MyCoreService.ExpandableLinkToSchemaData> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClassificationConstraintData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ClassificationConstraintData : Federation.Client.MyCoreService.ComponentPresentationConstraintData {
        
        private bool AllowDescendantKeywordsField;
        
        private Federation.Client.MyCoreService.LinkToKeywordData ComponentClassifiedWithField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool AllowDescendantKeywords {
            get {
                return this.AllowDescendantKeywordsField;
            }
            set {
                if ((this.AllowDescendantKeywordsField.Equals(value) != true)) {
                    this.AllowDescendantKeywordsField = value;
                    this.RaisePropertyChanged("AllowDescendantKeywords");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Federation.Client.MyCoreService.LinkToKeywordData ComponentClassifiedWith {
            get {
                return this.ComponentClassifiedWithField;
            }
            set {
                if ((object.ReferenceEquals(this.ComponentClassifiedWithField, value) != true)) {
                    this.ComponentClassifiedWithField = value;
                    this.RaisePropertyChanged("ComponentClassifiedWith");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LocationConstraintData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class LocationConstraintData : Federation.Client.MyCoreService.ComponentPresentationConstraintData {
        
        private bool AllowSubFoldersField;
        
        private Federation.Client.MyCoreService.LinkToFolderData ComponentInFolderField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool AllowSubFolders {
            get {
                return this.AllowSubFoldersField;
            }
            set {
                if ((this.AllowSubFoldersField.Equals(value) != true)) {
                    this.AllowSubFoldersField = value;
                    this.RaisePropertyChanged("AllowSubFolders");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Federation.Client.MyCoreService.LinkToFolderData ComponentInFolder {
            get {
                return this.ComponentInFolderField;
            }
            set {
                if ((object.ReferenceEquals(this.ComponentInFolderField, value) != true)) {
                    this.ComponentInFolderField = value;
                    this.RaisePropertyChanged("ComponentInFolder");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OccurenceConstraintData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class OccurenceConstraintData : Federation.Client.MyCoreService.ComponentPresentationConstraintData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> MaxOccursField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MinOccursField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<int> MaxOccurs {
            get {
                return this.MaxOccursField;
            }
            set {
                if ((this.MaxOccursField.Equals(value) != true)) {
                    this.MaxOccursField = value;
                    this.RaisePropertyChanged("MaxOccurs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MinOccurs {
            get {
                return this.MinOccursField;
            }
            set {
                if ((this.MinOccursField.Equals(value) != true)) {
                    this.MinOccursField = value;
                    this.RaisePropertyChanged("MinOccurs");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TypeConstraintData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class TypeConstraintData : Federation.Client.MyCoreService.ComponentPresentationConstraintData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToComponentTemplateData BasedOnComponentTemplateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToSchemaData BasedOnSchemaField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToComponentTemplateData BasedOnComponentTemplate {
            get {
                return this.BasedOnComponentTemplateField;
            }
            set {
                if ((object.ReferenceEquals(this.BasedOnComponentTemplateField, value) != true)) {
                    this.BasedOnComponentTemplateField = value;
                    this.RaisePropertyChanged("BasedOnComponentTemplate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToSchemaData BasedOnSchema {
            get {
                return this.BasedOnSchemaField;
            }
            set {
                if ((object.ReferenceEquals(this.BasedOnSchemaField, value) != true)) {
                    this.BasedOnSchemaField = value;
                    this.RaisePropertyChanged("BasedOnSchema");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WhereUsedCommentToken", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum WhereUsedCommentToken : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ParentItem = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LocalCopy = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OnlyOldVersions = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OnlyCheckedOutVersion = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownByClient = -2147483648,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ItemType", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum ItemType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Publication = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Folder = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StructureGroup = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Schema = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Component = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ComponentTemplate = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Page = 64,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PageTemplate = 128,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TargetGroup = 256,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Category = 512,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Keyword = 1024,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TemplateBuildingBlock = 2048,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BusinessProcessType = 4096,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        VirtualFolder = 8192,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PublicationTarget = 65537,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TargetType = 65538,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TargetDestination = 65540,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MultimediaType = 65544,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        User = 65552,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Group = 65568,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DirectoryService = 65664,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DirectoryGroupMapping = 65792,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Batch = 66048,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MultipleOperations = 66048,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PublishTransaction = 66560,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WorkflowType = 67584,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ApprovalStatus = 131073,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ProcessDefinition = 131074,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ProcessInstance = 131076,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ProcessHistory = 131080,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ActivityDefinition = 131088,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ActivityInstance = 131104,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ActivityHistory = 131136,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WorkItem = 131200,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownByClient = -2147483648,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ApplicableActionsDataDictionary", Namespace="http://www.sdltridion.com/ContentManager/R6", ItemName="Item", KeyName="Action", ValueName="IsAllowed")]
    [System.SerializableAttribute()]
    public class ApplicableActionsDataDictionary : System.Collections.Generic.Dictionary<string, bool> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="FileExtensionsList", Namespace="http://www.sdltridion.com/ContentManager/R6", ItemName="FileExtension")]
    [System.SerializableAttribute()]
    public class FileExtensionsList : System.Collections.Generic.List<string> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BatchOperationData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class BatchOperationData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ParametersDictionary ParametersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.BatchOperationStatusData[] StatusesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.WeakLink[] SubjectLinksField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Operation {
            get {
                return this.OperationField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationField, value) != true)) {
                    this.OperationField = value;
                    this.RaisePropertyChanged("Operation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ParametersDictionary Parameters {
            get {
                return this.ParametersField;
            }
            set {
                if ((object.ReferenceEquals(this.ParametersField, value) != true)) {
                    this.ParametersField = value;
                    this.RaisePropertyChanged("Parameters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.BatchOperationStatusData[] Statuses {
            get {
                return this.StatusesField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusesField, value) != true)) {
                    this.StatusesField = value;
                    this.RaisePropertyChanged("Statuses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.WeakLink[] SubjectLinks {
            get {
                return this.SubjectLinksField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectLinksField, value) != true)) {
                    this.SubjectLinksField = value;
                    this.RaisePropertyChanged("SubjectLinks");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ParametersDictionary", Namespace="http://www.sdltridion.com/ContentManager/R6", ItemName="Parameter", KeyName="Name", ValueName="Value")]
    [System.SerializableAttribute()]
    public class ParametersDictionary : System.Collections.Generic.Dictionary<string, string> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BatchOperationStatusData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class BatchOperationStatusData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InformationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.BatchOperationState StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ValidationErrorData[] ValidationErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ValidationWarningData[] ValidationWarningsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorCodeField, value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Information {
            get {
                return this.InformationField;
            }
            set {
                if ((object.ReferenceEquals(this.InformationField, value) != true)) {
                    this.InformationField = value;
                    this.RaisePropertyChanged("Information");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.BatchOperationState State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string SubjectId {
            get {
                return this.SubjectIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectIdField, value) != true)) {
                    this.SubjectIdField = value;
                    this.RaisePropertyChanged("SubjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ValidationErrorData[] ValidationErrors {
            get {
                return this.ValidationErrorsField;
            }
            set {
                if ((object.ReferenceEquals(this.ValidationErrorsField, value) != true)) {
                    this.ValidationErrorsField = value;
                    this.RaisePropertyChanged("ValidationErrors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ValidationWarningData[] ValidationWarnings {
            get {
                return this.ValidationWarningsField;
            }
            set {
                if ((object.ReferenceEquals(this.ValidationWarningsField, value) != true)) {
                    this.ValidationWarningsField = value;
                    this.RaisePropertyChanged("ValidationWarnings");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WeakLink", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class WeakLink : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdRefField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string IdRef {
            get {
                return this.IdRefField;
            }
            set {
                if ((object.ReferenceEquals(this.IdRefField, value) != true)) {
                    this.IdRefField = value;
                    this.RaisePropertyChanged("IdRef");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BatchOperationState", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum BatchOperationState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotStarted = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Warning = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownByClient = -2147483648,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PublishInstructionBaseData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PublishInstructionData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.UnPublishInstructionData))]
    public partial class PublishInstructionBaseData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExtensionXmlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ResolveInstructionData ResolveInstructionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> RollbackOnFailureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StartAtField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string ExtensionXml {
            get {
                return this.ExtensionXmlField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtensionXmlField, value) != true)) {
                    this.ExtensionXmlField = value;
                    this.RaisePropertyChanged("ExtensionXml");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ResolveInstructionData ResolveInstruction {
            get {
                return this.ResolveInstructionField;
            }
            set {
                if ((object.ReferenceEquals(this.ResolveInstructionField, value) != true)) {
                    this.ResolveInstructionField = value;
                    this.RaisePropertyChanged("ResolveInstruction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> RollbackOnFailure {
            get {
                return this.RollbackOnFailureField;
            }
            set {
                if ((this.RollbackOnFailureField.Equals(value) != true)) {
                    this.RollbackOnFailureField = value;
                    this.RaisePropertyChanged("RollbackOnFailure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.DateTime> StartAt {
            get {
                return this.StartAtField;
            }
            set {
                if ((this.StartAtField.Equals(value) != true)) {
                    this.StartAtField = value;
                    this.RaisePropertyChanged("StartAt");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeployerAction", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum DeployerAction : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Commit = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wait = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Abort = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownByClient = -2147483648,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PublishContextData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class PublishContextData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ProcessedItemData[] ProcessedItemsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToPublicationData PublicationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToPublicationTargetData PublicationTargetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ResolvedItemData[] ResolvedItemsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToTargetTypeData TargetTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ProcessedItemData[] ProcessedItems {
            get {
                return this.ProcessedItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessedItemsField, value) != true)) {
                    this.ProcessedItemsField = value;
                    this.RaisePropertyChanged("ProcessedItems");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToPublicationData Publication {
            get {
                return this.PublicationField;
            }
            set {
                if ((object.ReferenceEquals(this.PublicationField, value) != true)) {
                    this.PublicationField = value;
                    this.RaisePropertyChanged("Publication");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToPublicationTargetData PublicationTarget {
            get {
                return this.PublicationTargetField;
            }
            set {
                if ((object.ReferenceEquals(this.PublicationTargetField, value) != true)) {
                    this.PublicationTargetField = value;
                    this.RaisePropertyChanged("PublicationTarget");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ResolvedItemData[] ResolvedItems {
            get {
                return this.ResolvedItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ResolvedItemsField, value) != true)) {
                    this.ResolvedItemsField = value;
                    this.RaisePropertyChanged("ResolvedItems");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToTargetTypeData TargetType {
            get {
                return this.TargetTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetTypeField, value) != true)) {
                    this.TargetTypeField = value;
                    this.RaisePropertyChanged("TargetType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PublishTransactionState", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum PublishTransactionState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ScheduledForPublish = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WaitingForPublish = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InProgress = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ScheduledForDeployment = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WaitingForDeployment = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failed = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Warning = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Resolving = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Rendering = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Throttled = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ReadyForTransport = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Transporting = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Deploying = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PreparingDeployment = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PreCommittingDeployment = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CommittingDeployment = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WaitingForUndo = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Undoing = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Undone = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UndoFailed = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WaitingForCdEnvironment = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownByClient = -2147483648,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResolveInstructionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ResolveInstructionData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExtensionXmlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IncludeChildPublicationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IncludeComponentLinksField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IncludeWorkflowField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.ResolvePurpose> PurposeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.StructureResolveOption StructureResolveOptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IncludeDynamicVersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string ExtensionXml {
            get {
                return this.ExtensionXmlField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtensionXmlField, value) != true)) {
                    this.ExtensionXmlField = value;
                    this.RaisePropertyChanged("ExtensionXml");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IncludeChildPublications {
            get {
                return this.IncludeChildPublicationsField;
            }
            set {
                if ((this.IncludeChildPublicationsField.Equals(value) != true)) {
                    this.IncludeChildPublicationsField = value;
                    this.RaisePropertyChanged("IncludeChildPublications");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IncludeComponentLinks {
            get {
                return this.IncludeComponentLinksField;
            }
            set {
                if ((this.IncludeComponentLinksField.Equals(value) != true)) {
                    this.IncludeComponentLinksField = value;
                    this.RaisePropertyChanged("IncludeComponentLinks");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IncludeWorkflow {
            get {
                return this.IncludeWorkflowField;
            }
            set {
                if ((this.IncludeWorkflowField.Equals(value) != true)) {
                    this.IncludeWorkflowField = value;
                    this.RaisePropertyChanged("IncludeWorkflow");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.ResolvePurpose> Purpose {
            get {
                return this.PurposeField;
            }
            set {
                if ((this.PurposeField.Equals(value) != true)) {
                    this.PurposeField = value;
                    this.RaisePropertyChanged("Purpose");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Federation.Client.MyCoreService.StructureResolveOption StructureResolveOption {
            get {
                return this.StructureResolveOptionField;
            }
            set {
                if ((this.StructureResolveOptionField.Equals(value) != true)) {
                    this.StructureResolveOptionField = value;
                    this.RaisePropertyChanged("StructureResolveOption");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=6)]
        public System.Nullable<bool> IncludeDynamicVersion {
            get {
                return this.IncludeDynamicVersionField;
            }
            set {
                if ((this.IncludeDynamicVersionField.Equals(value) != true)) {
                    this.IncludeDynamicVersionField = value;
                    this.RaisePropertyChanged("IncludeDynamicVersion");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PublishInstructionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class PublishInstructionData : Federation.Client.MyCoreService.PublishInstructionBaseData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DeployAtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<uint> MaximumNumberOfRenderFailuresField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.RenderInstructionData RenderInstructionField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.DateTime> DeployAt {
            get {
                return this.DeployAtField;
            }
            set {
                if ((this.DeployAtField.Equals(value) != true)) {
                    this.DeployAtField = value;
                    this.RaisePropertyChanged("DeployAt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<uint> MaximumNumberOfRenderFailures {
            get {
                return this.MaximumNumberOfRenderFailuresField;
            }
            set {
                if ((this.MaximumNumberOfRenderFailuresField.Equals(value) != true)) {
                    this.MaximumNumberOfRenderFailuresField = value;
                    this.RaisePropertyChanged("MaximumNumberOfRenderFailures");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.RenderInstructionData RenderInstruction {
            get {
                return this.RenderInstructionField;
            }
            set {
                if ((object.ReferenceEquals(this.RenderInstructionField, value) != true)) {
                    this.RenderInstructionField = value;
                    this.RaisePropertyChanged("RenderInstruction");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UnPublishInstructionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class UnPublishInstructionData : Federation.Client.MyCoreService.PublishInstructionBaseData {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResolvePurpose", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum ResolvePurpose : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Publish = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnPublish = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RePublish = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownByClient = -2147483648,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StructureResolveOption", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum StructureResolveOption : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OnlyItems = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OnlyStructure = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ItemsAndStructure = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownByClient = -2147483648,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RenderInstructionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class RenderInstructionData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BinaryStoragePathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExtensionXmlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.RenderMode> RenderModeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string BinaryStoragePath {
            get {
                return this.BinaryStoragePathField;
            }
            set {
                if ((object.ReferenceEquals(this.BinaryStoragePathField, value) != true)) {
                    this.BinaryStoragePathField = value;
                    this.RaisePropertyChanged("BinaryStoragePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string ExtensionXml {
            get {
                return this.ExtensionXmlField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtensionXmlField, value) != true)) {
                    this.ExtensionXmlField = value;
                    this.RaisePropertyChanged("ExtensionXml");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.RenderMode> RenderMode {
            get {
                return this.RenderModeField;
            }
            set {
                if ((this.RenderModeField.Equals(value) != true)) {
                    this.RenderModeField = value;
                    this.RaisePropertyChanged("RenderMode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RenderMode", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum RenderMode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Publish = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PreviewStatic = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PreviewDynamic = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownByClient = -2147483648,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessedItemData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ProcessedItemData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> HasRenderFailureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsRenderedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReasonOfRenderFailureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RenderTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ResolvedItemData ResolvedItemField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> HasRenderFailure {
            get {
                return this.HasRenderFailureField;
            }
            set {
                if ((this.HasRenderFailureField.Equals(value) != true)) {
                    this.HasRenderFailureField = value;
                    this.RaisePropertyChanged("HasRenderFailure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsRendered {
            get {
                return this.IsRenderedField;
            }
            set {
                if ((this.IsRenderedField.Equals(value) != true)) {
                    this.IsRenderedField = value;
                    this.RaisePropertyChanged("IsRendered");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string ReasonOfRenderFailure {
            get {
                return this.ReasonOfRenderFailureField;
            }
            set {
                if ((object.ReferenceEquals(this.ReasonOfRenderFailureField, value) != true)) {
                    this.ReasonOfRenderFailureField = value;
                    this.RaisePropertyChanged("ReasonOfRenderFailure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string RenderTime {
            get {
                return this.RenderTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.RenderTimeField, value) != true)) {
                    this.RenderTimeField = value;
                    this.RaisePropertyChanged("RenderTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ResolvedItemData ResolvedItem {
            get {
                return this.ResolvedItemField;
            }
            set {
                if ((object.ReferenceEquals(this.ResolvedItemField, value) != true)) {
                    this.ResolvedItemField = value;
                    this.RaisePropertyChanged("ResolvedItem");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResolvedItemData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ResolvedItemData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToIdentifiableObjectData ItemField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ItemPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToPublicationTargetData PublicationTargetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToTemplateData TemplateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToIdentifiableObjectData Item {
            get {
                return this.ItemField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemField, value) != true)) {
                    this.ItemField = value;
                    this.RaisePropertyChanged("Item");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string ItemPath {
            get {
                return this.ItemPathField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemPathField, value) != true)) {
                    this.ItemPathField = value;
                    this.RaisePropertyChanged("ItemPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToPublicationTargetData PublicationTarget {
            get {
                return this.PublicationTargetField;
            }
            set {
                if ((object.ReferenceEquals(this.PublicationTargetField, value) != true)) {
                    this.PublicationTargetField = value;
                    this.RaisePropertyChanged("PublicationTarget");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToTemplateData Template {
            get {
                return this.TemplateField;
            }
            set {
                if ((object.ReferenceEquals(this.TemplateField, value) != true)) {
                    this.TemplateField = value;
                    this.RaisePropertyChanged("Template");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClaimMappingData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.DirectoryGroupMappingData))]
    public partial class ClaimMappingData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToGroupData GroupField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToGroupData Group {
            get {
                return this.GroupField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupField, value) != true)) {
                    this.GroupField = value;
                    this.RaisePropertyChanged("Group");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SystemPrivilege", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class SystemPrivilege : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DirectoryGroupMappingData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class DirectoryGroupMappingData : Federation.Client.MyCoreService.ClaimMappingData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DirectoryServiceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SearchDNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.DirectorySearchType SearchTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string DirectoryServiceName {
            get {
                return this.DirectoryServiceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DirectoryServiceNameField, value) != true)) {
                    this.DirectoryServiceNameField = value;
                    this.RaisePropertyChanged("DirectoryServiceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string SearchDN {
            get {
                return this.SearchDNField;
            }
            set {
                if ((object.ReferenceEquals(this.SearchDNField, value) != true)) {
                    this.SearchDNField = value;
                    this.RaisePropertyChanged("SearchDN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.DirectorySearchType SearchType {
            get {
                return this.SearchTypeField;
            }
            set {
                if ((this.SearchTypeField.Equals(value) != true)) {
                    this.SearchTypeField = value;
                    this.RaisePropertyChanged("SearchType");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DirectorySearchType", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum DirectorySearchType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Subtree = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Group = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownByClient = -2147483648,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReadOptions", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.SynchronizeOptions))]
    public partial class ReadOptions : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LoadFlags LoadFlagsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.DynamicVersionResolvingConditions UseDynamicVersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Federation.Client.MyCoreService.LoadFlags LoadFlags {
            get {
                return this.LoadFlagsField;
            }
            set {
                if ((this.LoadFlagsField.Equals(value) != true)) {
                    this.LoadFlagsField = value;
                    this.RaisePropertyChanged("LoadFlags");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.DynamicVersionResolvingConditions UseDynamicVersion {
            get {
                return this.UseDynamicVersionField;
            }
            set {
                if ((this.UseDynamicVersionField.Equals(value) != true)) {
                    this.UseDynamicVersionField = value;
                    this.RaisePropertyChanged("UseDynamicVersion");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SynchronizeOptions", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class SynchronizeOptions : Federation.Client.MyCoreService.ReadOptions {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.SynchronizeFlags SynchronizeFlagsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Federation.Client.MyCoreService.SynchronizeFlags SynchronizeFlags {
            get {
                return this.SynchronizeFlagsField;
            }
            set {
                if ((this.SynchronizeFlagsField.Equals(value) != true)) {
                    this.SynchronizeFlagsField = value;
                    this.RaisePropertyChanged("SynchronizeFlags");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoadFlags", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum LoadFlags : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WebDavUrls = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        KeywordXlinks = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Expanded = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IncludeAllowedActions = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IncludeDynamicVersionInfo = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ExpandLinks = 32,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="DynamicVersionResolvingConditions", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum DynamicVersionResolvingConditions : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Never = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CheckedOutByUser = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ReservedAndRevisedByUser = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AssignedToUser = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ReadableByUser = 15,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="SynchronizeFlags", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum SynchronizeFlags : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Basic = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FixNamespace = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RemoveUnknownFields = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RemoveAdditionalValues = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ApplyDefaultValuesForMissingMandatoryFields = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ApplyDefaultValuesForMissingNonMandatoryFields = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ApplyFilterXsltToXhtmlFields = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ConvertFieldType = 64,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 2147483647,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownByClient = -2147483648,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ItemReadResultDictionary", Namespace="http://www.sdltridion.com/ContentManager/R6", ItemName="Item", KeyName="Id", ValueName="ItemReadResult")]
    [System.SerializableAttribute()]
    public class ItemReadResultDictionary : System.Collections.Generic.Dictionary<string, Federation.Client.MyCoreService.ItemReadResult> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ItemReadResult", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ItemReadResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.CoreServiceFault ErrorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.IdentifiableObjectData ItemField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Federation.Client.MyCoreService.CoreServiceFault Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorField, value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Federation.Client.MyCoreService.IdentifiableObjectData Item {
            get {
                return this.ItemField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemField, value) != true)) {
                    this.ItemField = value;
                    this.RaisePropertyChanged("Item");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SchemaFieldsData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class SchemaFieldsData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ItemFieldDefinitionData[] FieldsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ItemFieldDefinitionData[] MetadataFieldsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NamespaceUriField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RootElementNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ItemFieldDefinitionData[] Fields {
            get {
                return this.FieldsField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldsField, value) != true)) {
                    this.FieldsField = value;
                    this.RaisePropertyChanged("Fields");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ItemFieldDefinitionData[] MetadataFields {
            get {
                return this.MetadataFieldsField;
            }
            set {
                if ((object.ReferenceEquals(this.MetadataFieldsField, value) != true)) {
                    this.MetadataFieldsField = value;
                    this.RaisePropertyChanged("MetadataFields");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NamespaceUri {
            get {
                return this.NamespaceUriField;
            }
            set {
                if ((object.ReferenceEquals(this.NamespaceUriField, value) != true)) {
                    this.NamespaceUriField = value;
                    this.RaisePropertyChanged("NamespaceUri");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RootElementName {
            get {
                return this.RootElementNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RootElementNameField, value) != true)) {
                    this.RootElementNameField = value;
                    this.RaisePropertyChanged("RootElementName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ItemFieldDefinitionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ComponentLinkFieldDefinitionData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.DateFieldDefinitionData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.EmbeddedSchemaFieldDefinitionData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ExternalLinkFieldDefinitionData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.KeywordFieldDefinitionData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.MultiLineTextFieldDefinitionData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.MultimediaLinkFieldDefinitionData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.NumberFieldDefinitionData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.SingleLineTextFieldDefinitionData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.XhtmlFieldDefinitionData))]
    public partial class ItemFieldDefinitionData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomUrlField;
        
        private string DescriptionField;
        
        private int MaxOccursField;
        
        private int MinOccursField;
        
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Xml.Linq.XElement ExtensionXmlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string CustomUrl {
            get {
                return this.CustomUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomUrlField, value) != true)) {
                    this.CustomUrlField = value;
                    this.RaisePropertyChanged("CustomUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int MaxOccurs {
            get {
                return this.MaxOccursField;
            }
            set {
                if ((this.MaxOccursField.Equals(value) != true)) {
                    this.MaxOccursField = value;
                    this.RaisePropertyChanged("MaxOccurs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int MinOccurs {
            get {
                return this.MinOccursField;
            }
            set {
                if ((this.MinOccursField.Equals(value) != true)) {
                    this.MinOccursField = value;
                    this.RaisePropertyChanged("MinOccurs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=5)]
        public System.Xml.Linq.XElement ExtensionXml {
            get {
                return this.ExtensionXmlField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtensionXmlField, value) != true)) {
                    this.ExtensionXmlField = value;
                    this.RaisePropertyChanged("ExtensionXml");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ComponentLinkFieldDefinitionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ComponentLinkFieldDefinitionData : Federation.Client.MyCoreService.ItemFieldDefinitionData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AllowMultimediaLinksField;
        
        private Federation.Client.MyCoreService.LinkToSchemaData[] AllowedTargetSchemasField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToComponentData DefaultValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllowMultimediaLinks {
            get {
                return this.AllowMultimediaLinksField;
            }
            set {
                if ((this.AllowMultimediaLinksField.Equals(value) != true)) {
                    this.AllowMultimediaLinksField = value;
                    this.RaisePropertyChanged("AllowMultimediaLinks");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Federation.Client.MyCoreService.LinkToSchemaData[] AllowedTargetSchemas {
            get {
                return this.AllowedTargetSchemasField;
            }
            set {
                if ((object.ReferenceEquals(this.AllowedTargetSchemasField, value) != true)) {
                    this.AllowedTargetSchemasField = value;
                    this.RaisePropertyChanged("AllowedTargetSchemas");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToComponentData DefaultValue {
            get {
                return this.DefaultValueField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultValueField, value) != true)) {
                    this.DefaultValueField = value;
                    this.RaisePropertyChanged("DefaultValue");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DateFieldDefinitionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class DateFieldDefinitionData : Federation.Client.MyCoreService.ItemFieldDefinitionData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DefaultValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsMaxValueExclusiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsMinValueExclusiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.DateListDefinitionData ListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> MaxValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> MinValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatternField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.DateTime> DefaultValue {
            get {
                return this.DefaultValueField;
            }
            set {
                if ((this.DefaultValueField.Equals(value) != true)) {
                    this.DefaultValueField = value;
                    this.RaisePropertyChanged("DefaultValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsMaxValueExclusive {
            get {
                return this.IsMaxValueExclusiveField;
            }
            set {
                if ((this.IsMaxValueExclusiveField.Equals(value) != true)) {
                    this.IsMaxValueExclusiveField = value;
                    this.RaisePropertyChanged("IsMaxValueExclusive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsMinValueExclusive {
            get {
                return this.IsMinValueExclusiveField;
            }
            set {
                if ((this.IsMinValueExclusiveField.Equals(value) != true)) {
                    this.IsMinValueExclusiveField = value;
                    this.RaisePropertyChanged("IsMinValueExclusive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.DateListDefinitionData List {
            get {
                return this.ListField;
            }
            set {
                if ((object.ReferenceEquals(this.ListField, value) != true)) {
                    this.ListField = value;
                    this.RaisePropertyChanged("List");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.DateTime> MaxValue {
            get {
                return this.MaxValueField;
            }
            set {
                if ((this.MaxValueField.Equals(value) != true)) {
                    this.MaxValueField = value;
                    this.RaisePropertyChanged("MaxValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.DateTime> MinValue {
            get {
                return this.MinValueField;
            }
            set {
                if ((this.MinValueField.Equals(value) != true)) {
                    this.MinValueField = value;
                    this.RaisePropertyChanged("MinValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Pattern {
            get {
                return this.PatternField;
            }
            set {
                if ((object.ReferenceEquals(this.PatternField, value) != true)) {
                    this.PatternField = value;
                    this.RaisePropertyChanged("Pattern");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EmbeddedSchemaFieldDefinitionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class EmbeddedSchemaFieldDefinitionData : Federation.Client.MyCoreService.ItemFieldDefinitionData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ItemFieldDefinitionData[] EmbeddedFieldsField;
        
        private Federation.Client.MyCoreService.LinkToSchemaData EmbeddedSchemaField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ItemFieldDefinitionData[] EmbeddedFields {
            get {
                return this.EmbeddedFieldsField;
            }
            set {
                if ((object.ReferenceEquals(this.EmbeddedFieldsField, value) != true)) {
                    this.EmbeddedFieldsField = value;
                    this.RaisePropertyChanged("EmbeddedFields");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Federation.Client.MyCoreService.LinkToSchemaData EmbeddedSchema {
            get {
                return this.EmbeddedSchemaField;
            }
            set {
                if ((object.ReferenceEquals(this.EmbeddedSchemaField, value) != true)) {
                    this.EmbeddedSchemaField = value;
                    this.RaisePropertyChanged("EmbeddedSchema");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExternalLinkFieldDefinitionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ExternalLinkFieldDefinitionData : Federation.Client.MyCoreService.ItemFieldDefinitionData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefaultValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string DefaultValue {
            get {
                return this.DefaultValueField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultValueField, value) != true)) {
                    this.DefaultValueField = value;
                    this.RaisePropertyChanged("DefaultValue");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KeywordFieldDefinitionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class KeywordFieldDefinitionData : Federation.Client.MyCoreService.ItemFieldDefinitionData {
        
        private Federation.Client.MyCoreService.LinkToCategoryData CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToKeywordData DefaultValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ListDefinitionData ListField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Federation.Client.MyCoreService.LinkToCategoryData Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToKeywordData DefaultValue {
            get {
                return this.DefaultValueField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultValueField, value) != true)) {
                    this.DefaultValueField = value;
                    this.RaisePropertyChanged("DefaultValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ListDefinitionData List {
            get {
                return this.ListField;
            }
            set {
                if ((object.ReferenceEquals(this.ListField, value) != true)) {
                    this.ListField = value;
                    this.RaisePropertyChanged("List");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MultiLineTextFieldDefinitionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class MultiLineTextFieldDefinitionData : Federation.Client.MyCoreService.ItemFieldDefinitionData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefaultValueField;
        
        private int HeightField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string DefaultValue {
            get {
                return this.DefaultValueField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultValueField, value) != true)) {
                    this.DefaultValueField = value;
                    this.RaisePropertyChanged("DefaultValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int Height {
            get {
                return this.HeightField;
            }
            set {
                if ((this.HeightField.Equals(value) != true)) {
                    this.HeightField = value;
                    this.RaisePropertyChanged("Height");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MultimediaLinkFieldDefinitionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class MultimediaLinkFieldDefinitionData : Federation.Client.MyCoreService.ItemFieldDefinitionData {
        
        private Federation.Client.MyCoreService.LinkToSchemaData[] AllowedTargetSchemasField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToComponentData DefaultValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Federation.Client.MyCoreService.LinkToSchemaData[] AllowedTargetSchemas {
            get {
                return this.AllowedTargetSchemasField;
            }
            set {
                if ((object.ReferenceEquals(this.AllowedTargetSchemasField, value) != true)) {
                    this.AllowedTargetSchemasField = value;
                    this.RaisePropertyChanged("AllowedTargetSchemas");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToComponentData DefaultValue {
            get {
                return this.DefaultValueField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultValueField, value) != true)) {
                    this.DefaultValueField = value;
                    this.RaisePropertyChanged("DefaultValue");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NumberFieldDefinitionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class NumberFieldDefinitionData : Federation.Client.MyCoreService.ItemFieldDefinitionData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> DefaultValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> FractionDigitsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsMaxValueExclusiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsMinValueExclusiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.NumberListDefinitionData ListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> MaxValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> MinValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatternField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TotalDigitsField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<double> DefaultValue {
            get {
                return this.DefaultValueField;
            }
            set {
                if ((this.DefaultValueField.Equals(value) != true)) {
                    this.DefaultValueField = value;
                    this.RaisePropertyChanged("DefaultValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<int> FractionDigits {
            get {
                return this.FractionDigitsField;
            }
            set {
                if ((this.FractionDigitsField.Equals(value) != true)) {
                    this.FractionDigitsField = value;
                    this.RaisePropertyChanged("FractionDigits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsMaxValueExclusive {
            get {
                return this.IsMaxValueExclusiveField;
            }
            set {
                if ((this.IsMaxValueExclusiveField.Equals(value) != true)) {
                    this.IsMaxValueExclusiveField = value;
                    this.RaisePropertyChanged("IsMaxValueExclusive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsMinValueExclusive {
            get {
                return this.IsMinValueExclusiveField;
            }
            set {
                if ((this.IsMinValueExclusiveField.Equals(value) != true)) {
                    this.IsMinValueExclusiveField = value;
                    this.RaisePropertyChanged("IsMinValueExclusive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.NumberListDefinitionData List {
            get {
                return this.ListField;
            }
            set {
                if ((object.ReferenceEquals(this.ListField, value) != true)) {
                    this.ListField = value;
                    this.RaisePropertyChanged("List");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<double> MaxValue {
            get {
                return this.MaxValueField;
            }
            set {
                if ((this.MaxValueField.Equals(value) != true)) {
                    this.MaxValueField = value;
                    this.RaisePropertyChanged("MaxValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<double> MinValue {
            get {
                return this.MinValueField;
            }
            set {
                if ((this.MinValueField.Equals(value) != true)) {
                    this.MinValueField = value;
                    this.RaisePropertyChanged("MinValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Pattern {
            get {
                return this.PatternField;
            }
            set {
                if ((object.ReferenceEquals(this.PatternField, value) != true)) {
                    this.PatternField = value;
                    this.RaisePropertyChanged("Pattern");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<int> TotalDigits {
            get {
                return this.TotalDigitsField;
            }
            set {
                if ((this.TotalDigitsField.Equals(value) != true)) {
                    this.TotalDigitsField = value;
                    this.RaisePropertyChanged("TotalDigits");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SingleLineTextFieldDefinitionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class SingleLineTextFieldDefinitionData : Federation.Client.MyCoreService.ItemFieldDefinitionData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefaultValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.SingleLineTextListDefinitionData ListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> MaxLengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> MinLengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatternField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string DefaultValue {
            get {
                return this.DefaultValueField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultValueField, value) != true)) {
                    this.DefaultValueField = value;
                    this.RaisePropertyChanged("DefaultValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.SingleLineTextListDefinitionData List {
            get {
                return this.ListField;
            }
            set {
                if ((object.ReferenceEquals(this.ListField, value) != true)) {
                    this.ListField = value;
                    this.RaisePropertyChanged("List");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<int> MaxLength {
            get {
                return this.MaxLengthField;
            }
            set {
                if ((this.MaxLengthField.Equals(value) != true)) {
                    this.MaxLengthField = value;
                    this.RaisePropertyChanged("MaxLength");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<int> MinLength {
            get {
                return this.MinLengthField;
            }
            set {
                if ((this.MinLengthField.Equals(value) != true)) {
                    this.MinLengthField = value;
                    this.RaisePropertyChanged("MinLength");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Pattern {
            get {
                return this.PatternField;
            }
            set {
                if ((object.ReferenceEquals(this.PatternField, value) != true)) {
                    this.PatternField = value;
                    this.RaisePropertyChanged("Pattern");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="XhtmlFieldDefinitionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class XhtmlFieldDefinitionData : Federation.Client.MyCoreService.ItemFieldDefinitionData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefaultValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Xml.Linq.XElement FilterXsltField;
        
        private int HeightField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string DefaultValue {
            get {
                return this.DefaultValueField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultValueField, value) != true)) {
                    this.DefaultValueField = value;
                    this.RaisePropertyChanged("DefaultValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Xml.Linq.XElement FilterXslt {
            get {
                return this.FilterXsltField;
            }
            set {
                if ((object.ReferenceEquals(this.FilterXsltField, value) != true)) {
                    this.FilterXsltField = value;
                    this.RaisePropertyChanged("FilterXslt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int Height {
            get {
                return this.HeightField;
            }
            set {
                if ((this.HeightField.Equals(value) != true)) {
                    this.HeightField = value;
                    this.RaisePropertyChanged("Height");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DateListDefinitionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class DateListDefinitionData : Federation.Client.MyCoreService.ListDefinitionData {
        
        private System.DateTime[] EntriesField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime[] Entries {
            get {
                return this.EntriesField;
            }
            set {
                if ((object.ReferenceEquals(this.EntriesField, value) != true)) {
                    this.EntriesField = value;
                    this.RaisePropertyChanged("Entries");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ListDefinitionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.NumberListDefinitionData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.SingleLineTextListDefinitionData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.DateListDefinitionData))]
    public partial class ListDefinitionData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int HeightField;
        
        private Federation.Client.MyCoreService.ListType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int Height {
            get {
                return this.HeightField;
            }
            set {
                if ((this.HeightField.Equals(value) != true)) {
                    this.HeightField = value;
                    this.RaisePropertyChanged("Height");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Federation.Client.MyCoreService.ListType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NumberListDefinitionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class NumberListDefinitionData : Federation.Client.MyCoreService.ListDefinitionData {
        
        private double[] EntriesField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double[] Entries {
            get {
                return this.EntriesField;
            }
            set {
                if ((object.ReferenceEquals(this.EntriesField, value) != true)) {
                    this.EntriesField = value;
                    this.RaisePropertyChanged("Entries");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SingleLineTextListDefinitionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class SingleLineTextListDefinitionData : Federation.Client.MyCoreService.ListDefinitionData {
        
        private string[] EntriesField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string[] Entries {
            get {
                return this.EntriesField;
            }
            set {
                if ((object.ReferenceEquals(this.EntriesField, value) != true)) {
                    this.EntriesField = value;
                    this.RaisePropertyChanged("Entries");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ListType", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum ListType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Select = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Edit = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Radio = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Checkbox = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Tree = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownByClient = -2147483648,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeleteTaxonomyNodeMode", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum DeleteTaxonomyNodeMode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeleteBranch = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeleteBranchIncludeChildPublications = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RemoveParentFromChildren = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AssignChildrenToGrandparents = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InstanceData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class InstanceData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToIdentifiableObjectData ContainerItemField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MetadataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToSchemaData SchemaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.RegionData RegionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToIdentifiableObjectData ContainerItem {
            get {
                return this.ContainerItemField;
            }
            set {
                if ((object.ReferenceEquals(this.ContainerItemField, value) != true)) {
                    this.ContainerItemField = value;
                    this.RaisePropertyChanged("ContainerItem");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Metadata {
            get {
                return this.MetadataField;
            }
            set {
                if ((object.ReferenceEquals(this.MetadataField, value) != true)) {
                    this.MetadataField = value;
                    this.RaisePropertyChanged("Metadata");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToSchemaData Schema {
            get {
                return this.SchemaField;
            }
            set {
                if ((object.ReferenceEquals(this.SchemaField, value) != true)) {
                    this.SchemaField = value;
                    this.RaisePropertyChanged("Schema");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public Federation.Client.MyCoreService.RegionData Region {
            get {
                return this.RegionField;
            }
            set {
                if ((object.ReferenceEquals(this.RegionField, value) != true)) {
                    this.RegionField = value;
                    this.RaisePropertyChanged("Region");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationInstruction", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class OperationInstruction : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.OperationMode ModeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.OperationMode Mode {
            get {
                return this.ModeField;
            }
            set {
                if ((this.ModeField.Equals(value) != true)) {
                    this.ModeField = value;
                    this.RaisePropertyChanged("Mode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationMode", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum OperationMode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FailOnError = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FailOnWarning = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationResultDataOfRepositoryLocalObjectData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class OperationResultDataOfRepositoryLocalObjectData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.RepositoryLocalObjectData ResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ValidationWarningData[] ValidationWarningsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.RepositoryLocalObjectData Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ValidationWarningData[] ValidationWarnings {
            get {
                return this.ValidationWarningsField;
            }
            set {
                if ((object.ReferenceEquals(this.ValidationWarningsField, value) != true)) {
                    this.ValidationWarningsField = value;
                    this.RaisePropertyChanged("ValidationWarnings");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TemplateType", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class TemplateType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasBinaryContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MimeTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.WebDavFileExtensionMapping[] WebDavFileExtensionMappingsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public bool HasBinaryContent {
            get {
                return this.HasBinaryContentField;
            }
            set {
                if ((this.HasBinaryContentField.Equals(value) != true)) {
                    this.HasBinaryContentField = value;
                    this.RaisePropertyChanged("HasBinaryContent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string MimeType {
            get {
                return this.MimeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MimeTypeField, value) != true)) {
                    this.MimeTypeField = value;
                    this.RaisePropertyChanged("MimeType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.WebDavFileExtensionMapping[] WebDavFileExtensionMappings {
            get {
                return this.WebDavFileExtensionMappingsField;
            }
            set {
                if ((object.ReferenceEquals(this.WebDavFileExtensionMappingsField, value) != true)) {
                    this.WebDavFileExtensionMappingsField = value;
                    this.RaisePropertyChanged("WebDavFileExtensionMappings");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WebDavFileExtensionMapping", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class WebDavFileExtensionMapping : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileExtensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ItemType ItemTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string FileExtension {
            get {
                return this.FileExtensionField;
            }
            set {
                if ((object.ReferenceEquals(this.FileExtensionField, value) != true)) {
                    this.FileExtensionField = value;
                    this.RaisePropertyChanged("FileExtension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ItemType ItemType {
            get {
                return this.ItemTypeField;
            }
            set {
                if ((this.ItemTypeField.Equals(value) != true)) {
                    this.ItemTypeField = value;
                    this.RaisePropertyChanged("ItemType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PublicationType", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class PublicationType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.StronglyTypedFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.SubjectRelatedListFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.WhereUsedFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.UsingItemsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.UsedItemsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.VersionsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.DeletedReferencesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ItemsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.OrganizationalItemItemsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.RepositoryItemsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.KeywordRelatedFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.KeywordsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ChildKeywordsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.OrphanKeywordsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.CategoryRelatedFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ChildCategoriesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.CategoriesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ClassifiedItemsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.OrganizationalItemsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TaxonomiesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TaxonomiesOwlFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PathToCategoryFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.GroupMembersFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.OrganizationalItemAncestorsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BluePrintChainFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ContainingBundlesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ComponentTemplatesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BundleSchemasFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.SystemWideListFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TrusteesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.UsersFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.GroupsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.RepositoriesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PublicationsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.MultimediaTypesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TargetTypesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PublicationTargetsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.WorkflowManagerFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ApprovalStatusesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ProcessDefinitionsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.UserWorkItemsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ProcessDefinitionAssociationsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ProcessesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ActivityInstancesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BatchesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.WorkflowTypesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.RepositoryLocalObjectsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BluePrintParentsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BluePrintNodesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BluePrintFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PublishingListFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PublishTransactionsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PublishedItemsFilterData))]
    public partial class FilterData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.ListBaseColumns> BaseColumnsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SortExpressionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.ListBaseColumns> BaseColumns {
            get {
                return this.BaseColumnsField;
            }
            set {
                if ((this.BaseColumnsField.Equals(value) != true)) {
                    this.BaseColumnsField = value;
                    this.RaisePropertyChanged("BaseColumns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string SortExpression {
            get {
                return this.SortExpressionField;
            }
            set {
                if ((object.ReferenceEquals(this.SortExpressionField, value) != true)) {
                    this.SortExpressionField = value;
                    this.RaisePropertyChanged("SortExpression");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StronglyTypedFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.SubjectRelatedListFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.WhereUsedFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.UsingItemsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.UsedItemsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.VersionsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.DeletedReferencesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ItemsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.OrganizationalItemItemsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.RepositoryItemsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.KeywordRelatedFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.KeywordsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ChildKeywordsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.OrphanKeywordsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.CategoryRelatedFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ChildCategoriesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.CategoriesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ClassifiedItemsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.OrganizationalItemsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TaxonomiesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TaxonomiesOwlFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PathToCategoryFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.GroupMembersFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.OrganizationalItemAncestorsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BluePrintChainFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ContainingBundlesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ComponentTemplatesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BundleSchemasFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.SystemWideListFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TrusteesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.UsersFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.GroupsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.RepositoriesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PublicationsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.MultimediaTypesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TargetTypesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PublicationTargetsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.WorkflowManagerFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ApprovalStatusesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ProcessDefinitionsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.UserWorkItemsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ProcessDefinitionAssociationsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ProcessesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ActivityInstancesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BatchesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.WorkflowTypesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.RepositoryLocalObjectsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BluePrintParentsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BluePrintNodesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BluePrintFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PublishingListFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PublishTransactionsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PublishedItemsFilterData))]
    public partial class StronglyTypedFilterData : Federation.Client.MyCoreService.FilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IncludeAllowedActionsColumnsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ExtensionPropertyDictionary ExtensionPropertiesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IncludeAllowedActionsColumns {
            get {
                return this.IncludeAllowedActionsColumnsField;
            }
            set {
                if ((this.IncludeAllowedActionsColumnsField.Equals(value) != true)) {
                    this.IncludeAllowedActionsColumnsField = value;
                    this.RaisePropertyChanged("IncludeAllowedActionsColumns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public Federation.Client.MyCoreService.ExtensionPropertyDictionary ExtensionProperties {
            get {
                return this.ExtensionPropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtensionPropertiesField, value) != true)) {
                    this.ExtensionPropertiesField = value;
                    this.RaisePropertyChanged("ExtensionProperties");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SubjectRelatedListFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.WhereUsedFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.UsingItemsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.UsedItemsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.VersionsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.DeletedReferencesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ItemsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.OrganizationalItemItemsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.RepositoryItemsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.KeywordRelatedFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.KeywordsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ChildKeywordsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.OrphanKeywordsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.CategoryRelatedFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ChildCategoriesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.CategoriesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ClassifiedItemsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.OrganizationalItemsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TaxonomiesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TaxonomiesOwlFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PathToCategoryFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.GroupMembersFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.OrganizationalItemAncestorsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BluePrintChainFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ContainingBundlesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ComponentTemplatesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BundleSchemasFilterData))]
    public partial class SubjectRelatedListFilterData : Federation.Client.MyCoreService.StronglyTypedFilterData {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WhereUsedFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.UsingItemsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.UsedItemsFilterData))]
    public partial class WhereUsedFilterData : Federation.Client.MyCoreService.SubjectRelatedListFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToRepositoryData InRepositoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ItemType[] ItemTypesField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToRepositoryData InRepository {
            get {
                return this.InRepositoryField;
            }
            set {
                if ((object.ReferenceEquals(this.InRepositoryField, value) != true)) {
                    this.InRepositoryField = value;
                    this.RaisePropertyChanged("InRepository");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ItemType[] ItemTypes {
            get {
                return this.ItemTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemTypesField, value) != true)) {
                    this.ItemTypesField = value;
                    this.RaisePropertyChanged("ItemTypes");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UsingItemsFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class UsingItemsFilterData : Federation.Client.MyCoreService.WhereUsedFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> ExcludeTaxonomyRelationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IncludeLocalCopiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IncludeVersionsColumnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.VersionCondition IncludedVersionsField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> ExcludeTaxonomyRelations {
            get {
                return this.ExcludeTaxonomyRelationsField;
            }
            set {
                if ((this.ExcludeTaxonomyRelationsField.Equals(value) != true)) {
                    this.ExcludeTaxonomyRelationsField = value;
                    this.RaisePropertyChanged("ExcludeTaxonomyRelations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IncludeLocalCopies {
            get {
                return this.IncludeLocalCopiesField;
            }
            set {
                if ((this.IncludeLocalCopiesField.Equals(value) != true)) {
                    this.IncludeLocalCopiesField = value;
                    this.RaisePropertyChanged("IncludeLocalCopies");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IncludeVersionsColumn {
            get {
                return this.IncludeVersionsColumnField;
            }
            set {
                if ((this.IncludeVersionsColumnField.Equals(value) != true)) {
                    this.IncludeVersionsColumnField = value;
                    this.RaisePropertyChanged("IncludeVersionsColumn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.VersionCondition IncludedVersions {
            get {
                return this.IncludedVersionsField;
            }
            set {
                if ((this.IncludedVersionsField.Equals(value) != true)) {
                    this.IncludedVersionsField = value;
                    this.RaisePropertyChanged("IncludedVersions");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UsedItemsFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class UsedItemsFilterData : Federation.Client.MyCoreService.WhereUsedFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IncludeBlueprintParentItemField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IncludeExternalLinksField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IncludeBlueprintParentItem {
            get {
                return this.IncludeBlueprintParentItemField;
            }
            set {
                if ((this.IncludeBlueprintParentItemField.Equals(value) != true)) {
                    this.IncludeBlueprintParentItemField = value;
                    this.RaisePropertyChanged("IncludeBlueprintParentItem");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IncludeExternalLinks {
            get {
                return this.IncludeExternalLinksField;
            }
            set {
                if ((this.IncludeExternalLinksField.Equals(value) != true)) {
                    this.IncludeExternalLinksField = value;
                    this.RaisePropertyChanged("IncludeExternalLinks");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VersionsFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class VersionsFilterData : Federation.Client.MyCoreService.SubjectRelatedListFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IncludeRevisorDescriptionColumnField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IncludeRevisorDescriptionColumn {
            get {
                return this.IncludeRevisorDescriptionColumnField;
            }
            set {
                if ((this.IncludeRevisorDescriptionColumnField.Equals(value) != true)) {
                    this.IncludeRevisorDescriptionColumnField = value;
                    this.RaisePropertyChanged("IncludeRevisorDescriptionColumn");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeletedReferencesFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class DeletedReferencesFilterData : Federation.Client.MyCoreService.SubjectRelatedListFilterData {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ItemsFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.OrganizationalItemItemsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.RepositoryItemsFilterData))]
    public partial class ItemsFilterData : Federation.Client.MyCoreService.SubjectRelatedListFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ComponentType[] ComponentTypesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IncludeRelativeWebDavUrlColumnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ItemType[] ItemTypesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.LockType> LockFilterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.LockType> LockResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> RecursiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.SchemaPurpose[] SchemaPurposesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IncludeDescriptionColumnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> ShowDynamicVersionIfReadableByUserField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ComponentType[] ComponentTypes {
            get {
                return this.ComponentTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.ComponentTypesField, value) != true)) {
                    this.ComponentTypesField = value;
                    this.RaisePropertyChanged("ComponentTypes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IncludeRelativeWebDavUrlColumn {
            get {
                return this.IncludeRelativeWebDavUrlColumnField;
            }
            set {
                if ((this.IncludeRelativeWebDavUrlColumnField.Equals(value) != true)) {
                    this.IncludeRelativeWebDavUrlColumnField = value;
                    this.RaisePropertyChanged("IncludeRelativeWebDavUrlColumn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ItemType[] ItemTypes {
            get {
                return this.ItemTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemTypesField, value) != true)) {
                    this.ItemTypesField = value;
                    this.RaisePropertyChanged("ItemTypes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.LockType> LockFilter {
            get {
                return this.LockFilterField;
            }
            set {
                if ((this.LockFilterField.Equals(value) != true)) {
                    this.LockFilterField = value;
                    this.RaisePropertyChanged("LockFilter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.LockType> LockResult {
            get {
                return this.LockResultField;
            }
            set {
                if ((this.LockResultField.Equals(value) != true)) {
                    this.LockResultField = value;
                    this.RaisePropertyChanged("LockResult");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> Recursive {
            get {
                return this.RecursiveField;
            }
            set {
                if ((this.RecursiveField.Equals(value) != true)) {
                    this.RecursiveField = value;
                    this.RaisePropertyChanged("Recursive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.SchemaPurpose[] SchemaPurposes {
            get {
                return this.SchemaPurposesField;
            }
            set {
                if ((object.ReferenceEquals(this.SchemaPurposesField, value) != true)) {
                    this.SchemaPurposesField = value;
                    this.RaisePropertyChanged("SchemaPurposes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public bool IncludeDescriptionColumn {
            get {
                return this.IncludeDescriptionColumnField;
            }
            set {
                if ((this.IncludeDescriptionColumnField.Equals(value) != true)) {
                    this.IncludeDescriptionColumnField = value;
                    this.RaisePropertyChanged("IncludeDescriptionColumn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=8)]
        public System.Nullable<bool> ShowDynamicVersionIfReadableByUser {
            get {
                return this.ShowDynamicVersionIfReadableByUserField;
            }
            set {
                if ((this.ShowDynamicVersionIfReadableByUserField.Equals(value) != true)) {
                    this.ShowDynamicVersionIfReadableByUserField = value;
                    this.RaisePropertyChanged("ShowDynamicVersionIfReadableByUser");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrganizationalItemItemsFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class OrganizationalItemItemsFilterData : Federation.Client.MyCoreService.ItemsFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToSchemaData[] BasedOnSchemasField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToSchemaData NotBasedOnSchemaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> ShowNewItemsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] TemplateTypeIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool FailIfNoAccessToItemsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IncludePathColumnField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToSchemaData[] BasedOnSchemas {
            get {
                return this.BasedOnSchemasField;
            }
            set {
                if ((object.ReferenceEquals(this.BasedOnSchemasField, value) != true)) {
                    this.BasedOnSchemasField = value;
                    this.RaisePropertyChanged("BasedOnSchemas");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToSchemaData NotBasedOnSchema {
            get {
                return this.NotBasedOnSchemaField;
            }
            set {
                if ((object.ReferenceEquals(this.NotBasedOnSchemaField, value) != true)) {
                    this.NotBasedOnSchemaField = value;
                    this.RaisePropertyChanged("NotBasedOnSchema");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> ShowNewItems {
            get {
                return this.ShowNewItemsField;
            }
            set {
                if ((this.ShowNewItemsField.Equals(value) != true)) {
                    this.ShowNewItemsField = value;
                    this.RaisePropertyChanged("ShowNewItems");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public int[] TemplateTypeIds {
            get {
                return this.TemplateTypeIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.TemplateTypeIdsField, value) != true)) {
                    this.TemplateTypeIdsField = value;
                    this.RaisePropertyChanged("TemplateTypeIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public bool FailIfNoAccessToItems {
            get {
                return this.FailIfNoAccessToItemsField;
            }
            set {
                if ((this.FailIfNoAccessToItemsField.Equals(value) != true)) {
                    this.FailIfNoAccessToItemsField = value;
                    this.RaisePropertyChanged("FailIfNoAccessToItems");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public bool IncludePathColumn {
            get {
                return this.IncludePathColumnField;
            }
            set {
                if ((this.IncludePathColumnField.Equals(value) != true)) {
                    this.IncludePathColumnField = value;
                    this.RaisePropertyChanged("IncludePathColumn");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RepositoryItemsFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class RepositoryItemsFilterData : Federation.Client.MyCoreService.ItemsFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> ShowNewItemsField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> ShowNewItems {
            get {
                return this.ShowNewItemsField;
            }
            set {
                if ((this.ShowNewItemsField.Equals(value) != true)) {
                    this.ShowNewItemsField = value;
                    this.RaisePropertyChanged("ShowNewItems");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KeywordRelatedFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.KeywordsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ChildKeywordsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.OrphanKeywordsFilterData))]
    public partial class KeywordRelatedFilterData : Federation.Client.MyCoreService.SubjectRelatedListFilterData {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KeywordsFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class KeywordsFilterData : Federation.Client.MyCoreService.KeywordRelatedFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsAbstractField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsRootField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<uint> ResultLimitField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsAbstract {
            get {
                return this.IsAbstractField;
            }
            set {
                if ((this.IsAbstractField.Equals(value) != true)) {
                    this.IsAbstractField = value;
                    this.RaisePropertyChanged("IsAbstract");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsRoot {
            get {
                return this.IsRootField;
            }
            set {
                if ((this.IsRootField.Equals(value) != true)) {
                    this.IsRootField = value;
                    this.RaisePropertyChanged("IsRoot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<uint> ResultLimit {
            get {
                return this.ResultLimitField;
            }
            set {
                if ((this.ResultLimitField.Equals(value) != true)) {
                    this.ResultLimitField = value;
                    this.RaisePropertyChanged("ResultLimit");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChildKeywordsFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ChildKeywordsFilterData : Federation.Client.MyCoreService.KeywordRelatedFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToCategoryData InCategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsAbstractField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToCategoryData InCategory {
            get {
                return this.InCategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.InCategoryField, value) != true)) {
                    this.InCategoryField = value;
                    this.RaisePropertyChanged("InCategory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsAbstract {
            get {
                return this.IsAbstractField;
            }
            set {
                if ((this.IsAbstractField.Equals(value) != true)) {
                    this.IsAbstractField = value;
                    this.RaisePropertyChanged("IsAbstract");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrphanKeywordsFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class OrphanKeywordsFilterData : Federation.Client.MyCoreService.KeywordRelatedFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToCategoryData RootCategoryField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToCategoryData RootCategory {
            get {
                return this.RootCategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.RootCategoryField, value) != true)) {
                    this.RootCategoryField = value;
                    this.RaisePropertyChanged("RootCategory");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CategoryRelatedFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ChildCategoriesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.CategoriesFilterData))]
    public partial class CategoryRelatedFilterData : Federation.Client.MyCoreService.SubjectRelatedListFilterData {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChildCategoriesFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ChildCategoriesFilterData : Federation.Client.MyCoreService.CategoryRelatedFilterData {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CategoriesFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class CategoriesFilterData : Federation.Client.MyCoreService.CategoryRelatedFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsRootField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsRoot {
            get {
                return this.IsRootField;
            }
            set {
                if ((this.IsRootField.Equals(value) != true)) {
                    this.IsRootField = value;
                    this.RaisePropertyChanged("IsRoot");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClassifiedItemsFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ClassifiedItemsFilterData : Federation.Client.MyCoreService.SubjectRelatedListFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToSchemaData[] BasedOnSchemasField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ItemType[] ItemTypesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> ResolveDescendantKeywordsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<uint> ResultLimitField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToSchemaData[] BasedOnSchemas {
            get {
                return this.BasedOnSchemasField;
            }
            set {
                if ((object.ReferenceEquals(this.BasedOnSchemasField, value) != true)) {
                    this.BasedOnSchemasField = value;
                    this.RaisePropertyChanged("BasedOnSchemas");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ItemType[] ItemTypes {
            get {
                return this.ItemTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemTypesField, value) != true)) {
                    this.ItemTypesField = value;
                    this.RaisePropertyChanged("ItemTypes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> ResolveDescendantKeywords {
            get {
                return this.ResolveDescendantKeywordsField;
            }
            set {
                if ((this.ResolveDescendantKeywordsField.Equals(value) != true)) {
                    this.ResolveDescendantKeywordsField = value;
                    this.RaisePropertyChanged("ResolveDescendantKeywords");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<uint> ResultLimit {
            get {
                return this.ResultLimitField;
            }
            set {
                if ((this.ResultLimitField.Equals(value) != true)) {
                    this.ResultLimitField = value;
                    this.RaisePropertyChanged("ResultLimit");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrganizationalItemsFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class OrganizationalItemsFilterData : Federation.Client.MyCoreService.SubjectRelatedListFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToTrusteeData[] ExcludeTrusteesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IncludePathColumnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IncludeRelativeWebDavUrlColumnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToTrusteeData[] IncludeTrusteesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ItemType[] ItemTypesField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToTrusteeData[] ExcludeTrustees {
            get {
                return this.ExcludeTrusteesField;
            }
            set {
                if ((object.ReferenceEquals(this.ExcludeTrusteesField, value) != true)) {
                    this.ExcludeTrusteesField = value;
                    this.RaisePropertyChanged("ExcludeTrustees");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IncludePathColumn {
            get {
                return this.IncludePathColumnField;
            }
            set {
                if ((this.IncludePathColumnField.Equals(value) != true)) {
                    this.IncludePathColumnField = value;
                    this.RaisePropertyChanged("IncludePathColumn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IncludeRelativeWebDavUrlColumn {
            get {
                return this.IncludeRelativeWebDavUrlColumnField;
            }
            set {
                if ((this.IncludeRelativeWebDavUrlColumnField.Equals(value) != true)) {
                    this.IncludeRelativeWebDavUrlColumnField = value;
                    this.RaisePropertyChanged("IncludeRelativeWebDavUrlColumn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToTrusteeData[] IncludeTrustees {
            get {
                return this.IncludeTrusteesField;
            }
            set {
                if ((object.ReferenceEquals(this.IncludeTrusteesField, value) != true)) {
                    this.IncludeTrusteesField = value;
                    this.RaisePropertyChanged("IncludeTrustees");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ItemType[] ItemTypes {
            get {
                return this.ItemTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemTypesField, value) != true)) {
                    this.ItemTypesField = value;
                    this.RaisePropertyChanged("ItemTypes");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaxonomiesFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TaxonomiesOwlFilterData))]
    public partial class TaxonomiesFilterData : Federation.Client.MyCoreService.SubjectRelatedListFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToRepositoryLocalObjectData[] ForItemsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> UseForNavigationField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToRepositoryLocalObjectData[] ForItems {
            get {
                return this.ForItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ForItemsField, value) != true)) {
                    this.ForItemsField = value;
                    this.RaisePropertyChanged("ForItems");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> UseForNavigation {
            get {
                return this.UseForNavigationField;
            }
            set {
                if ((this.UseForNavigationField.Equals(value) != true)) {
                    this.UseForNavigationField = value;
                    this.RaisePropertyChanged("UseForNavigation");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaxonomiesOwlFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class TaxonomiesOwlFilterData : Federation.Client.MyCoreService.TaxonomiesFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToCategoryData[] RootCategoriesField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToCategoryData[] RootCategories {
            get {
                return this.RootCategoriesField;
            }
            set {
                if ((object.ReferenceEquals(this.RootCategoriesField, value) != true)) {
                    this.RootCategoriesField = value;
                    this.RaisePropertyChanged("RootCategories");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PathToCategoryFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class PathToCategoryFilterData : Federation.Client.MyCoreService.SubjectRelatedListFilterData {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupMembersFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class GroupMembersFilterData : Federation.Client.MyCoreService.SubjectRelatedListFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToRepositoryData ContextRepositoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> ExcludeDisabledTrusteesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> RecursiveField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToRepositoryData ContextRepository {
            get {
                return this.ContextRepositoryField;
            }
            set {
                if ((object.ReferenceEquals(this.ContextRepositoryField, value) != true)) {
                    this.ContextRepositoryField = value;
                    this.RaisePropertyChanged("ContextRepository");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> ExcludeDisabledTrustees {
            get {
                return this.ExcludeDisabledTrusteesField;
            }
            set {
                if ((this.ExcludeDisabledTrusteesField.Equals(value) != true)) {
                    this.ExcludeDisabledTrusteesField = value;
                    this.RaisePropertyChanged("ExcludeDisabledTrustees");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> Recursive {
            get {
                return this.RecursiveField;
            }
            set {
                if ((this.RecursiveField.Equals(value) != true)) {
                    this.RecursiveField = value;
                    this.RaisePropertyChanged("Recursive");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrganizationalItemAncestorsFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class OrganizationalItemAncestorsFilterData : Federation.Client.MyCoreService.SubjectRelatedListFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IncludePublishLocationColumnsField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IncludePublishLocationColumns {
            get {
                return this.IncludePublishLocationColumnsField;
            }
            set {
                if ((this.IncludePublishLocationColumnsField.Equals(value) != true)) {
                    this.IncludePublishLocationColumnsField = value;
                    this.RaisePropertyChanged("IncludePublishLocationColumns");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BluePrintChainFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class BluePrintChainFilterData : Federation.Client.MyCoreService.SubjectRelatedListFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.BluePrintChainDirection DirectionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IncludeWebDavUrlColumnField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.BluePrintChainDirection Direction {
            get {
                return this.DirectionField;
            }
            set {
                if ((this.DirectionField.Equals(value) != true)) {
                    this.DirectionField = value;
                    this.RaisePropertyChanged("Direction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IncludeWebDavUrlColumn {
            get {
                return this.IncludeWebDavUrlColumnField;
            }
            set {
                if ((this.IncludeWebDavUrlColumnField.Equals(value) != true)) {
                    this.IncludeWebDavUrlColumnField = value;
                    this.RaisePropertyChanged("IncludeWebDavUrlColumn");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContainingBundlesFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ContainingBundlesFilterData : Federation.Client.MyCoreService.SubjectRelatedListFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IncludeBundleTypeColumnsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IncludeDescriptionColumnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool OnlySpecifiedBluePrintVariantField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SuppressLocalCopiesField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public bool IncludeBundleTypeColumns {
            get {
                return this.IncludeBundleTypeColumnsField;
            }
            set {
                if ((this.IncludeBundleTypeColumnsField.Equals(value) != true)) {
                    this.IncludeBundleTypeColumnsField = value;
                    this.RaisePropertyChanged("IncludeBundleTypeColumns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public bool IncludeDescriptionColumn {
            get {
                return this.IncludeDescriptionColumnField;
            }
            set {
                if ((this.IncludeDescriptionColumnField.Equals(value) != true)) {
                    this.IncludeDescriptionColumnField = value;
                    this.RaisePropertyChanged("IncludeDescriptionColumn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public bool OnlySpecifiedBluePrintVariant {
            get {
                return this.OnlySpecifiedBluePrintVariantField;
            }
            set {
                if ((this.OnlySpecifiedBluePrintVariantField.Equals(value) != true)) {
                    this.OnlySpecifiedBluePrintVariantField = value;
                    this.RaisePropertyChanged("OnlySpecifiedBluePrintVariant");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public bool SuppressLocalCopies {
            get {
                return this.SuppressLocalCopiesField;
            }
            set {
                if ((this.SuppressLocalCopiesField.Equals(value) != true)) {
                    this.SuppressLocalCopiesField = value;
                    this.RaisePropertyChanged("SuppressLocalCopies");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ComponentTemplatesFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ComponentTemplatesFilterData : Federation.Client.MyCoreService.SubjectRelatedListFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> AllowedOnPageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToRepositoryLocalObjectData[] RelatedToField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> AllowedOnPage {
            get {
                return this.AllowedOnPageField;
            }
            set {
                if ((this.AllowedOnPageField.Equals(value) != true)) {
                    this.AllowedOnPageField = value;
                    this.RaisePropertyChanged("AllowedOnPage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToRepositoryLocalObjectData[] RelatedTo {
            get {
                return this.RelatedToField;
            }
            set {
                if ((object.ReferenceEquals(this.RelatedToField, value) != true)) {
                    this.RelatedToField = value;
                    this.RaisePropertyChanged("RelatedTo");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BundleSchemasFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class BundleSchemasFilterData : Federation.Client.MyCoreService.SubjectRelatedListFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> OnlyApplicableBundlesField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> OnlyApplicableBundles {
            get {
                return this.OnlyApplicableBundlesField;
            }
            set {
                if ((this.OnlyApplicableBundlesField.Equals(value) != true)) {
                    this.OnlyApplicableBundlesField = value;
                    this.RaisePropertyChanged("OnlyApplicableBundles");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SystemWideListFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TrusteesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.UsersFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.GroupsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.RepositoriesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PublicationsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.MultimediaTypesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.TargetTypesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PublicationTargetsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.WorkflowManagerFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ApprovalStatusesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ProcessDefinitionsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.UserWorkItemsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ProcessDefinitionAssociationsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ProcessesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ActivityInstancesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BatchesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.WorkflowTypesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.RepositoryLocalObjectsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BluePrintParentsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BluePrintNodesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BluePrintFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PublishingListFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PublishTransactionsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PublishedItemsFilterData))]
    public partial class SystemWideListFilterData : Federation.Client.MyCoreService.StronglyTypedFilterData {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrusteesFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.UsersFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.GroupsFilterData))]
    public partial class TrusteesFilterData : Federation.Client.MyCoreService.SystemWideListFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsPredefinedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.ItemType> ItemTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.StringSearchMode NameSearchModeField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsPredefined {
            get {
                return this.IsPredefinedField;
            }
            set {
                if ((this.IsPredefinedField.Equals(value) != true)) {
                    this.IsPredefinedField = value;
                    this.RaisePropertyChanged("IsPredefined");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.ItemType> ItemType {
            get {
                return this.ItemTypeField;
            }
            set {
                if ((this.ItemTypeField.Equals(value) != true)) {
                    this.ItemTypeField = value;
                    this.RaisePropertyChanged("ItemType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.StringSearchMode NameSearchMode {
            get {
                return this.NameSearchModeField;
            }
            set {
                if ((this.NameSearchModeField.Equals(value) != true)) {
                    this.NameSearchModeField = value;
                    this.RaisePropertyChanged("NameSearchMode");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UsersFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class UsersFilterData : Federation.Client.MyCoreService.TrusteesFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> ExcludeDisabledUsersField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> ExcludeDisabledUsers {
            get {
                return this.ExcludeDisabledUsersField;
            }
            set {
                if ((this.ExcludeDisabledUsersField.Equals(value) != true)) {
                    this.ExcludeDisabledUsersField = value;
                    this.RaisePropertyChanged("ExcludeDisabledUsers");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupsFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class GroupsFilterData : Federation.Client.MyCoreService.TrusteesFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToRepositoryData ForRepositoryField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToRepositoryData ForRepository {
            get {
                return this.ForRepositoryField;
            }
            set {
                if ((object.ReferenceEquals(this.ForRepositoryField, value) != true)) {
                    this.ForRepositoryField = value;
                    this.RaisePropertyChanged("ForRepository");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RepositoriesFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PublicationsFilterData))]
    public partial class RepositoriesFilterData : Federation.Client.MyCoreService.SystemWideListFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IncludeWebDavUrlColumnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IncludeRootOrganizationalItemsColumnsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IncludeAllPublicationsForGroupManagementField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IncludeWebDavUrlColumn {
            get {
                return this.IncludeWebDavUrlColumnField;
            }
            set {
                if ((this.IncludeWebDavUrlColumnField.Equals(value) != true)) {
                    this.IncludeWebDavUrlColumnField = value;
                    this.RaisePropertyChanged("IncludeWebDavUrlColumn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public System.Nullable<bool> IncludeRootOrganizationalItemsColumns {
            get {
                return this.IncludeRootOrganizationalItemsColumnsField;
            }
            set {
                if ((this.IncludeRootOrganizationalItemsColumnsField.Equals(value) != true)) {
                    this.IncludeRootOrganizationalItemsColumnsField = value;
                    this.RaisePropertyChanged("IncludeRootOrganizationalItemsColumns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public System.Nullable<bool> IncludeAllPublicationsForGroupManagement {
            get {
                return this.IncludeAllPublicationsForGroupManagementField;
            }
            set {
                if ((this.IncludeAllPublicationsForGroupManagementField.Equals(value) != true)) {
                    this.IncludeAllPublicationsForGroupManagementField = value;
                    this.RaisePropertyChanged("IncludeAllPublicationsForGroupManagement");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PublicationsFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class PublicationsFilterData : Federation.Client.MyCoreService.RepositoriesFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PublicationTypeNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string PublicationTypeName {
            get {
                return this.PublicationTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PublicationTypeNameField, value) != true)) {
                    this.PublicationTypeNameField = value;
                    this.RaisePropertyChanged("PublicationTypeName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MultimediaTypesFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class MultimediaTypesFilterData : Federation.Client.MyCoreService.SystemWideListFilterData {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TargetTypesFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class TargetTypesFilterData : Federation.Client.MyCoreService.SystemWideListFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToRepositoryData ForRepositoryField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToRepositoryData ForRepository {
            get {
                return this.ForRepositoryField;
            }
            set {
                if ((object.ReferenceEquals(this.ForRepositoryField, value) != true)) {
                    this.ForRepositoryField = value;
                    this.RaisePropertyChanged("ForRepository");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PublicationTargetsFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class PublicationTargetsFilterData : Federation.Client.MyCoreService.SystemWideListFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IncludeEmulatedField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IncludeEmulated {
            get {
                return this.IncludeEmulatedField;
            }
            set {
                if ((this.IncludeEmulatedField.Equals(value) != true)) {
                    this.IncludeEmulatedField = value;
                    this.RaisePropertyChanged("IncludeEmulated");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkflowManagerFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ApprovalStatusesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ProcessDefinitionsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.UserWorkItemsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ProcessDefinitionAssociationsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ProcessesFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.ActivityInstancesFilterData))]
    public partial class WorkflowManagerFilterData : Federation.Client.MyCoreService.SystemWideListFilterData {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ApprovalStatusesFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ApprovalStatusesFilterData : Federation.Client.MyCoreService.WorkflowManagerFilterData {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessDefinitionsFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ProcessDefinitionsFilterData : Federation.Client.MyCoreService.WorkflowManagerFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToRepositoryData ContextRepositoryField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToRepositoryData ContextRepository {
            get {
                return this.ContextRepositoryField;
            }
            set {
                if ((object.ReferenceEquals(this.ContextRepositoryField, value) != true)) {
                    this.ContextRepositoryField = value;
                    this.RaisePropertyChanged("ContextRepository");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserWorkItemsFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class UserWorkItemsFilterData : Federation.Client.MyCoreService.WorkflowManagerFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.ActivityState> ActivityStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToRepositoryData ContextRepositoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToVersionedItemData SubjectField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.ActivityState> ActivityState {
            get {
                return this.ActivityStateField;
            }
            set {
                if ((this.ActivityStateField.Equals(value) != true)) {
                    this.ActivityStateField = value;
                    this.RaisePropertyChanged("ActivityState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToRepositoryData ContextRepository {
            get {
                return this.ContextRepositoryField;
            }
            set {
                if ((object.ReferenceEquals(this.ContextRepositoryField, value) != true)) {
                    this.ContextRepositoryField = value;
                    this.RaisePropertyChanged("ContextRepository");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToVersionedItemData Subject {
            get {
                return this.SubjectField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectField, value) != true)) {
                    this.SubjectField = value;
                    this.RaisePropertyChanged("Subject");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessDefinitionAssociationsFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ProcessDefinitionAssociationsFilterData : Federation.Client.MyCoreService.WorkflowManagerFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToRepositoryData ContextRepositoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToProcessDefinitionData ProcessDefinitionField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToRepositoryData ContextRepository {
            get {
                return this.ContextRepositoryField;
            }
            set {
                if ((object.ReferenceEquals(this.ContextRepositoryField, value) != true)) {
                    this.ContextRepositoryField = value;
                    this.RaisePropertyChanged("ContextRepository");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToProcessDefinitionData ProcessDefinition {
            get {
                return this.ProcessDefinitionField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessDefinitionField, value) != true)) {
                    this.ProcessDefinitionField = value;
                    this.RaisePropertyChanged("ProcessDefinition");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessesFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ProcessesFilterData : Federation.Client.MyCoreService.WorkflowManagerFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToUserData ForPerformerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToProcessDefinitionData ForProcessDefinitionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToRepositoryData ForRepositoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.ProcessType> ProcessTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToIdentifiableObjectData ForSubjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IncludeWorkflowTypeColumnsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> LegacyModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToWorkflowTypeData WorkflowTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IncludeSubjectsColumnField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToUserData ForPerformer {
            get {
                return this.ForPerformerField;
            }
            set {
                if ((object.ReferenceEquals(this.ForPerformerField, value) != true)) {
                    this.ForPerformerField = value;
                    this.RaisePropertyChanged("ForPerformer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToProcessDefinitionData ForProcessDefinition {
            get {
                return this.ForProcessDefinitionField;
            }
            set {
                if ((object.ReferenceEquals(this.ForProcessDefinitionField, value) != true)) {
                    this.ForProcessDefinitionField = value;
                    this.RaisePropertyChanged("ForProcessDefinition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToRepositoryData ForRepository {
            get {
                return this.ForRepositoryField;
            }
            set {
                if ((object.ReferenceEquals(this.ForRepositoryField, value) != true)) {
                    this.ForRepositoryField = value;
                    this.RaisePropertyChanged("ForRepository");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.ProcessType> ProcessType {
            get {
                return this.ProcessTypeField;
            }
            set {
                if ((this.ProcessTypeField.Equals(value) != true)) {
                    this.ProcessTypeField = value;
                    this.RaisePropertyChanged("ProcessType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public Federation.Client.MyCoreService.LinkToIdentifiableObjectData ForSubject {
            get {
                return this.ForSubjectField;
            }
            set {
                if ((object.ReferenceEquals(this.ForSubjectField, value) != true)) {
                    this.ForSubjectField = value;
                    this.RaisePropertyChanged("ForSubject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=5)]
        public bool IncludeWorkflowTypeColumns {
            get {
                return this.IncludeWorkflowTypeColumnsField;
            }
            set {
                if ((this.IncludeWorkflowTypeColumnsField.Equals(value) != true)) {
                    this.IncludeWorkflowTypeColumnsField = value;
                    this.RaisePropertyChanged("IncludeWorkflowTypeColumns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=6)]
        public System.Nullable<bool> LegacyMode {
            get {
                return this.LegacyModeField;
            }
            set {
                if ((this.LegacyModeField.Equals(value) != true)) {
                    this.LegacyModeField = value;
                    this.RaisePropertyChanged("LegacyMode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=7)]
        public Federation.Client.MyCoreService.LinkToWorkflowTypeData WorkflowType {
            get {
                return this.WorkflowTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkflowTypeField, value) != true)) {
                    this.WorkflowTypeField = value;
                    this.RaisePropertyChanged("WorkflowType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=8)]
        public bool IncludeSubjectsColumn {
            get {
                return this.IncludeSubjectsColumnField;
            }
            set {
                if ((this.IncludeSubjectsColumnField.Equals(value) != true)) {
                    this.IncludeSubjectsColumnField = value;
                    this.RaisePropertyChanged("IncludeSubjectsColumn");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityInstancesFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ActivityInstancesFilterData : Federation.Client.MyCoreService.WorkflowManagerFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.ActivityState> ActivityStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToRepositoryData ContextRepositoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> ForAllUsersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IncludeAdditionalDateColumnsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IncludeWorkItemsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToProcessDefinitionData ProcessDefinitionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToWorkflowTypeData WorkflowTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.ActivityState> ActivityState {
            get {
                return this.ActivityStateField;
            }
            set {
                if ((this.ActivityStateField.Equals(value) != true)) {
                    this.ActivityStateField = value;
                    this.RaisePropertyChanged("ActivityState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToRepositoryData ContextRepository {
            get {
                return this.ContextRepositoryField;
            }
            set {
                if ((object.ReferenceEquals(this.ContextRepositoryField, value) != true)) {
                    this.ContextRepositoryField = value;
                    this.RaisePropertyChanged("ContextRepository");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> ForAllUsers {
            get {
                return this.ForAllUsersField;
            }
            set {
                if ((this.ForAllUsersField.Equals(value) != true)) {
                    this.ForAllUsersField = value;
                    this.RaisePropertyChanged("ForAllUsers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public bool IncludeAdditionalDateColumns {
            get {
                return this.IncludeAdditionalDateColumnsField;
            }
            set {
                if ((this.IncludeAdditionalDateColumnsField.Equals(value) != true)) {
                    this.IncludeAdditionalDateColumnsField = value;
                    this.RaisePropertyChanged("IncludeAdditionalDateColumns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public bool IncludeWorkItems {
            get {
                return this.IncludeWorkItemsField;
            }
            set {
                if ((this.IncludeWorkItemsField.Equals(value) != true)) {
                    this.IncludeWorkItemsField = value;
                    this.RaisePropertyChanged("IncludeWorkItems");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToProcessDefinitionData ProcessDefinition {
            get {
                return this.ProcessDefinitionField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessDefinitionField, value) != true)) {
                    this.ProcessDefinitionField = value;
                    this.RaisePropertyChanged("ProcessDefinition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToWorkflowTypeData WorkflowType {
            get {
                return this.WorkflowTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkflowTypeField, value) != true)) {
                    this.WorkflowTypeField = value;
                    this.RaisePropertyChanged("WorkflowType");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BatchesFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class BatchesFilterData : Federation.Client.MyCoreService.SystemWideListFilterData {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkflowTypesFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class WorkflowTypesFilterData : Federation.Client.MyCoreService.SystemWideListFilterData {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RepositoryLocalObjectsFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class RepositoryLocalObjectsFilterData : Federation.Client.MyCoreService.SystemWideListFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ComponentType[] ComponentTypesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IncludeLockUserColumnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IncludeRelativeWebDavUrlColumnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ItemType[] ItemTypesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.LockType> LockFilterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.LockType> LockResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToUserData LockUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.SchemaPurpose[] SchemaPurposesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] TemplateTypeIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToSchemaData[] BasedOnSchemasField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IncludeLocationInfoColumnsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ItemIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> UseDynamicVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IncludeDescriptionColumnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IncludeDynamicVersionInfoColumnsField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ComponentType[] ComponentTypes {
            get {
                return this.ComponentTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.ComponentTypesField, value) != true)) {
                    this.ComponentTypesField = value;
                    this.RaisePropertyChanged("ComponentTypes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IncludeLockUserColumn {
            get {
                return this.IncludeLockUserColumnField;
            }
            set {
                if ((this.IncludeLockUserColumnField.Equals(value) != true)) {
                    this.IncludeLockUserColumnField = value;
                    this.RaisePropertyChanged("IncludeLockUserColumn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IncludeRelativeWebDavUrlColumn {
            get {
                return this.IncludeRelativeWebDavUrlColumnField;
            }
            set {
                if ((this.IncludeRelativeWebDavUrlColumnField.Equals(value) != true)) {
                    this.IncludeRelativeWebDavUrlColumnField = value;
                    this.RaisePropertyChanged("IncludeRelativeWebDavUrlColumn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ItemType[] ItemTypes {
            get {
                return this.ItemTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemTypesField, value) != true)) {
                    this.ItemTypesField = value;
                    this.RaisePropertyChanged("ItemTypes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.LockType> LockFilter {
            get {
                return this.LockFilterField;
            }
            set {
                if ((this.LockFilterField.Equals(value) != true)) {
                    this.LockFilterField = value;
                    this.RaisePropertyChanged("LockFilter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.LockType> LockResult {
            get {
                return this.LockResultField;
            }
            set {
                if ((this.LockResultField.Equals(value) != true)) {
                    this.LockResultField = value;
                    this.RaisePropertyChanged("LockResult");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToUserData LockUser {
            get {
                return this.LockUserField;
            }
            set {
                if ((object.ReferenceEquals(this.LockUserField, value) != true)) {
                    this.LockUserField = value;
                    this.RaisePropertyChanged("LockUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.SchemaPurpose[] SchemaPurposes {
            get {
                return this.SchemaPurposesField;
            }
            set {
                if ((object.ReferenceEquals(this.SchemaPurposesField, value) != true)) {
                    this.SchemaPurposesField = value;
                    this.RaisePropertyChanged("SchemaPurposes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public int[] TemplateTypeIds {
            get {
                return this.TemplateTypeIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.TemplateTypeIdsField, value) != true)) {
                    this.TemplateTypeIdsField = value;
                    this.RaisePropertyChanged("TemplateTypeIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=9)]
        public Federation.Client.MyCoreService.LinkToSchemaData[] BasedOnSchemas {
            get {
                return this.BasedOnSchemasField;
            }
            set {
                if ((object.ReferenceEquals(this.BasedOnSchemasField, value) != true)) {
                    this.BasedOnSchemasField = value;
                    this.RaisePropertyChanged("BasedOnSchemas");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=10)]
        public System.Nullable<bool> IncludeLocationInfoColumns {
            get {
                return this.IncludeLocationInfoColumnsField;
            }
            set {
                if ((this.IncludeLocationInfoColumnsField.Equals(value) != true)) {
                    this.IncludeLocationInfoColumnsField = value;
                    this.RaisePropertyChanged("IncludeLocationInfoColumns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=11)]
        public string[] ItemIds {
            get {
                return this.ItemIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemIdsField, value) != true)) {
                    this.ItemIdsField = value;
                    this.RaisePropertyChanged("ItemIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=12)]
        public System.Nullable<bool> UseDynamicVersion {
            get {
                return this.UseDynamicVersionField;
            }
            set {
                if ((this.UseDynamicVersionField.Equals(value) != true)) {
                    this.UseDynamicVersionField = value;
                    this.RaisePropertyChanged("UseDynamicVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=13)]
        public bool IncludeDescriptionColumn {
            get {
                return this.IncludeDescriptionColumnField;
            }
            set {
                if ((this.IncludeDescriptionColumnField.Equals(value) != true)) {
                    this.IncludeDescriptionColumnField = value;
                    this.RaisePropertyChanged("IncludeDescriptionColumn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=14)]
        public bool IncludeDynamicVersionInfoColumns {
            get {
                return this.IncludeDynamicVersionInfoColumnsField;
            }
            set {
                if ((this.IncludeDynamicVersionInfoColumnsField.Equals(value) != true)) {
                    this.IncludeDynamicVersionInfoColumnsField = value;
                    this.RaisePropertyChanged("IncludeDynamicVersionInfoColumns");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BluePrintParentsFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class BluePrintParentsFilterData : Federation.Client.MyCoreService.SystemWideListFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToRepositoryData[] CurrentParentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToRepositoryData ForRepositoryField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToRepositoryData[] CurrentParents {
            get {
                return this.CurrentParentsField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentParentsField, value) != true)) {
                    this.CurrentParentsField = value;
                    this.RaisePropertyChanged("CurrentParents");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToRepositoryData ForRepository {
            get {
                return this.ForRepositoryField;
            }
            set {
                if ((object.ReferenceEquals(this.ForRepositoryField, value) != true)) {
                    this.ForRepositoryField = value;
                    this.RaisePropertyChanged("ForRepository");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BluePrintNodesFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.BluePrintFilterData))]
    public partial class BluePrintNodesFilterData : Federation.Client.MyCoreService.SystemWideListFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToRepositoryLocalObjectData ForItemField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToRepositoryData ForRepositoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IncludeWebDavUrlColumnField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToRepositoryLocalObjectData ForItem {
            get {
                return this.ForItemField;
            }
            set {
                if ((object.ReferenceEquals(this.ForItemField, value) != true)) {
                    this.ForItemField = value;
                    this.RaisePropertyChanged("ForItem");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToRepositoryData ForRepository {
            get {
                return this.ForRepositoryField;
            }
            set {
                if ((object.ReferenceEquals(this.ForRepositoryField, value) != true)) {
                    this.ForRepositoryField = value;
                    this.RaisePropertyChanged("ForRepository");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IncludeWebDavUrlColumn {
            get {
                return this.IncludeWebDavUrlColumnField;
            }
            set {
                if ((this.IncludeWebDavUrlColumnField.Equals(value) != true)) {
                    this.IncludeWebDavUrlColumnField = value;
                    this.RaisePropertyChanged("IncludeWebDavUrlColumn");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BluePrintFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class BluePrintFilterData : Federation.Client.MyCoreService.BluePrintNodesFilterData {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PublishingListFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PublishTransactionsFilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.PublishedItemsFilterData))]
    public partial class PublishingListFilterData : Federation.Client.MyCoreService.SystemWideListFilterData {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PublishTransactionsFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class PublishTransactionsFilterData : Federation.Client.MyCoreService.PublishingListFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToRepositoryData ForRepositoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.PublishPriority> PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToPublicationTargetData PublicationTargetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.PublishTransactionState> PublishTransactionStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToUserData PublishedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsCompletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PublisherHostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToTargetTypeData TargetTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.DateTime> EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToRepositoryData ForRepository {
            get {
                return this.ForRepositoryField;
            }
            set {
                if ((object.ReferenceEquals(this.ForRepositoryField, value) != true)) {
                    this.ForRepositoryField = value;
                    this.RaisePropertyChanged("ForRepository");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.PublishPriority> Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToPublicationTargetData PublicationTarget {
            get {
                return this.PublicationTargetField;
            }
            set {
                if ((object.ReferenceEquals(this.PublicationTargetField, value) != true)) {
                    this.PublicationTargetField = value;
                    this.RaisePropertyChanged("PublicationTarget");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.PublishTransactionState> PublishTransactionState {
            get {
                return this.PublishTransactionStateField;
            }
            set {
                if ((this.PublishTransactionStateField.Equals(value) != true)) {
                    this.PublishTransactionStateField = value;
                    this.RaisePropertyChanged("PublishTransactionState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToUserData PublishedBy {
            get {
                return this.PublishedByField;
            }
            set {
                if ((object.ReferenceEquals(this.PublishedByField, value) != true)) {
                    this.PublishedByField = value;
                    this.RaisePropertyChanged("PublishedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.DateTime> StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=7)]
        public System.Nullable<bool> IsCompleted {
            get {
                return this.IsCompletedField;
            }
            set {
                if ((this.IsCompletedField.Equals(value) != true)) {
                    this.IsCompletedField = value;
                    this.RaisePropertyChanged("IsCompleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=8)]
        public string PublisherHost {
            get {
                return this.PublisherHostField;
            }
            set {
                if ((object.ReferenceEquals(this.PublisherHostField, value) != true)) {
                    this.PublisherHostField = value;
                    this.RaisePropertyChanged("PublisherHost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=9)]
        public Federation.Client.MyCoreService.LinkToTargetTypeData TargetType {
            get {
                return this.TargetTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetTypeField, value) != true)) {
                    this.TargetTypeField = value;
                    this.RaisePropertyChanged("TargetType");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PublishedItemsFilterData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class PublishedItemsFilterData : Federation.Client.MyCoreService.PublishingListFilterData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToPublicationData ForPublicationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IncludePathColumnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IncludeTemplatesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToPublicationTargetData PublicationTargetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ResultLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToTargetTypeData TargetTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PurposeField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToPublicationData ForPublication {
            get {
                return this.ForPublicationField;
            }
            set {
                if ((object.ReferenceEquals(this.ForPublicationField, value) != true)) {
                    this.ForPublicationField = value;
                    this.RaisePropertyChanged("ForPublication");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public bool IncludePathColumn {
            get {
                return this.IncludePathColumnField;
            }
            set {
                if ((this.IncludePathColumnField.Equals(value) != true)) {
                    this.IncludePathColumnField = value;
                    this.RaisePropertyChanged("IncludePathColumn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public bool IncludeTemplates {
            get {
                return this.IncludeTemplatesField;
            }
            set {
                if ((this.IncludeTemplatesField.Equals(value) != true)) {
                    this.IncludeTemplatesField = value;
                    this.RaisePropertyChanged("IncludeTemplates");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToPublicationTargetData PublicationTarget {
            get {
                return this.PublicationTargetField;
            }
            set {
                if ((object.ReferenceEquals(this.PublicationTargetField, value) != true)) {
                    this.PublicationTargetField = value;
                    this.RaisePropertyChanged("PublicationTarget");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<int> ResultLimit {
            get {
                return this.ResultLimitField;
            }
            set {
                if ((this.ResultLimitField.Equals(value) != true)) {
                    this.ResultLimitField = value;
                    this.RaisePropertyChanged("ResultLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToTargetTypeData TargetType {
            get {
                return this.TargetTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetTypeField, value) != true)) {
                    this.TargetTypeField = value;
                    this.RaisePropertyChanged("TargetType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=6)]
        public string Purpose {
            get {
                return this.PurposeField;
            }
            set {
                if ((object.ReferenceEquals(this.PurposeField, value) != true)) {
                    this.PurposeField = value;
                    this.RaisePropertyChanged("Purpose");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ListBaseColumns", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum ListBaseColumns : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Id = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IdAndTitle = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Default = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Extended = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VersionCondition", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum VersionCondition : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AllVersions = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OnlyLatestVersions = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OnlyLatestAndCheckedOutVersions = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BluePrintChainDirection", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum BluePrintChainDirection : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Up = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Down = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StringSearchMode", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum StringSearchMode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Contains = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StartsWith = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EndsWith = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ExactMatch = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessType", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum ProcessType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Any = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Active = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Historical = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownByClient = -2147483648,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WindowsUser", Namespace="http://www.sdltridion.com/Security")]
    [System.SerializableAttribute()]
    public partial class WindowsUser : Federation.Client.MyCoreService.ExternalUser {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string SID {
            get {
                return this.SIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SIDField, value) != true)) {
                    this.SIDField = value;
                    this.RaisePropertyChanged("SID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExternalUser", Namespace="http://www.sdltridion.com/Security")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.DirectoryServiceUser))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.WindowsUser))]
    public partial class ExternalUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullNameField;
        
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string FullName {
            get {
                return this.FullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullNameField, value) != true)) {
                    this.FullNameField = value;
                    this.RaisePropertyChanged("FullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DirectoryServiceUser", Namespace="http://www.sdltridion.com/Security")]
    [System.SerializableAttribute()]
    public partial class DirectoryServiceUser : Federation.Client.MyCoreService.ExternalUser {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.AdditionalAttributes AdditionalAttributesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DNField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.AdditionalAttributes AdditionalAttributes {
            get {
                return this.AdditionalAttributesField;
            }
            set {
                if ((object.ReferenceEquals(this.AdditionalAttributesField, value) != true)) {
                    this.AdditionalAttributesField = value;
                    this.RaisePropertyChanged("AdditionalAttributes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string DN {
            get {
                return this.DNField;
            }
            set {
                if ((object.ReferenceEquals(this.DNField, value) != true)) {
                    this.DNField = value;
                    this.RaisePropertyChanged("DN");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="AdditionalAttributes", Namespace="http://www.sdltridion.com/Security", ItemName="AdditionalAttribute", KeyName="Name", ValueName="Values")]
    [System.SerializableAttribute()]
    public class AdditionalAttributes : System.Collections.Generic.Dictionary<string, string[]> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DirectoryUsersFilter", Namespace="http://www.sdltridion.com/Security")]
    [System.SerializableAttribute()]
    public partial class DirectoryUsersFilter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubtreeDNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.UserNameSearchMode> UserNameSearchModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameStartsWithField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string SubtreeDN {
            get {
                return this.SubtreeDNField;
            }
            set {
                if ((object.ReferenceEquals(this.SubtreeDNField, value) != true)) {
                    this.SubtreeDNField = value;
                    this.RaisePropertyChanged("SubtreeDN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<Federation.Client.MyCoreService.UserNameSearchMode> UserNameSearchMode {
            get {
                return this.UserNameSearchModeField;
            }
            set {
                if ((this.UserNameSearchModeField.Equals(value) != true)) {
                    this.UserNameSearchModeField = value;
                    this.RaisePropertyChanged("UserNameSearchMode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string UserNameStartsWith {
            get {
                return this.UserNameStartsWithField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameStartsWithField, value) != true)) {
                    this.UserNameStartsWithField = value;
                    this.RaisePropertyChanged("UserNameStartsWith");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserNameSearchMode", Namespace="http://www.sdltridion.com/Security")]
    public enum UserNameSearchMode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UserNameOnly = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FullNameOnly = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClassificationInfoData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ClassificationInfoData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ClassificationDetailData[] DetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.RepositoryLocalObjectData ItemField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ClassificationDetailData[] Details {
            get {
                return this.DetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailsField, value) != true)) {
                    this.DetailsField = value;
                    this.RaisePropertyChanged("Details");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.RepositoryLocalObjectData Item {
            get {
                return this.ItemField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemField, value) != true)) {
                    this.ItemField = value;
                    this.RaisePropertyChanged("Item");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClassificationDetailData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ClassificationDetailData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToCategoryData CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsMetadataFieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToKeywordData[] KeywordsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string XPathField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToCategoryData Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string FieldName {
            get {
                return this.FieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldNameField, value) != true)) {
                    this.FieldNameField = value;
                    this.RaisePropertyChanged("FieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public bool IsMetadataField {
            get {
                return this.IsMetadataFieldField;
            }
            set {
                if ((this.IsMetadataFieldField.Equals(value) != true)) {
                    this.IsMetadataFieldField = value;
                    this.RaisePropertyChanged("IsMetadataField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToKeywordData[] Keywords {
            get {
                return this.KeywordsField;
            }
            set {
                if ((object.ReferenceEquals(this.KeywordsField, value) != true)) {
                    this.KeywordsField = value;
                    this.RaisePropertyChanged("Keywords");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string XPath {
            get {
                return this.XPathField;
            }
            set {
                if ((object.ReferenceEquals(this.XPathField, value) != true)) {
                    this.XPathField = value;
                    this.RaisePropertyChanged("XPath");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityFinishData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Federation.Client.MyCoreService.DecisionActivityFinishData))]
    public partial class ActivityFinishData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToTrusteeData NextAssigneeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> NextActivityDueDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NextActivityTitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToTrusteeData NextAssignee {
            get {
                return this.NextAssigneeField;
            }
            set {
                if ((object.ReferenceEquals(this.NextAssigneeField, value) != true)) {
                    this.NextAssigneeField = value;
                    this.RaisePropertyChanged("NextAssignee");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public System.Nullable<System.DateTime> NextActivityDueDate {
            get {
                return this.NextActivityDueDateField;
            }
            set {
                if ((this.NextActivityDueDateField.Equals(value) != true)) {
                    this.NextActivityDueDateField = value;
                    this.RaisePropertyChanged("NextActivityDueDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public string NextActivityTitle {
            get {
                return this.NextActivityTitleField;
            }
            set {
                if ((object.ReferenceEquals(this.NextActivityTitleField, value) != true)) {
                    this.NextActivityTitleField = value;
                    this.RaisePropertyChanged("NextActivityTitle");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DecisionActivityFinishData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class DecisionActivityFinishData : Federation.Client.MyCoreService.ActivityFinishData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToActivityDefinitionData NextActivityField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToActivityDefinitionData NextActivity {
            get {
                return this.NextActivityField;
            }
            set {
                if ((object.ReferenceEquals(this.NextActivityField, value) != true)) {
                    this.NextActivityField = value;
                    this.RaisePropertyChanged("NextActivity");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueueMessageData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class QueueMessageData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.QueueMessageAction> ActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreationHostNameField;
        
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToIdentifiableObjectData ItemField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.QueueMessagePriority> PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProcessingConsumerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToPublicationTargetData PublicationTargetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> QueueIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ScheduleDateTimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.QueueMessageAction> Action {
            get {
                return this.ActionField;
            }
            set {
                if ((this.ActionField.Equals(value) != true)) {
                    this.ActionField = value;
                    this.RaisePropertyChanged("Action");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.DateTime> CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string CreationHostName {
            get {
                return this.CreationHostNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CreationHostNameField, value) != true)) {
                    this.CreationHostNameField = value;
                    this.RaisePropertyChanged("CreationHostName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, EmitDefaultValue=false)]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToIdentifiableObjectData Item {
            get {
                return this.ItemField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemField, value) != true)) {
                    this.ItemField = value;
                    this.RaisePropertyChanged("Item");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.QueueMessagePriority> Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<int> ProcessingConsumerId {
            get {
                return this.ProcessingConsumerIdField;
            }
            set {
                if ((this.ProcessingConsumerIdField.Equals(value) != true)) {
                    this.ProcessingConsumerIdField = value;
                    this.RaisePropertyChanged("ProcessingConsumerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToPublicationTargetData PublicationTarget {
            get {
                return this.PublicationTargetField;
            }
            set {
                if ((object.ReferenceEquals(this.PublicationTargetField, value) != true)) {
                    this.PublicationTargetField = value;
                    this.RaisePropertyChanged("PublicationTarget");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<int> QueueId {
            get {
                return this.QueueIdField;
            }
            set {
                if ((this.QueueIdField.Equals(value) != true)) {
                    this.QueueIdField = value;
                    this.RaisePropertyChanged("QueueId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.DateTime> ScheduleDateTime {
            get {
                return this.ScheduleDateTimeField;
            }
            set {
                if ((this.ScheduleDateTimeField.Equals(value) != true)) {
                    this.ScheduleDateTimeField = value;
                    this.RaisePropertyChanged("ScheduleDateTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueueMessageAction", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum QueueMessageAction : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Insert = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Update = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Delete = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Reset = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ExpirationActivity = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownByClient = -2147483648,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueueMessagePriority", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum QueueMessagePriority : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Low = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Normal = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        High = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownByClient = -2147483648,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueueData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class QueueData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> NumberOfMessagesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, EmitDefaultValue=false)]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<int> NumberOfMessages {
            get {
                return this.NumberOfMessagesField;
            }
            set {
                if ((this.NumberOfMessagesField.Equals(value) != true)) {
                    this.NumberOfMessagesField = value;
                    this.RaisePropertyChanged("NumberOfMessages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ApplicationData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ApplicationData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ApplicationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.Link[] ManagedLinksField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsInheritedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwningRepositoryIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, EmitDefaultValue=false)]
        public string ApplicationId {
            get {
                return this.ApplicationIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ApplicationIdField, value) != true)) {
                    this.ApplicationIdField = value;
                    this.RaisePropertyChanged("ApplicationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public byte[] Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.Link[] ManagedLinks {
            get {
                return this.ManagedLinksField;
            }
            set {
                if ((object.ReferenceEquals(this.ManagedLinksField, value) != true)) {
                    this.ManagedLinksField = value;
                    this.RaisePropertyChanged("ManagedLinks");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string TypeId {
            get {
                return this.TypeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeIdField, value) != true)) {
                    this.TypeIdField = value;
                    this.RaisePropertyChanged("TypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public System.Nullable<bool> IsInherited {
            get {
                return this.IsInheritedField;
            }
            set {
                if ((this.IsInheritedField.Equals(value) != true)) {
                    this.IsInheritedField = value;
                    this.RaisePropertyChanged("IsInherited");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=5)]
        public string OwningRepositoryId {
            get {
                return this.OwningRepositoryIdField;
            }
            set {
                if ((object.ReferenceEquals(this.OwningRepositoryIdField, value) != true)) {
                    this.OwningRepositoryIdField = value;
                    this.RaisePropertyChanged("OwningRepositoryId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PredefinedBatchOperation", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum PredefinedBatchOperation : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CheckIn = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CheckOut = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Classify = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Copy = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Delete = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FinishActivity = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ForceFinishProcess = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Localize = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Move = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Publish = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ReClassify = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StartActivity = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnClassify = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnLocalize = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnPublish = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UndoCheckOut = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeleteTaxonomyNode = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SwitchUserEnabledState = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CopyToKeyword = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MoveToKeyword = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ReAssignActivity = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RestartActivity = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SuspendActivity = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ResumeActivity = 23,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SynchronizeWithSchemaAndUpdate = 24,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Promote = 25,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Demote = 26,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownByClient = -2147483648,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SearchQueryData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class SearchQueryData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToActivityDefinitionData ActivityDefinitionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToUserData AuthorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.ListBaseColumns> BaseColumnsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.BasedOnSchemaData[] BasedOnSchemasField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.SearchBlueprintStatus> BlueprintStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToRepositoryData FromRepositoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullTextQueryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDescriptionCaseSensitiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsPublishedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsTitleCaseSensitiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ItemType[] ItemTypesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Federation.Client.MyCoreService.LockType> LockTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToUserData LockUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ModifiedAfterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ModifiedBeforeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToProcessDefinitionData ProcessDefinitionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ResultLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToIdentifiableObjectData SearchInField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> SearchInSubtreeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToKeywordData[] UsedKeywordsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IncludeAllowedActionsColumnsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IncludeDescriptionColumnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IncludeLocationInfoColumnsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToActivityDefinitionData ActivityDefinition {
            get {
                return this.ActivityDefinitionField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityDefinitionField, value) != true)) {
                    this.ActivityDefinitionField = value;
                    this.RaisePropertyChanged("ActivityDefinition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToUserData Author {
            get {
                return this.AuthorField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorField, value) != true)) {
                    this.AuthorField = value;
                    this.RaisePropertyChanged("Author");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.ListBaseColumns> BaseColumns {
            get {
                return this.BaseColumnsField;
            }
            set {
                if ((this.BaseColumnsField.Equals(value) != true)) {
                    this.BaseColumnsField = value;
                    this.RaisePropertyChanged("BaseColumns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.BasedOnSchemaData[] BasedOnSchemas {
            get {
                return this.BasedOnSchemasField;
            }
            set {
                if ((object.ReferenceEquals(this.BasedOnSchemasField, value) != true)) {
                    this.BasedOnSchemasField = value;
                    this.RaisePropertyChanged("BasedOnSchemas");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.SearchBlueprintStatus> BlueprintStatus {
            get {
                return this.BlueprintStatusField;
            }
            set {
                if ((this.BlueprintStatusField.Equals(value) != true)) {
                    this.BlueprintStatusField = value;
                    this.RaisePropertyChanged("BlueprintStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToRepositoryData FromRepository {
            get {
                return this.FromRepositoryField;
            }
            set {
                if ((object.ReferenceEquals(this.FromRepositoryField, value) != true)) {
                    this.FromRepositoryField = value;
                    this.RaisePropertyChanged("FromRepository");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string FullTextQuery {
            get {
                return this.FullTextQueryField;
            }
            set {
                if ((object.ReferenceEquals(this.FullTextQueryField, value) != true)) {
                    this.FullTextQueryField = value;
                    this.RaisePropertyChanged("FullTextQuery");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public bool IsDescriptionCaseSensitive {
            get {
                return this.IsDescriptionCaseSensitiveField;
            }
            set {
                if ((this.IsDescriptionCaseSensitiveField.Equals(value) != true)) {
                    this.IsDescriptionCaseSensitiveField = value;
                    this.RaisePropertyChanged("IsDescriptionCaseSensitive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IsPublished {
            get {
                return this.IsPublishedField;
            }
            set {
                if ((this.IsPublishedField.Equals(value) != true)) {
                    this.IsPublishedField = value;
                    this.RaisePropertyChanged("IsPublished");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public bool IsTitleCaseSensitive {
            get {
                return this.IsTitleCaseSensitiveField;
            }
            set {
                if ((this.IsTitleCaseSensitiveField.Equals(value) != true)) {
                    this.IsTitleCaseSensitiveField = value;
                    this.RaisePropertyChanged("IsTitleCaseSensitive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ItemType[] ItemTypes {
            get {
                return this.ItemTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemTypesField, value) != true)) {
                    this.ItemTypesField = value;
                    this.RaisePropertyChanged("ItemTypes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<Federation.Client.MyCoreService.LockType> LockType {
            get {
                return this.LockTypeField;
            }
            set {
                if ((this.LockTypeField.Equals(value) != true)) {
                    this.LockTypeField = value;
                    this.RaisePropertyChanged("LockType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToUserData LockUser {
            get {
                return this.LockUserField;
            }
            set {
                if ((object.ReferenceEquals(this.LockUserField, value) != true)) {
                    this.LockUserField = value;
                    this.RaisePropertyChanged("LockUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.DateTime> ModifiedAfter {
            get {
                return this.ModifiedAfterField;
            }
            set {
                if ((this.ModifiedAfterField.Equals(value) != true)) {
                    this.ModifiedAfterField = value;
                    this.RaisePropertyChanged("ModifiedAfter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.DateTime> ModifiedBefore {
            get {
                return this.ModifiedBeforeField;
            }
            set {
                if ((this.ModifiedBeforeField.Equals(value) != true)) {
                    this.ModifiedBeforeField = value;
                    this.RaisePropertyChanged("ModifiedBefore");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToProcessDefinitionData ProcessDefinition {
            get {
                return this.ProcessDefinitionField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessDefinitionField, value) != true)) {
                    this.ProcessDefinitionField = value;
                    this.RaisePropertyChanged("ProcessDefinition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<int> ResultLimit {
            get {
                return this.ResultLimitField;
            }
            set {
                if ((this.ResultLimitField.Equals(value) != true)) {
                    this.ResultLimitField = value;
                    this.RaisePropertyChanged("ResultLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToIdentifiableObjectData SearchIn {
            get {
                return this.SearchInField;
            }
            set {
                if ((object.ReferenceEquals(this.SearchInField, value) != true)) {
                    this.SearchInField = value;
                    this.RaisePropertyChanged("SearchIn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> SearchInSubtree {
            get {
                return this.SearchInSubtreeField;
            }
            set {
                if ((this.SearchInSubtreeField.Equals(value) != true)) {
                    this.SearchInSubtreeField = value;
                    this.RaisePropertyChanged("SearchInSubtree");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToKeywordData[] UsedKeywords {
            get {
                return this.UsedKeywordsField;
            }
            set {
                if ((object.ReferenceEquals(this.UsedKeywordsField, value) != true)) {
                    this.UsedKeywordsField = value;
                    this.RaisePropertyChanged("UsedKeywords");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=22)]
        public bool IncludeAllowedActionsColumns {
            get {
                return this.IncludeAllowedActionsColumnsField;
            }
            set {
                if ((this.IncludeAllowedActionsColumnsField.Equals(value) != true)) {
                    this.IncludeAllowedActionsColumnsField = value;
                    this.RaisePropertyChanged("IncludeAllowedActionsColumns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=23)]
        public bool IncludeDescriptionColumn {
            get {
                return this.IncludeDescriptionColumnField;
            }
            set {
                if ((this.IncludeDescriptionColumnField.Equals(value) != true)) {
                    this.IncludeDescriptionColumnField = value;
                    this.RaisePropertyChanged("IncludeDescriptionColumn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=24)]
        public bool IncludeLocationInfoColumns {
            get {
                return this.IncludeLocationInfoColumnsField;
            }
            set {
                if ((this.IncludeLocationInfoColumnsField.Equals(value) != true)) {
                    this.IncludeLocationInfoColumnsField = value;
                    this.RaisePropertyChanged("IncludeLocationInfoColumns");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BasedOnSchemaData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class BasedOnSchemaData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToSchemaData SchemaField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Field {
            get {
                return this.FieldField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldField, value) != true)) {
                    this.FieldField = value;
                    this.RaisePropertyChanged("Field");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string FieldValue {
            get {
                return this.FieldValueField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldValueField, value) != true)) {
                    this.FieldValueField = value;
                    this.RaisePropertyChanged("FieldValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToSchemaData Schema {
            get {
                return this.SchemaField;
            }
            set {
                if ((object.ReferenceEquals(this.SchemaField, value) != true)) {
                    this.SchemaField = value;
                    this.RaisePropertyChanged("Schema");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SearchBlueprintStatus", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum SearchBlueprintStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unspecified = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Local = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Localized = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Shared = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RenderedItemData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class RenderedItemData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.BinaryData[] BinariesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.RenderedItemData[] ChildRenderedItemsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CodePageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan ExecutionTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InstructionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRenderedCompletelyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MetadataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.RenderInstructionData RenderInstructionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.ResolvedItemData ResolvedItemField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.BinaryData[] Binaries {
            get {
                return this.BinariesField;
            }
            set {
                if ((object.ReferenceEquals(this.BinariesField, value) != true)) {
                    this.BinariesField = value;
                    this.RaisePropertyChanged("Binaries");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.RenderedItemData[] ChildRenderedItems {
            get {
                return this.ChildRenderedItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ChildRenderedItemsField, value) != true)) {
                    this.ChildRenderedItemsField = value;
                    this.RaisePropertyChanged("ChildRenderedItems");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public int CodePage {
            get {
                return this.CodePageField;
            }
            set {
                if ((this.CodePageField.Equals(value) != true)) {
                    this.CodePageField = value;
                    this.RaisePropertyChanged("CodePage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public byte[] Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.TimeSpan ExecutionTime {
            get {
                return this.ExecutionTimeField;
            }
            set {
                if ((this.ExecutionTimeField.Equals(value) != true)) {
                    this.ExecutionTimeField = value;
                    this.RaisePropertyChanged("ExecutionTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Instructions {
            get {
                return this.InstructionsField;
            }
            set {
                if ((object.ReferenceEquals(this.InstructionsField, value) != true)) {
                    this.InstructionsField = value;
                    this.RaisePropertyChanged("Instructions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public bool IsRenderedCompletely {
            get {
                return this.IsRenderedCompletelyField;
            }
            set {
                if ((this.IsRenderedCompletelyField.Equals(value) != true)) {
                    this.IsRenderedCompletelyField = value;
                    this.RaisePropertyChanged("IsRenderedCompletely");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Metadata {
            get {
                return this.MetadataField;
            }
            set {
                if ((object.ReferenceEquals(this.MetadataField, value) != true)) {
                    this.MetadataField = value;
                    this.RaisePropertyChanged("Metadata");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.RenderInstructionData RenderInstruction {
            get {
                return this.RenderInstructionField;
            }
            set {
                if ((object.ReferenceEquals(this.RenderInstructionField, value) != true)) {
                    this.RenderInstructionField = value;
                    this.RaisePropertyChanged("RenderInstruction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.ResolvedItemData ResolvedItem {
            get {
                return this.ResolvedItemField;
            }
            set {
                if ((object.ReferenceEquals(this.ResolvedItemField, value) != true)) {
                    this.ResolvedItemField = value;
                    this.RaisePropertyChanged("ResolvedItem");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BinaryData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class BinaryData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ComponentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FilePathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FilenameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MimeTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RelatedComponentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VariantIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string ComponentId {
            get {
                return this.ComponentIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ComponentIdField, value) != true)) {
                    this.ComponentIdField = value;
                    this.RaisePropertyChanged("ComponentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string FilePath {
            get {
                return this.FilePathField;
            }
            set {
                if ((object.ReferenceEquals(this.FilePathField, value) != true)) {
                    this.FilePathField = value;
                    this.RaisePropertyChanged("FilePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Filename {
            get {
                return this.FilenameField;
            }
            set {
                if ((object.ReferenceEquals(this.FilenameField, value) != true)) {
                    this.FilenameField = value;
                    this.RaisePropertyChanged("Filename");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string LocationId {
            get {
                return this.LocationIdField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationIdField, value) != true)) {
                    this.LocationIdField = value;
                    this.RaisePropertyChanged("LocationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string MimeType {
            get {
                return this.MimeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MimeTypeField, value) != true)) {
                    this.MimeTypeField = value;
                    this.RaisePropertyChanged("MimeType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Path {
            get {
                return this.PathField;
            }
            set {
                if ((object.ReferenceEquals(this.PathField, value) != true)) {
                    this.PathField = value;
                    this.RaisePropertyChanged("Path");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string RelatedComponentId {
            get {
                return this.RelatedComponentIdField;
            }
            set {
                if ((object.ReferenceEquals(this.RelatedComponentIdField, value) != true)) {
                    this.RelatedComponentIdField = value;
                    this.RaisePropertyChanged("RelatedComponentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Url {
            get {
                return this.UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlField, value) != true)) {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string VariantId {
            get {
                return this.VariantIdField;
            }
            set {
                if ((object.ReferenceEquals(this.VariantIdField, value) != true)) {
                    this.VariantIdField = value;
                    this.RaisePropertyChanged("VariantId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActionFlags", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ActionFlags : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.Actions ActionsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Federation.Client.MyCoreService.Actions Actions {
            get {
                return this.ActionsField;
            }
            set {
                if ((this.ActionsField.Equals(value) != true)) {
                    this.ActionsField = value;
                    this.RaisePropertyChanged("Actions");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="Actions", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum Actions : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CheckOut = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CheckIn = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UndoCheckOut = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HistoryList = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Rollback = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Localize = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unlocalize = 64,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Publish = 128,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnPublish = 256,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RePublish = 512,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Search = 1024,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Edit = 2048,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AssignActivity = 4096,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        View = 8192,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Delete = 16384,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Cut = 32768,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Copy = 65536,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Enable = 131072,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Disable = 262144,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PermissionManaged = 524288,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WorkflowManaged = 1048576,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BlueprintManaged = 2097152,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StartActivity = 4194304,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FinishActivity = 8388608,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RestartActivity = 16777216,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FinishProcess = 33554432,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Execute = 67108864,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Abort = 134217728,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Classification = 268435456,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AddItem = 536870912,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RemoveItem = 1073741824,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownByClient = -2147483648,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ArrayOfTcmUri", Namespace="http://www.sdltridion.com/ContentManager/R6", ItemName="TcmUri")]
    [System.SerializableAttribute()]
    public class ArrayOfTcmUri : System.Collections.Generic.List<string> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ApplicationDataDictionary", Namespace="http://www.sdltridion.com/ContentManager/R6", ItemName="Item", KeyName="SubjectId", ValueName="ApplicationData")]
    [System.SerializableAttribute()]
    public class ApplicationDataDictionary : System.Collections.Generic.Dictionary<string, Federation.Client.MyCoreService.ApplicationData[]> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="SecurityDescriptorDataDictionary", Namespace="http://www.sdltridion.com/ContentManager/R6", ItemName="Item", KeyName="SubjectId", ValueName="SecurityDescriptor")]
    [System.SerializableAttribute()]
    public class SecurityDescriptorDataDictionary : System.Collections.Generic.Dictionary<string, Federation.Client.MyCoreService.SecurityDescriptorData> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SecurityDescriptorData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class SecurityDescriptorData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.Permissions PermissionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.Rights RightsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.Permissions Permissions {
            get {
                return this.PermissionsField;
            }
            set {
                if ((this.PermissionsField.Equals(value) != true)) {
                    this.PermissionsField = value;
                    this.RaisePropertyChanged("Permissions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.Rights Rights {
            get {
                return this.RightsField;
            }
            set {
                if ((this.RightsField.Equals(value) != true)) {
                    this.RightsField = value;
                    this.RaisePropertyChanged("Rights");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PredefinedQueue", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum PredefinedQueue : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PublishQueue = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeployQueue = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SearchQueue = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WorkflowAgentQueue = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BatchQueue = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownByClient = -2147483648,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PurgeOldVersionsInstructionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class PurgeOldVersionsInstructionData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToIdentifiableObjectData[] ContainersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> KeepVersionsModifiedAfterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<uint> KeepVersionsWithinDaysBeforeLastCheckInField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<uint> MaxResolvedVersionedItemsCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> RecursiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<uint> VersionsToKeepField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToIdentifiableObjectData[] Containers {
            get {
                return this.ContainersField;
            }
            set {
                if ((object.ReferenceEquals(this.ContainersField, value) != true)) {
                    this.ContainersField = value;
                    this.RaisePropertyChanged("Containers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.DateTime> KeepVersionsModifiedAfter {
            get {
                return this.KeepVersionsModifiedAfterField;
            }
            set {
                if ((this.KeepVersionsModifiedAfterField.Equals(value) != true)) {
                    this.KeepVersionsModifiedAfterField = value;
                    this.RaisePropertyChanged("KeepVersionsModifiedAfter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<uint> KeepVersionsWithinDaysBeforeLastCheckIn {
            get {
                return this.KeepVersionsWithinDaysBeforeLastCheckInField;
            }
            set {
                if ((this.KeepVersionsWithinDaysBeforeLastCheckInField.Equals(value) != true)) {
                    this.KeepVersionsWithinDaysBeforeLastCheckInField = value;
                    this.RaisePropertyChanged("KeepVersionsWithinDaysBeforeLastCheckIn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<uint> MaxResolvedVersionedItemsCount {
            get {
                return this.MaxResolvedVersionedItemsCountField;
            }
            set {
                if ((this.MaxResolvedVersionedItemsCountField.Equals(value) != true)) {
                    this.MaxResolvedVersionedItemsCountField = value;
                    this.RaisePropertyChanged("MaxResolvedVersionedItemsCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> Recursive {
            get {
                return this.RecursiveField;
            }
            set {
                if ((this.RecursiveField.Equals(value) != true)) {
                    this.RecursiveField = value;
                    this.RaisePropertyChanged("Recursive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<uint> VersionsToKeep {
            get {
                return this.VersionsToKeepField;
            }
            set {
                if ((this.VersionsToKeepField.Equals(value) != true)) {
                    this.VersionsToKeepField = value;
                    this.RaisePropertyChanged("VersionsToKeep");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TridionEnumValue", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class TridionEnumValue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TridionLanguageInfo", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class TridionLanguageInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LanguageIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NativeNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public int LanguageId {
            get {
                return this.LanguageIdField;
            }
            set {
                if ((this.LanguageIdField.Equals(value) != true)) {
                    this.LanguageIdField = value;
                    this.RaisePropertyChanged("LanguageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string NativeName {
            get {
                return this.NativeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NativeNameField, value) != true)) {
                    this.NativeNameField = value;
                    this.RaisePropertyChanged("NativeName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkflowScriptType", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class WorkflowScriptType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StartWorkflowInstructionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class StartWorkflowInstructionData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActivityTitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToTrusteeData AssigneeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DueDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToProcessDefinitionData ProcessDefinitionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProcessInstanceTitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToIdentifiableObjectData[] SubjectsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToWorkflowTypeData WorkflowTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string ActivityTitle {
            get {
                return this.ActivityTitleField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityTitleField, value) != true)) {
                    this.ActivityTitleField = value;
                    this.RaisePropertyChanged("ActivityTitle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToTrusteeData Assignee {
            get {
                return this.AssigneeField;
            }
            set {
                if ((object.ReferenceEquals(this.AssigneeField, value) != true)) {
                    this.AssigneeField = value;
                    this.RaisePropertyChanged("Assignee");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.DateTime> DueDate {
            get {
                return this.DueDateField;
            }
            set {
                if ((this.DueDateField.Equals(value) != true)) {
                    this.DueDateField = value;
                    this.RaisePropertyChanged("DueDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToProcessDefinitionData ProcessDefinition {
            get {
                return this.ProcessDefinitionField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessDefinitionField, value) != true)) {
                    this.ProcessDefinitionField = value;
                    this.RaisePropertyChanged("ProcessDefinition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string ProcessInstanceTitle {
            get {
                return this.ProcessInstanceTitleField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessInstanceTitleField, value) != true)) {
                    this.ProcessInstanceTitleField = value;
                    this.RaisePropertyChanged("ProcessInstanceTitle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToIdentifiableObjectData[] Subjects {
            get {
                return this.SubjectsField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectsField, value) != true)) {
                    this.SubjectsField = value;
                    this.RaisePropertyChanged("Subjects");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToWorkflowTypeData WorkflowType {
            get {
                return this.WorkflowTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkflowTypeField, value) != true)) {
                    this.WorkflowTypeField = value;
                    this.RaisePropertyChanged("WorkflowType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessDefinitionType", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum ProcessDefinitionType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Editing = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Bundle = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownByClient = -2147483648,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ProcessDefinitionAssociationDictionary", Namespace="http://www.sdltridion.com/ContentManager/R6", ItemName="Item", KeyName="SubjectId", ValueName="ProcessDefinitionAssociation")]
    [System.SerializableAttribute()]
    public class ProcessDefinitionAssociationDictionary : System.Collections.Generic.Dictionary<string, Federation.Client.MyCoreService.LinkToProcessDefinitionData> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SynchronizationResult", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class SynchronizationResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.SynchronizationActionData[] SynchronizationActionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.IdentifiableObjectData SynchronizedItemField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Federation.Client.MyCoreService.SynchronizationActionData[] SynchronizationActions {
            get {
                return this.SynchronizationActionsField;
            }
            set {
                if ((object.ReferenceEquals(this.SynchronizationActionsField, value) != true)) {
                    this.SynchronizationActionsField = value;
                    this.RaisePropertyChanged("SynchronizationActions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Federation.Client.MyCoreService.IdentifiableObjectData SynchronizedItem {
            get {
                return this.SynchronizedItemField;
            }
            set {
                if ((object.ReferenceEquals(this.SynchronizedItemField, value) != true)) {
                    this.SynchronizedItemField = value;
                    this.RaisePropertyChanged("SynchronizedItem");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SynchronizationActionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class SynchronizationActionData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> FieldIndexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.SynchronizeFlags SynchronizationActionAppliedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string FieldDescription {
            get {
                return this.FieldDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldDescriptionField, value) != true)) {
                    this.FieldDescriptionField = value;
                    this.RaisePropertyChanged("FieldDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<int> FieldIndex {
            get {
                return this.FieldIndexField;
            }
            set {
                if ((this.FieldIndexField.Equals(value) != true)) {
                    this.FieldIndexField = value;
                    this.RaisePropertyChanged("FieldIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string FieldName {
            get {
                return this.FieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldNameField, value) != true)) {
                    this.FieldNameField = value;
                    this.RaisePropertyChanged("FieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.SynchronizeFlags SynchronizationActionApplied {
            get {
                return this.SynchronizationActionAppliedField;
            }
            set {
                if ((this.SynchronizationActionAppliedField.Equals(value) != true)) {
                    this.SynchronizationActionAppliedField = value;
                    this.RaisePropertyChanged("SynchronizationActionApplied");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PublishSourceData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class PublishSourceData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToPublicationData ContextPublicationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToTargetTypeData TargetTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToPublicationData ContextPublication {
            get {
                return this.ContextPublicationField;
            }
            set {
                if ((object.ReferenceEquals(this.ContextPublicationField, value) != true)) {
                    this.ContextPublicationField = value;
                    this.RaisePropertyChanged("ContextPublication");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToTargetTypeData TargetType {
            get {
                return this.TargetTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetTypeField, value) != true)) {
                    this.TargetTypeField = value;
                    this.RaisePropertyChanged("TargetType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResolveContainingPagesInstructionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class ResolveContainingPagesInstructionData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IncludeComponentMetadataLinksField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IncludeDynamicVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IncludePageMetadataLinksField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IncludeWorkflowField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> ResolvePublishedPagesOnlyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IncludeComponentMetadataLinks {
            get {
                return this.IncludeComponentMetadataLinksField;
            }
            set {
                if ((this.IncludeComponentMetadataLinksField.Equals(value) != true)) {
                    this.IncludeComponentMetadataLinksField = value;
                    this.RaisePropertyChanged("IncludeComponentMetadataLinks");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IncludeDynamicVersion {
            get {
                return this.IncludeDynamicVersionField;
            }
            set {
                if ((this.IncludeDynamicVersionField.Equals(value) != true)) {
                    this.IncludeDynamicVersionField = value;
                    this.RaisePropertyChanged("IncludeDynamicVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IncludePageMetadataLinks {
            get {
                return this.IncludePageMetadataLinksField;
            }
            set {
                if ((this.IncludePageMetadataLinksField.Equals(value) != true)) {
                    this.IncludePageMetadataLinksField = value;
                    this.RaisePropertyChanged("IncludePageMetadataLinks");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> IncludeWorkflow {
            get {
                return this.IncludeWorkflowField;
            }
            set {
                if ((this.IncludeWorkflowField.Equals(value) != true)) {
                    this.IncludeWorkflowField = value;
                    this.RaisePropertyChanged("IncludeWorkflow");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<bool> ResolvePublishedPagesOnly {
            get {
                return this.ResolvePublishedPagesOnlyField;
            }
            set {
                if ((this.ResolvePublishedPagesOnlyField.Equals(value) != true)) {
                    this.ResolvePublishedPagesOnlyField = value;
                    this.RaisePropertyChanged("ResolvePublishedPagesOnly");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ContainingPagesDictionary", Namespace="http://www.sdltridion.com/ContentManager/R6", ItemName="Item", KeyName="ResolvedPageData", ValueName="PublishInfoData")]
    [System.SerializableAttribute()]
    public class ContainingPagesDictionary : System.Collections.Generic.Dictionary<Federation.Client.MyCoreService.ResolvedItemData, Federation.Client.MyCoreService.PublishInfoData[]> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PurgeWorkflowHistoryInstructionData", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class PurgeWorkflowHistoryInstructionData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DeleteHistoryBeforeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Federation.Client.MyCoreService.LinkToPublicationData PublicationField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<System.DateTime> DeleteHistoryBefore {
            get {
                return this.DeleteHistoryBeforeField;
            }
            set {
                if ((this.DeleteHistoryBeforeField.Equals(value) != true)) {
                    this.DeleteHistoryBeforeField = value;
                    this.RaisePropertyChanged("DeleteHistoryBefore");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Federation.Client.MyCoreService.LinkToPublicationData Publication {
            get {
                return this.PublicationField;
            }
            set {
                if ((object.ReferenceEquals(this.PublicationField, value) != true)) {
                    this.PublicationField = value;
                    this.RaisePropertyChanged("Publication");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NotificationMessage", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    [System.SerializableAttribute()]
    public partial class NotificationMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] SubjectIdsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Action {
            get {
                return this.ActionField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionField, value) != true)) {
                    this.ActionField = value;
                    this.RaisePropertyChanged("Action");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Details {
            get {
                return this.DetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailsField, value) != true)) {
                    this.DetailsField = value;
                    this.RaisePropertyChanged("Details");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string[] SubjectIds {
            get {
                return this.SubjectIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectIdsField, value) != true)) {
                    this.SubjectIdsField = value;
                    this.RaisePropertyChanged("SubjectIds");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClaimData", Namespace="http://www.sdltridion.com/Security")]
    [System.SerializableAttribute()]
    public partial class ClaimData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="Privileges", Namespace="http://www.sdltridion.com/ContentManager/R6")]
    public enum Privileges : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysAdmin = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ReadOnly = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IsElevated = 65536,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.sdltridion.com/ContentManager/CoreService/201603", ConfigurationName="MyCoreService.ICoreService")]
    public interface ICoreService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetApiVe" +
            "rsion", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetApiVe" +
            "rsionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetApiVe" +
            "rsionCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string GetApiVersion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetApiVe" +
            "rsion", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetApiVe" +
            "rsionResponse")]
        System.Threading.Tasks.Task<string> GetApiVersionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetCurre" +
            "ntUser", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetCurre" +
            "ntUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetCurre" +
            "ntUserCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.AccessTokenData GetCurrentUser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetCurre" +
            "ntUser", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetCurre" +
            "ntUserResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.AccessTokenData> GetCurrentUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/IsExisti" +
            "ngObject", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/IsExisti" +
            "ngObjectResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/IsExisti" +
            "ngObjectCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        bool IsExistingObject(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/IsExisti" +
            "ngObject", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/IsExisti" +
            "ngObjectResponse")]
        System.Threading.Tasks.Task<bool> IsExistingObjectAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetTcmUr" +
            "i", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetTcmUr" +
            "iResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetTcmUr" +
            "iCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string GetTcmUri(string baseUri, string contextRepositoryUri, System.Nullable<uint> version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetTcmUr" +
            "i", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetTcmUr" +
            "iResponse")]
        System.Threading.Tasks.Task<string> GetTcmUriAsync(string baseUri, string contextRepositoryUri, System.Nullable<uint> version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/TryGetTc" +
            "mUri", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/TryGetTc" +
            "mUriResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/TryGetTc" +
            "mUriCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string TryGetTcmUri(string baseUri, string contextRepositoryUri, System.Nullable<uint> version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/TryGetTc" +
            "mUri", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/TryGetTc" +
            "mUriResponse")]
        System.Threading.Tasks.Task<string> TryGetTcmUriAsync(string baseUri, string contextRepositoryUri, System.Nullable<uint> version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Read", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadCore" +
            "ServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.IdentifiableObjectData Read(string id, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Read", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadResp" +
            "onse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData> ReadAsync(string id, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/TryRead", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/TryReadR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/TryReadC" +
            "oreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.IdentifiableObjectData TryRead(string id, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/TryRead", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/TryReadR" +
            "esponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData> TryReadAsync(string id, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/BulkRead" +
            "", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/BulkRead" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/BulkRead" +
            "CoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.ItemReadResultDictionary BulkRead(string[] ids, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/BulkRead" +
            "", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/BulkRead" +
            "Response")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ItemReadResultDictionary> BulkReadAsync(string[] ids, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadSche" +
            "maFields", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadSche" +
            "maFieldsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadSche" +
            "maFieldsCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.SchemaFieldsData ReadSchemaFields(string schemaId, bool expandEmbeddedFields, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadSche" +
            "maFields", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadSche" +
            "maFieldsResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.SchemaFieldsData> ReadSchemaFieldsAsync(string schemaId, bool expandEmbeddedFields, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertS" +
            "chemaFieldsToXsd", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertS" +
            "chemaFieldsToXsdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertS" +
            "chemaFieldsToXsdCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        System.Xml.Linq.XElement ConvertSchemaFieldsToXsd(Federation.Client.MyCoreService.SchemaFieldsData schemaFieldsData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertS" +
            "chemaFieldsToXsd", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertS" +
            "chemaFieldsToXsdResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> ConvertSchemaFieldsToXsdAsync(Federation.Client.MyCoreService.SchemaFieldsData schemaFieldsData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Save", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/SaveResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/SaveCore" +
            "ServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.IdentifiableObjectData Save(Federation.Client.MyCoreService.IdentifiableObjectData deltaData, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Save", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/SaveResp" +
            "onse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData> SaveAsync(Federation.Client.MyCoreService.IdentifiableObjectData deltaData, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Delete", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/DeleteRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/DeleteCo" +
            "reServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        void Delete(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Delete", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/DeleteRe" +
            "sponse")]
        System.Threading.Tasks.Task DeleteAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/DeleteTa" +
            "xonomyNode", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/DeleteTa" +
            "xonomyNodeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/DeleteTa" +
            "xonomyNodeCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        void DeleteTaxonomyNode(string id, Federation.Client.MyCoreService.DeleteTaxonomyNodeMode deleteTaxonomyNodeMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/DeleteTa" +
            "xonomyNode", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/DeleteTa" +
            "xonomyNodeResponse")]
        System.Threading.Tasks.Task DeleteTaxonomyNodeAsync(string id, Federation.Client.MyCoreService.DeleteTaxonomyNodeMode deleteTaxonomyNodeMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetDefau" +
            "ltData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetDefau" +
            "ltDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetDefau" +
            "ltDataCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.IdentifiableObjectData GetDefaultData(Federation.Client.MyCoreService.ItemType itemType, string containerId, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetDefau" +
            "ltData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetDefau" +
            "ltDataResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData> GetDefaultDataAsync(Federation.Client.MyCoreService.ItemType itemType, string containerId, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Move", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/MoveResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/MoveCore" +
            "ServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.RepositoryLocalObjectData Move(string id, string destinationId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Move", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/MoveResp" +
            "onse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.RepositoryLocalObjectData> MoveAsync(string id, string destinationId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Copy", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CopyResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CopyCore" +
            "ServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.RepositoryLocalObjectData Copy(string id, string destinationId, bool makeUnique, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Copy", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CopyResp" +
            "onse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.RepositoryLocalObjectData> CopyAsync(string id, string destinationId, bool makeUnique, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetInsta" +
            "nceData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetInsta" +
            "nceDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetInsta" +
            "nceDataCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.InstanceData GetInstanceData(string schemaId, string containerItemId, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetInsta" +
            "nceData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetInsta" +
            "nceDataResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.InstanceData> GetInstanceDataAsync(string schemaId, string containerItemId, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/TryCheck" +
            "Out", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/TryCheck" +
            "OutResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/TryCheck" +
            "OutCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.IdentifiableObjectData TryCheckOut(string id, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/TryCheck" +
            "Out", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/TryCheck" +
            "OutResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData> TryCheckOutAsync(string id, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CheckOut" +
            "", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CheckOut" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CheckOut" +
            "CoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.VersionedItemData CheckOut(string id, bool permanentLock, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CheckOut" +
            "", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CheckOut" +
            "Response")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.VersionedItemData> CheckOutAsync(string id, bool permanentLock, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CheckIn", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CheckInR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CheckInC" +
            "oreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.VersionedItemData CheckIn(string id, bool removePermanentLock, string userComment, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CheckIn", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CheckInR" +
            "esponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.VersionedItemData> CheckInAsync(string id, bool removePermanentLock, string userComment, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Update", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UpdateRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UpdateCo" +
            "reServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.IdentifiableObjectData Update(Federation.Client.MyCoreService.IdentifiableObjectData deltaData, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Update", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UpdateRe" +
            "sponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData> UpdateAsync(Federation.Client.MyCoreService.IdentifiableObjectData deltaData, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Create", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CreateRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CreateCo" +
            "reServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.IdentifiableObjectData Create(Federation.Client.MyCoreService.IdentifiableObjectData data, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Create", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CreateRe" +
            "sponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData> CreateAsync(Federation.Client.MyCoreService.IdentifiableObjectData data, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UndoChec" +
            "kOut", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UndoChec" +
            "kOutResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UndoChec" +
            "kOutCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.VersionedItemData UndoCheckOut(string id, bool permanentLock, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UndoChec" +
            "kOut", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UndoChec" +
            "kOutResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.VersionedItemData> UndoCheckOutAsync(string id, bool permanentLock, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Rollback" +
            "", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Rollback" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Rollback" +
            "CoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.VersionedItemData Rollback(string id, bool deleteVersions, string comment, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Rollback" +
            "", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Rollback" +
            "Response")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.VersionedItemData> RollbackAsync(string id, bool deleteVersions, string comment, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Localize" +
            "", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Localize" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Localize" +
            "CoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.RepositoryLocalObjectData Localize(string id, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Localize" +
            "", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Localize" +
            "Response")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.RepositoryLocalObjectData> LocalizeAsync(string id, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnLocali" +
            "ze", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnLocali" +
            "zeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnLocali" +
            "zeCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.RepositoryLocalObjectData UnLocalize(string id, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnLocali" +
            "ze", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnLocali" +
            "zeResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.RepositoryLocalObjectData> UnLocalizeAsync(string id, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Promote", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PromoteR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PromoteC" +
            "oreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.OperationResultDataOfRepositoryLocalObjectData Promote(string id, string destinationRepositoryId, Federation.Client.MyCoreService.OperationInstruction instruction, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Promote", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PromoteR" +
            "esponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.OperationResultDataOfRepositoryLocalObjectData> PromoteAsync(string id, string destinationRepositoryId, Federation.Client.MyCoreService.OperationInstruction instruction, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Demote", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/DemoteRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/DemoteCo" +
            "reServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.OperationResultDataOfRepositoryLocalObjectData Demote(string id, string destinationRepositoryId, Federation.Client.MyCoreService.OperationInstruction instruction, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Demote", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/DemoteRe" +
            "sponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.OperationResultDataOfRepositoryLocalObjectData> DemoteAsync(string id, string destinationRepositoryId, Federation.Client.MyCoreService.OperationInstruction instruction, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListT" +
            "emplateTypes", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListT" +
            "emplateTypesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListT" +
            "emplateTypesCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.TemplateType[] GetListTemplateTypes(System.Nullable<Federation.Client.MyCoreService.ItemType> itemType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListT" +
            "emplateTypes", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListT" +
            "emplateTypesResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.TemplateType[]> GetListTemplateTypesAsync(System.Nullable<Federation.Client.MyCoreService.ItemType> itemType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListP" +
            "ublicationTypes", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListP" +
            "ublicationTypesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListP" +
            "ublicationTypesCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.PublicationType[] GetListPublicationTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListP" +
            "ublicationTypes", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListP" +
            "ublicationTypesResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.PublicationType[]> GetListPublicationTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mWideListXml", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mWideListXmlResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mWideListXmlCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        System.Xml.Linq.XElement GetSystemWideListXml(Federation.Client.MyCoreService.SystemWideListFilterData filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mWideListXml", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mWideListXmlResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetSystemWideListXmlAsync(Federation.Client.MyCoreService.SystemWideListFilterData filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mWideList", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mWideListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mWideListCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.IdentifiableObjectData[] GetSystemWideList(Federation.Client.MyCoreService.SystemWideListFilterData filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mWideList", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mWideListResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData[]> GetSystemWideListAsync(Federation.Client.MyCoreService.SystemWideListFilterData filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListX" +
            "ml", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListX" +
            "mlResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListX" +
            "mlCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        System.Xml.Linq.XElement GetListXml(string id, Federation.Client.MyCoreService.SubjectRelatedListFilterData filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListX" +
            "ml", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListX" +
            "mlResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetListXmlAsync(string id, Federation.Client.MyCoreService.SubjectRelatedListFilterData filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetList", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListC" +
            "oreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.IdentifiableObjectData[] GetList(string id, Federation.Client.MyCoreService.SubjectRelatedListFilterData filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetList", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListR" +
            "esponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData[]> GetListAsync(string id, Federation.Client.MyCoreService.SubjectRelatedListFilterData filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceNames", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceNamesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceNamesCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string[] GetListDirectoryServiceNames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceNames", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceNamesResponse")]
        System.Threading.Tasks.Task<string[]> GetListDirectoryServiceNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListW" +
            "indowsDomainUsers", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListW" +
            "indowsDomainUsersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListW" +
            "indowsDomainUsersCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.WindowsUser[] GetListWindowsDomainUsers(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListW" +
            "indowsDomainUsers", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListW" +
            "indowsDomainUsersResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.WindowsUser[]> GetListWindowsDomainUsersAsync(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceAllUsers", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceAllUsersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceAllUsersCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.DirectoryServiceUser[] GetListDirectoryServiceAllUsers(string directoryServiceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceAllUsers", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceAllUsersResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.DirectoryServiceUser[]> GetListDirectoryServiceAllUsersAsync(string directoryServiceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceGroupMembers", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceGroupMembersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceGroupMembersCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.DirectoryServiceUser[] GetListDirectoryServiceGroupMembers(string directoryServiceName, string groupDN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceGroupMembers", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceGroupMembersResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.DirectoryServiceUser[]> GetListDirectoryServiceGroupMembersAsync(string directoryServiceName, string groupDN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceUsers", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceUsersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceUsersCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.DirectoryServiceUser[] GetListDirectoryServiceUsers(string directoryServiceName, Federation.Client.MyCoreService.DirectoryUsersFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceUsers", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceUsersResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.DirectoryServiceUser[]> GetListDirectoryServiceUsersAsync(string directoryServiceName, Federation.Client.MyCoreService.DirectoryUsersFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Classify" +
            "", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Classify" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Classify" +
            "CoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.ClassificationInfoData Classify(string id, string[] keywordIds, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Classify" +
            "", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Classify" +
            "Response")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ClassificationInfoData> ClassifyAsync(string id, string[] keywordIds, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnClassi" +
            "fy", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnClassi" +
            "fyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnClassi" +
            "fyCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.ClassificationInfoData UnClassify(string id, string[] keywordIds, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnClassi" +
            "fy", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnClassi" +
            "fyResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ClassificationInfoData> UnClassifyAsync(string id, string[] keywordIds, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReClassi" +
            "fy", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReClassi" +
            "fyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReClassi" +
            "fyCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.ClassificationInfoData ReClassify(string id, string[] keywordIdsToRemove, string[] keywordIdsToAdd, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReClassi" +
            "fy", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReClassi" +
            "fyResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ClassificationInfoData> ReClassifyAsync(string id, string[] keywordIdsToRemove, string[] keywordIdsToAdd, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/StartAct" +
            "ivity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/StartAct" +
            "ivityResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/StartAct" +
            "ivityCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.ActivityInstanceData StartActivity(string activityInstanceId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/StartAct" +
            "ivity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/StartAct" +
            "ivityResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ActivityInstanceData> StartActivityAsync(string activityInstanceId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/SuspendA" +
            "ctivity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/SuspendA" +
            "ctivityResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/SuspendA" +
            "ctivityCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.ActivityInstanceData SuspendActivity(string activityInstanceId, string reason, System.Nullable<System.DateTime> resumeAt, string resumeBookmark, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/SuspendA" +
            "ctivity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/SuspendA" +
            "ctivityResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ActivityInstanceData> SuspendActivityAsync(string activityInstanceId, string reason, System.Nullable<System.DateTime> resumeAt, string resumeBookmark, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RestartA" +
            "ctivity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RestartA" +
            "ctivityResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RestartA" +
            "ctivityCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.ActivityInstanceData RestartActivity(string activityInstanceId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RestartA" +
            "ctivity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RestartA" +
            "ctivityResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ActivityInstanceData> RestartActivityAsync(string activityInstanceId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReAssign" +
            "Activity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReAssign" +
            "ActivityResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReAssign" +
            "ActivityCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.ActivityInstanceData ReAssignActivity(string activityInstanceId, string newAssigneeId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReAssign" +
            "Activity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReAssign" +
            "ActivityResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ActivityInstanceData> ReAssignActivityAsync(string activityInstanceId, string newAssigneeId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/FinishAc" +
            "tivity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/FinishAc" +
            "tivityResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/FinishAc" +
            "tivityCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.ActivityInstanceData FinishActivity(string activityInstanceId, Federation.Client.MyCoreService.ActivityFinishData activityFinishData, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/FinishAc" +
            "tivity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/FinishAc" +
            "tivityResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ActivityInstanceData> FinishActivityAsync(string activityInstanceId, Federation.Client.MyCoreService.ActivityFinishData activityFinishData, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ForceFin" +
            "ishProcess", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ForceFin" +
            "ishProcessResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ForceFin" +
            "ishProcessCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.ProcessHistoryData ForceFinishProcess(string processInstanceId, string approvalStatusId, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ForceFin" +
            "ishProcess", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ForceFin" +
            "ishProcessResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ProcessHistoryData> ForceFinishProcessAsync(string processInstanceId, string approvalStatusId, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResumeAc" +
            "tivity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResumeAc" +
            "tivityResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResumeAc" +
            "tivityCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.ActivityInstanceData ResumeActivity(string activityInstanceId, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResumeAc" +
            "tivity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResumeAc" +
            "tivityResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ActivityInstanceData> ResumeActivityAsync(string activityInstanceId, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListQ" +
            "ueueMessages", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListQ" +
            "ueueMessagesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListQ" +
            "ueueMessagesCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.QueueMessageData[] GetListQueueMessages(int queueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListQ" +
            "ueueMessages", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListQ" +
            "ueueMessagesResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.QueueMessageData[]> GetListQueueMessagesAsync(int queueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeQue" +
            "ue", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeQue" +
            "ueResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeQue" +
            "ueCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        void PurgeQueue(int queueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeQue" +
            "ue", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeQue" +
            "ueResponse")]
        System.Threading.Tasks.Task PurgeQueueAsync(int queueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListQ" +
            "ueues", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListQ" +
            "ueuesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListQ" +
            "ueuesCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.QueueData[] GetListQueues();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListQ" +
            "ueues", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListQ" +
            "ueuesResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.QueueData[]> GetListQueuesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadAppl" +
            "icationData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadAppl" +
            "icationDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadAppl" +
            "icationDataCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.ApplicationData ReadApplicationData(string subjectId, string applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadAppl" +
            "icationData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadAppl" +
            "icationDataResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ApplicationData> ReadApplicationDataAsync(string subjectId, string applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadAllA" +
            "pplicationData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadAllA" +
            "pplicationDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadAllA" +
            "pplicationDataCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.ApplicationData[] ReadAllApplicationData(string subjectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadAllA" +
            "pplicationData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadAllA" +
            "pplicationDataResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ApplicationData[]> ReadAllApplicationDataAsync(string subjectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/SaveAppl" +
            "icationData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/SaveAppl" +
            "icationDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/SaveAppl" +
            "icationDataCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        void SaveApplicationData(string subjectId, Federation.Client.MyCoreService.ApplicationData[] applicationData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/SaveAppl" +
            "icationData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/SaveAppl" +
            "icationDataResponse")]
        System.Threading.Tasks.Task SaveApplicationDataAsync(string subjectId, Federation.Client.MyCoreService.ApplicationData[] applicationData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/DeleteAp" +
            "plicationData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/DeleteAp" +
            "plicationDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/DeleteAp" +
            "plicationDataCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        void DeleteApplicationData(string subjectId, string applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/DeleteAp" +
            "plicationData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/DeleteAp" +
            "plicationDataResponse")]
        System.Threading.Tasks.Task DeleteApplicationDataAsync(string subjectId, string applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetAppli" +
            "cationIds", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetAppli" +
            "cationIdsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetAppli" +
            "cationIdsCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string[] GetApplicationIds();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetAppli" +
            "cationIds", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetAppli" +
            "cationIdsResponse")]
        System.Threading.Tasks.Task<string[]> GetApplicationIdsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeApp" +
            "licationData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeApp" +
            "licationDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeApp" +
            "licationDataCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        void PurgeApplicationData(string applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeApp" +
            "licationData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeApp" +
            "licationDataResponse")]
        System.Threading.Tasks.Task PurgeApplicationDataAsync(string applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ParsePre" +
            "definedBatchOperation", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ParsePre" +
            "definedBatchOperationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ParsePre" +
            "definedBatchOperationCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        System.Nullable<Federation.Client.MyCoreService.PredefinedBatchOperation> ParsePredefinedBatchOperation(string operation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ParsePre" +
            "definedBatchOperation", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ParsePre" +
            "definedBatchOperationResponse")]
        System.Threading.Tasks.Task<System.Nullable<Federation.Client.MyCoreService.PredefinedBatchOperation>> ParsePredefinedBatchOperationAsync(string operation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetPrede" +
            "finedBatchOperationName", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetPrede" +
            "finedBatchOperationNameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetPrede" +
            "finedBatchOperationNameCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string GetPredefinedBatchOperationName(Federation.Client.MyCoreService.PredefinedBatchOperation operation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetPrede" +
            "finedBatchOperationName", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetPrede" +
            "finedBatchOperationNameResponse")]
        System.Threading.Tasks.Task<string> GetPredefinedBatchOperationNameAsync(Federation.Client.MyCoreService.PredefinedBatchOperation operation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResolveI" +
            "tems", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResolveI" +
            "temsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResolveI" +
            "temsCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.PublishContextData[] ResolveItems(string[] ids, Federation.Client.MyCoreService.ResolveInstructionData resolveInstruction, string[] targetIdsOrPurposes, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResolveI" +
            "tems", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResolveI" +
            "temsResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.PublishContextData[]> ResolveItemsAsync(string[] ids, Federation.Client.MyCoreService.ResolveInstructionData resolveInstruction, string[] targetIdsOrPurposes, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsXml", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsXmlResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsXmlCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        System.Xml.Linq.XElement GetSearchResultsXml(Federation.Client.MyCoreService.SearchQueryData filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsXml", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsXmlResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetSearchResultsXmlAsync(Federation.Client.MyCoreService.SearchQueryData filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsXmlPaged", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsXmlPagedResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsXmlPagedCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        System.Xml.Linq.XElement GetSearchResultsXmlPaged(Federation.Client.MyCoreService.SearchQueryData filter, int startRowIndex, int maxRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsXmlPaged", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsXmlPagedResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetSearchResultsXmlPagedAsync(Federation.Client.MyCoreService.SearchQueryData filter, int startRowIndex, int maxRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResults", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.IdentifiableObjectData[] GetSearchResults(Federation.Client.MyCoreService.SearchQueryData filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResults", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData[]> GetSearchResultsAsync(Federation.Client.MyCoreService.SearchQueryData filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsPaged", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsPagedResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsPagedCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.IdentifiableObjectData[] GetSearchResultsPaged(Federation.Client.MyCoreService.SearchQueryData filter, int startRowIndex, int maxRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsPaged", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsPagedResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData[]> GetSearchResultsPagedAsync(Federation.Client.MyCoreService.SearchQueryData filter, int startRowIndex, int maxRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RenderIt" +
            "em", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RenderIt" +
            "emResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RenderIt" +
            "emCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.RenderedItemData RenderItem(string itemId, string templateId, Federation.Client.MyCoreService.PublishInstructionData publishInstruction, string publicationTargetIdOrPurpose);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RenderIt" +
            "em", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RenderIt" +
            "emResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.RenderedItemData> RenderItemAsync(string itemId, string templateId, Federation.Client.MyCoreService.PublishInstructionData publishInstruction, string publicationTargetIdOrPurpose);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PreviewI" +
            "tem", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PreviewI" +
            "temResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PreviewI" +
            "temCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.RenderedItemData PreviewItem(Federation.Client.MyCoreService.RepositoryLocalObjectData itemData, Federation.Client.MyCoreService.TemplateData templateData, Federation.Client.MyCoreService.PublishInstructionData publishInstruction, string publicationTargetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PreviewI" +
            "tem", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PreviewI" +
            "temResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.RenderedItemData> PreviewItemAsync(Federation.Client.MyCoreService.RepositoryLocalObjectData itemData, Federation.Client.MyCoreService.TemplateData templateData, Federation.Client.MyCoreService.PublishInstructionData publishInstruction, string publicationTargetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Publish", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PublishR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PublishC" +
            "oreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.PublishTransactionData[] Publish(string[] ids, Federation.Client.MyCoreService.PublishInstructionData publishInstruction, string[] targetIdsOrPurposes, System.Nullable<Federation.Client.MyCoreService.PublishPriority> priority, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Publish", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PublishR" +
            "esponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.PublishTransactionData[]> PublishAsync(string[] ids, Federation.Client.MyCoreService.PublishInstructionData publishInstruction, string[] targetIdsOrPurposes, System.Nullable<Federation.Client.MyCoreService.PublishPriority> priority, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnPublis" +
            "h", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnPublis" +
            "hResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnPublis" +
            "hCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.PublishTransactionData[] UnPublish(string[] ids, Federation.Client.MyCoreService.UnPublishInstructionData unPublishInstruction, string[] targetIdsOrPurposes, System.Nullable<Federation.Client.MyCoreService.PublishPriority> priority, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnPublis" +
            "h", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnPublis" +
            "hResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.PublishTransactionData[]> UnPublishAsync(string[] ids, Federation.Client.MyCoreService.UnPublishInstructionData unPublishInstruction, string[] targetIdsOrPurposes, System.Nullable<Federation.Client.MyCoreService.PublishPriority> priority, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/IsPublis" +
            "hed", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/IsPublis" +
            "hedResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/IsPublis" +
            "hedCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        bool IsPublished(string itemId, string publishingTargetIdOrPurpose, bool isPublishedInContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/IsPublis" +
            "hed", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/IsPublis" +
            "hedResponse")]
        System.Threading.Tasks.Task<bool> IsPublishedAsync(string itemId, string publishingTargetIdOrPurpose, bool isPublishedInContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetWorkI" +
            "temSnapshot", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetWorkI" +
            "temSnapshotResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetWorkI" +
            "temSnapshotCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.RenderedItemData GetWorkItemSnapshot(string workItemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetWorkI" +
            "temSnapshot", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetWorkI" +
            "temSnapshotResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.RenderedItemData> GetWorkItemSnapshotAsync(string workItemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListP" +
            "ublishInfo", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListP" +
            "ublishInfoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListP" +
            "ublishInfoCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.PublishInfoData[] GetListPublishInfo(string itemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListP" +
            "ublishInfo", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListP" +
            "ublishInfoResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.PublishInfoData[]> GetListPublishInfoAsync(string itemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CastActi" +
            "ons", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CastActi" +
            "onsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CastActi" +
            "onsCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.ActionFlags CastActions(int numericActions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CastActi" +
            "ons", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CastActi" +
            "onsResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ActionFlags> CastActionsAsync(int numericActions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Validate" +
            "Xml", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Validate" +
            "XmlResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Validate" +
            "XmlCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        void ValidateXml(Federation.Client.MyCoreService.IdentifiableObjectData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Validate" +
            "Xml", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Validate" +
            "XmlResponse")]
        System.Threading.Tasks.Task ValidateXmlAsync(Federation.Client.MyCoreService.IdentifiableObjectData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/IsValidT" +
            "ridionWebSchemaXml", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/IsValidT" +
            "ridionWebSchemaXmlResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/IsValidT" +
            "ridionWebSchemaXmlCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        bool IsValidTridionWebSchemaXml(Federation.Client.MyCoreService.SchemaData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/IsValidT" +
            "ridionWebSchemaXml", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/IsValidT" +
            "ridionWebSchemaXmlResponse")]
        System.Threading.Tasks.Task<bool> IsValidTridionWebSchemaXmlAsync(Federation.Client.MyCoreService.SchemaData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSubje" +
            "ctIdsWithApplicationData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSubje" +
            "ctIdsWithApplicationDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSubje" +
            "ctIdsWithApplicationDataCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.ArrayOfTcmUri GetSubjectIdsWithApplicationData(string applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSubje" +
            "ctIdsWithApplicationData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSubje" +
            "ctIdsWithApplicationDataResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ArrayOfTcmUri> GetSubjectIdsWithApplicationDataAsync(string applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadAppl" +
            "icationDataForSubjectsIds", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadAppl" +
            "icationDataForSubjectsIdsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadAppl" +
            "icationDataForSubjectsIdsCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.ApplicationDataDictionary ReadApplicationDataForSubjectsIds(string[] subjectIds, string[] applicationIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadAppl" +
            "icationDataForSubjectsIds", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadAppl" +
            "icationDataForSubjectsIdsResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ApplicationDataDictionary> ReadApplicationDataForSubjectsIdsAsync(string[] subjectIds, string[] applicationIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSecur" +
            "ityDescriptorsForSubjectsIds", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSecur" +
            "ityDescriptorsForSubjectsIdsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSecur" +
            "ityDescriptorsForSubjectsIdsCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.SecurityDescriptorDataDictionary GetSecurityDescriptorsForSubjectsIds(string[] subjectIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSecur" +
            "ityDescriptorsForSubjectsIds", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSecur" +
            "ityDescriptorsForSubjectsIdsResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.SecurityDescriptorDataDictionary> GetSecurityDescriptorsForSubjectsIdsAsync(string[] subjectIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetConte" +
            "ntSecurityDescriptorsForOrgItemIds", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetConte" +
            "ntSecurityDescriptorsForOrgItemIdsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetConte" +
            "ntSecurityDescriptorsForOrgItemIdsCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.SecurityDescriptorDataDictionary GetContentSecurityDescriptorsForOrgItemIds(string[] organizationalItemIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetConte" +
            "ntSecurityDescriptorsForOrgItemIds", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetConte" +
            "ntSecurityDescriptorsForOrgItemIdsResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.SecurityDescriptorDataDictionary> GetContentSecurityDescriptorsForOrgItemIdsAsync(string[] organizationalItemIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReIndex", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReIndexR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReIndexC" +
            "oreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        void ReIndex(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReIndex", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReIndexR" +
            "esponse")]
        System.Threading.Tasks.Task ReIndexAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CastPred" +
            "efinedQueue", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CastPred" +
            "efinedQueueResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CastPred" +
            "efinedQueueCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        System.Nullable<Federation.Client.MyCoreService.PredefinedQueue> CastPredefinedQueue(int queueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CastPred" +
            "efinedQueue", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CastPred" +
            "efinedQueueResponse")]
        System.Threading.Tasks.Task<System.Nullable<Federation.Client.MyCoreService.PredefinedQueue>> CastPredefinedQueueAsync(int queueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeOld" +
            "Versions", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeOld" +
            "VersionsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeOld" +
            "VersionsCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        int PurgeOldVersions(Federation.Client.MyCoreService.PurgeOldVersionsInstructionData instruction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeOld" +
            "Versions", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeOld" +
            "VersionsResponse")]
        System.Threading.Tasks.Task<int> PurgeOldVersionsAsync(Federation.Client.MyCoreService.PurgeOldVersionsInstructionData instruction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListE" +
            "xternalLinks", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListE" +
            "xternalLinksResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListE" +
            "xternalLinksCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        System.Xml.Linq.XElement GetListExternalLinks(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListE" +
            "xternalLinks", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListE" +
            "xternalLinksResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetListExternalLinksAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertX" +
            "mlToSearchQuery", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertX" +
            "mlToSearchQueryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertX" +
            "mlToSearchQueryCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.SearchQueryData ConvertXmlToSearchQuery(System.Xml.Linq.XElement searchQueryXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertX" +
            "mlToSearchQuery", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertX" +
            "mlToSearchQueryResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.SearchQueryData> ConvertXmlToSearchQueryAsync(System.Xml.Linq.XElement searchQueryXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertS" +
            "earchQueryToXml", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertS" +
            "earchQueryToXmlResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertS" +
            "earchQueryToXmlCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        System.Xml.Linq.XElement ConvertSearchQueryToXml(Federation.Client.MyCoreService.SearchQueryData searchQueryData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertS" +
            "earchQueryToXml", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertS" +
            "earchQueryToXmlResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> ConvertSearchQueryToXmlAsync(Federation.Client.MyCoreService.SearchQueryData searchQueryData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetVirtu" +
            "alFolderTypeSchema", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetVirtu" +
            "alFolderTypeSchemaResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetVirtu" +
            "alFolderTypeSchemaCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.SchemaData GetVirtualFolderTypeSchema(string namespaceUri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetVirtu" +
            "alFolderTypeSchema", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetVirtu" +
            "alFolderTypeSchemaResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.SchemaData> GetVirtualFolderTypeSchemaAsync(string namespaceUri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetEnumV" +
            "alues", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetEnumV" +
            "aluesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetEnumV" +
            "aluesCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.TridionEnumValue[] GetEnumValues(string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetEnumV" +
            "alues", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetEnumV" +
            "aluesResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.TridionEnumValue[]> GetEnumValuesAsync(string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResolveB" +
            "undleTypes", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResolveB" +
            "undleTypesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResolveB" +
            "undleTypesCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.BundleTypeData[] ResolveBundleTypes(string[] itemIds, bool pruneTree);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResolveB" +
            "undleTypes", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResolveB" +
            "undleTypesResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.BundleTypeData[]> ResolveBundleTypesAsync(string[] itemIds, bool pruneTree);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CopyToKe" +
            "yword", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CopyToKe" +
            "ywordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CopyToKe" +
            "ywordCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.KeywordData CopyToKeyword(string sourceKeywordId, string destinationId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CopyToKe" +
            "yword", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CopyToKe" +
            "ywordResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.KeywordData> CopyToKeywordAsync(string sourceKeywordId, string destinationId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/MoveToKe" +
            "yword", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/MoveToKe" +
            "ywordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/MoveToKe" +
            "ywordCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.KeywordData MoveToKeyword(string sourceKeywordId, string destinationId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/MoveToKe" +
            "yword", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/MoveToKe" +
            "ywordResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.KeywordData> MoveToKeywordAsync(string sourceKeywordId, string destinationId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetTridi" +
            "onLanguages", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetTridi" +
            "onLanguagesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetTridi" +
            "onLanguagesCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.TridionLanguageInfo[] GetTridionLanguages();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetTridi" +
            "onLanguages", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetTridi" +
            "onLanguagesResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.TridionLanguageInfo[]> GetTridionLanguagesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListW" +
            "orkflowScriptTypes", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListW" +
            "orkflowScriptTypesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListW" +
            "orkflowScriptTypesCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.WorkflowScriptType[] GetListWorkflowScriptTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListW" +
            "orkflowScriptTypes", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListW" +
            "orkflowScriptTypesResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.WorkflowScriptType[]> GetListWorkflowScriptTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/AddToWor" +
            "kflow", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/AddToWor" +
            "kflowResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/AddToWor" +
            "kflowCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.WorkItemData[] AddToWorkflow(string[] subjectIds, string activityInstanceId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/AddToWor" +
            "kflow", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/AddToWor" +
            "kflowResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.WorkItemData[]> AddToWorkflowAsync(string[] subjectIds, string activityInstanceId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RemoveFr" +
            "omWorkflow", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RemoveFr" +
            "omWorkflowResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RemoveFr" +
            "omWorkflowCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.WorkItemData[] RemoveFromWorkflow(string[] subjectIds, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RemoveFr" +
            "omWorkflow", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RemoveFr" +
            "omWorkflowResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.WorkItemData[]> RemoveFromWorkflowAsync(string[] subjectIds, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Lock", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/LockResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/LockCore" +
            "ServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.OrganizationalItemData Lock(string organizationalItemId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Lock", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/LockResp" +
            "onse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.OrganizationalItemData> LockAsync(string organizationalItemId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Unlock", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnlockRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnlockCo" +
            "reServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.OrganizationalItemData Unlock(string organizationalItemId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Unlock", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnlockRe" +
            "sponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.OrganizationalItemData> UnlockAsync(string organizationalItemId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/StartWor" +
            "kflow", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/StartWor" +
            "kflowResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/StartWor" +
            "kflowCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.ProcessInstanceData StartWorkflow(string repositoryId, Federation.Client.MyCoreService.StartWorkflowInstructionData instruction, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/StartWor" +
            "kflow", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/StartWor" +
            "kflowResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ProcessInstanceData> StartWorkflowAsync(string repositoryId, Federation.Client.MyCoreService.StartWorkflowInstructionData instruction, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetProce" +
            "ssDefinitionsForItems", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetProce" +
            "ssDefinitionsForItemsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetProce" +
            "ssDefinitionsForItemsCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.ProcessDefinitionAssociationDictionary GetProcessDefinitionsForItems(string[] itemIds, Federation.Client.MyCoreService.ProcessDefinitionType processDefinitionType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetProce" +
            "ssDefinitionsForItems", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetProce" +
            "ssDefinitionsForItemsResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ProcessDefinitionAssociationDictionary> GetProcessDefinitionsForItemsAsync(string[] itemIds, Federation.Client.MyCoreService.ProcessDefinitionType processDefinitionType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mXsd", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mXsdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mXsdCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string GetSystemXsd(string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mXsd", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mXsdResponse")]
        System.Threading.Tasks.Task<string> GetSystemXsdAsync(string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSchem" +
            "asByNamespaceUri", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSchem" +
            "asByNamespaceUriResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSchem" +
            "asByNamespaceUriCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.LinkToSchemaData[] GetSchemasByNamespaceUri(string repositoryId, string namespaceUri, string rootElementName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSchem" +
            "asByNamespaceUri", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSchem" +
            "asByNamespaceUriResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.LinkToSchemaData[]> GetSchemasByNamespaceUriAsync(string repositoryId, string namespaceUri, string rootElementName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Validate" +
            "", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Validate" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Validate" +
            "CoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.ValidationErrorData[] Validate(Federation.Client.MyCoreService.IdentifiableObjectData deltaData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Validate" +
            "", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Validate" +
            "Response")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ValidationErrorData[]> ValidateAsync(Federation.Client.MyCoreService.IdentifiableObjectData deltaData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetExter" +
            "nalBinaryContentData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetExter" +
            "nalBinaryContentDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetExter" +
            "nalBinaryContentDataCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.BinaryContentData GetExternalBinaryContentData(string uri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetExter" +
            "nalBinaryContentData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetExter" +
            "nalBinaryContentDataResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.BinaryContentData> GetExternalBinaryContentDataAsync(string uri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Synchron" +
            "izeWithSchema", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Synchron" +
            "izeWithSchemaResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Synchron" +
            "izeWithSchemaCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.SynchronizationResult SynchronizeWithSchema(Federation.Client.MyCoreService.IdentifiableObjectData dataObject, Federation.Client.MyCoreService.SynchronizeOptions synchronizeOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Synchron" +
            "izeWithSchema", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Synchron" +
            "izeWithSchemaResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.SynchronizationResult> SynchronizeWithSchemaAsync(Federation.Client.MyCoreService.IdentifiableObjectData dataObject, Federation.Client.MyCoreService.SynchronizeOptions synchronizeOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Synchron" +
            "izeWithSchemaAndUpdate", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Synchron" +
            "izeWithSchemaAndUpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Synchron" +
            "izeWithSchemaAndUpdateCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.SynchronizationResult SynchronizeWithSchemaAndUpdate(string itemId, Federation.Client.MyCoreService.SynchronizeOptions synchronizeOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Synchron" +
            "izeWithSchemaAndUpdate", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Synchron" +
            "izeWithSchemaAndUpdateResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.SynchronizationResult> SynchronizeWithSchemaAndUpdateAsync(string itemId, Federation.Client.MyCoreService.SynchronizeOptions synchronizeOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Decommis" +
            "sionPublicationTarget", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Decommis" +
            "sionPublicationTargetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Decommis" +
            "sionPublicationTargetCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        void DecommissionPublicationTarget(string publicationTargetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Decommis" +
            "sionPublicationTarget", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Decommis" +
            "sionPublicationTargetResponse")]
        System.Threading.Tasks.Task DecommissionPublicationTargetAsync(string publicationTargetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertX" +
            "sdToSchemaFields", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertX" +
            "sdToSchemaFieldsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertX" +
            "sdToSchemaFieldsCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.SchemaFieldsData ConvertXsdToSchemaFields(System.Xml.Linq.XElement xsd, Federation.Client.MyCoreService.SchemaPurpose purpose, string rootElementName, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertX" +
            "sdToSchemaFields", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertX" +
            "sdToSchemaFieldsResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.SchemaFieldsData> ConvertXsdToSchemaFieldsAsync(System.Xml.Linq.XElement xsd, Federation.Client.MyCoreService.SchemaPurpose purpose, string rootElementName, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetPubli" +
            "shUrl", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetPubli" +
            "shUrlResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetPubli" +
            "shUrlCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string GetPublishUrl(string id, string targetTypeIdOrPurpose);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetPubli" +
            "shUrl", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetPubli" +
            "shUrlResponse")]
        System.Threading.Tasks.Task<string> GetPublishUrlAsync(string id, string targetTypeIdOrPurpose);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetBusin" +
            "essProcessTypes", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetBusin" +
            "essProcessTypesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetBusin" +
            "essProcessTypesCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.LinkToBusinessProcessTypeData[] GetBusinessProcessTypes(string cdTopologyTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetBusin" +
            "essProcessTypes", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetBusin" +
            "essProcessTypesResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.LinkToBusinessProcessTypeData[]> GetBusinessProcessTypesAsync(string cdTopologyTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetPubli" +
            "shSourceByUrl", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetPubli" +
            "shSourceByUrlResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetPubli" +
            "shSourceByUrlCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.PublishSourceData GetPublishSourceByUrl(string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetPubli" +
            "shSourceByUrl", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetPubli" +
            "shSourceByUrlResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.PublishSourceData> GetPublishSourceByUrlAsync(string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RemovePu" +
            "blishStates", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RemovePu" +
            "blishStatesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RemovePu" +
            "blishStatesCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        void RemovePublishStates(string publicationId, string targetTypeIdOrPurpose);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RemovePu" +
            "blishStates", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RemovePu" +
            "blishStatesResponse")]
        System.Threading.Tasks.Task RemovePublishStatesAsync(string publicationId, string targetTypeIdOrPurpose);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResolveC" +
            "ontainingPages", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResolveC" +
            "ontainingPagesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResolveC" +
            "ontainingPagesCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.ContainingPagesDictionary ResolveContainingPages(string componentId, Federation.Client.MyCoreService.ResolveContainingPagesInstructionData instruction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResolveC" +
            "ontainingPages", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResolveC" +
            "ontainingPagesResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ContainingPagesDictionary> ResolveContainingPagesAsync(string componentId, Federation.Client.MyCoreService.ResolveContainingPagesInstructionData instruction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeWor" +
            "kflowHistory", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeWor" +
            "kflowHistoryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeWor" +
            "kflowHistoryCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        void PurgeWorkflowHistory(Federation.Client.MyCoreService.PurgeWorkflowHistoryInstructionData instruction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeWor" +
            "kflowHistory", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeWor" +
            "kflowHistoryResponse")]
        System.Threading.Tasks.Task PurgeWorkflowHistoryAsync(Federation.Client.MyCoreService.PurgeWorkflowHistoryInstructionData instruction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Broadcas" +
            "tNotification", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Broadcas" +
            "tNotificationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Broadcas" +
            "tNotificationCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        void BroadcastNotification(Federation.Client.MyCoreService.NotificationMessage notification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Broadcas" +
            "tNotification", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Broadcas" +
            "tNotificationResponse")]
        System.Threading.Tasks.Task BroadcastNotificationAsync(Federation.Client.MyCoreService.NotificationMessage notification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mPrivileges", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mPrivilegesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mPrivilegesCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.SystemPrivilege[] GetSystemPrivileges();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mPrivileges", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mPrivilegesResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.SystemPrivilege[]> GetSystemPrivilegesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICoreServiceChannel : Federation.Client.MyCoreService.ICoreService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CoreServiceClient : System.ServiceModel.ClientBase<Federation.Client.MyCoreService.ICoreService>, Federation.Client.MyCoreService.ICoreService {
        
        public CoreServiceClient() {
        }
        
        public CoreServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CoreServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CoreServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CoreServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetApiVersion() {
            return base.Channel.GetApiVersion();
        }
        
        public System.Threading.Tasks.Task<string> GetApiVersionAsync() {
            return base.Channel.GetApiVersionAsync();
        }
        
        public Federation.Client.MyCoreService.AccessTokenData GetCurrentUser() {
            return base.Channel.GetCurrentUser();
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.AccessTokenData> GetCurrentUserAsync() {
            return base.Channel.GetCurrentUserAsync();
        }
        
        public bool IsExistingObject(string id) {
            return base.Channel.IsExistingObject(id);
        }
        
        public System.Threading.Tasks.Task<bool> IsExistingObjectAsync(string id) {
            return base.Channel.IsExistingObjectAsync(id);
        }
        
        public string GetTcmUri(string baseUri, string contextRepositoryUri, System.Nullable<uint> version) {
            return base.Channel.GetTcmUri(baseUri, contextRepositoryUri, version);
        }
        
        public System.Threading.Tasks.Task<string> GetTcmUriAsync(string baseUri, string contextRepositoryUri, System.Nullable<uint> version) {
            return base.Channel.GetTcmUriAsync(baseUri, contextRepositoryUri, version);
        }
        
        public string TryGetTcmUri(string baseUri, string contextRepositoryUri, System.Nullable<uint> version) {
            return base.Channel.TryGetTcmUri(baseUri, contextRepositoryUri, version);
        }
        
        public System.Threading.Tasks.Task<string> TryGetTcmUriAsync(string baseUri, string contextRepositoryUri, System.Nullable<uint> version) {
            return base.Channel.TryGetTcmUriAsync(baseUri, contextRepositoryUri, version);
        }
        
        public Federation.Client.MyCoreService.IdentifiableObjectData Read(string id, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.Read(id, readOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData> ReadAsync(string id, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.ReadAsync(id, readOptions);
        }
        
        public Federation.Client.MyCoreService.IdentifiableObjectData TryRead(string id, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.TryRead(id, readOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData> TryReadAsync(string id, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.TryReadAsync(id, readOptions);
        }
        
        public Federation.Client.MyCoreService.ItemReadResultDictionary BulkRead(string[] ids, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.BulkRead(ids, readOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ItemReadResultDictionary> BulkReadAsync(string[] ids, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.BulkReadAsync(ids, readOptions);
        }
        
        public Federation.Client.MyCoreService.SchemaFieldsData ReadSchemaFields(string schemaId, bool expandEmbeddedFields, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.ReadSchemaFields(schemaId, expandEmbeddedFields, readOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.SchemaFieldsData> ReadSchemaFieldsAsync(string schemaId, bool expandEmbeddedFields, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.ReadSchemaFieldsAsync(schemaId, expandEmbeddedFields, readOptions);
        }
        
        public System.Xml.Linq.XElement ConvertSchemaFieldsToXsd(Federation.Client.MyCoreService.SchemaFieldsData schemaFieldsData) {
            return base.Channel.ConvertSchemaFieldsToXsd(schemaFieldsData);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> ConvertSchemaFieldsToXsdAsync(Federation.Client.MyCoreService.SchemaFieldsData schemaFieldsData) {
            return base.Channel.ConvertSchemaFieldsToXsdAsync(schemaFieldsData);
        }
        
        public Federation.Client.MyCoreService.IdentifiableObjectData Save(Federation.Client.MyCoreService.IdentifiableObjectData deltaData, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.Save(deltaData, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData> SaveAsync(Federation.Client.MyCoreService.IdentifiableObjectData deltaData, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.SaveAsync(deltaData, readBackOptions);
        }
        
        public void Delete(string id) {
            base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(string id) {
            return base.Channel.DeleteAsync(id);
        }
        
        public void DeleteTaxonomyNode(string id, Federation.Client.MyCoreService.DeleteTaxonomyNodeMode deleteTaxonomyNodeMode) {
            base.Channel.DeleteTaxonomyNode(id, deleteTaxonomyNodeMode);
        }
        
        public System.Threading.Tasks.Task DeleteTaxonomyNodeAsync(string id, Federation.Client.MyCoreService.DeleteTaxonomyNodeMode deleteTaxonomyNodeMode) {
            return base.Channel.DeleteTaxonomyNodeAsync(id, deleteTaxonomyNodeMode);
        }
        
        public Federation.Client.MyCoreService.IdentifiableObjectData GetDefaultData(Federation.Client.MyCoreService.ItemType itemType, string containerId, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.GetDefaultData(itemType, containerId, readOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData> GetDefaultDataAsync(Federation.Client.MyCoreService.ItemType itemType, string containerId, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.GetDefaultDataAsync(itemType, containerId, readOptions);
        }
        
        public Federation.Client.MyCoreService.RepositoryLocalObjectData Move(string id, string destinationId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.Move(id, destinationId, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.RepositoryLocalObjectData> MoveAsync(string id, string destinationId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.MoveAsync(id, destinationId, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.RepositoryLocalObjectData Copy(string id, string destinationId, bool makeUnique, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.Copy(id, destinationId, makeUnique, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.RepositoryLocalObjectData> CopyAsync(string id, string destinationId, bool makeUnique, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.CopyAsync(id, destinationId, makeUnique, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.InstanceData GetInstanceData(string schemaId, string containerItemId, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.GetInstanceData(schemaId, containerItemId, readOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.InstanceData> GetInstanceDataAsync(string schemaId, string containerItemId, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.GetInstanceDataAsync(schemaId, containerItemId, readOptions);
        }
        
        public Federation.Client.MyCoreService.IdentifiableObjectData TryCheckOut(string id, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.TryCheckOut(id, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData> TryCheckOutAsync(string id, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.TryCheckOutAsync(id, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.VersionedItemData CheckOut(string id, bool permanentLock, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.CheckOut(id, permanentLock, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.VersionedItemData> CheckOutAsync(string id, bool permanentLock, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.CheckOutAsync(id, permanentLock, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.VersionedItemData CheckIn(string id, bool removePermanentLock, string userComment, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.CheckIn(id, removePermanentLock, userComment, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.VersionedItemData> CheckInAsync(string id, bool removePermanentLock, string userComment, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.CheckInAsync(id, removePermanentLock, userComment, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.IdentifiableObjectData Update(Federation.Client.MyCoreService.IdentifiableObjectData deltaData, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.Update(deltaData, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData> UpdateAsync(Federation.Client.MyCoreService.IdentifiableObjectData deltaData, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.UpdateAsync(deltaData, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.IdentifiableObjectData Create(Federation.Client.MyCoreService.IdentifiableObjectData data, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.Create(data, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData> CreateAsync(Federation.Client.MyCoreService.IdentifiableObjectData data, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.CreateAsync(data, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.VersionedItemData UndoCheckOut(string id, bool permanentLock, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.UndoCheckOut(id, permanentLock, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.VersionedItemData> UndoCheckOutAsync(string id, bool permanentLock, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.UndoCheckOutAsync(id, permanentLock, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.VersionedItemData Rollback(string id, bool deleteVersions, string comment, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.Rollback(id, deleteVersions, comment, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.VersionedItemData> RollbackAsync(string id, bool deleteVersions, string comment, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.RollbackAsync(id, deleteVersions, comment, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.RepositoryLocalObjectData Localize(string id, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.Localize(id, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.RepositoryLocalObjectData> LocalizeAsync(string id, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.LocalizeAsync(id, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.RepositoryLocalObjectData UnLocalize(string id, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.UnLocalize(id, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.RepositoryLocalObjectData> UnLocalizeAsync(string id, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.UnLocalizeAsync(id, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.OperationResultDataOfRepositoryLocalObjectData Promote(string id, string destinationRepositoryId, Federation.Client.MyCoreService.OperationInstruction instruction, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.Promote(id, destinationRepositoryId, instruction, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.OperationResultDataOfRepositoryLocalObjectData> PromoteAsync(string id, string destinationRepositoryId, Federation.Client.MyCoreService.OperationInstruction instruction, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.PromoteAsync(id, destinationRepositoryId, instruction, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.OperationResultDataOfRepositoryLocalObjectData Demote(string id, string destinationRepositoryId, Federation.Client.MyCoreService.OperationInstruction instruction, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.Demote(id, destinationRepositoryId, instruction, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.OperationResultDataOfRepositoryLocalObjectData> DemoteAsync(string id, string destinationRepositoryId, Federation.Client.MyCoreService.OperationInstruction instruction, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.DemoteAsync(id, destinationRepositoryId, instruction, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.TemplateType[] GetListTemplateTypes(System.Nullable<Federation.Client.MyCoreService.ItemType> itemType) {
            return base.Channel.GetListTemplateTypes(itemType);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.TemplateType[]> GetListTemplateTypesAsync(System.Nullable<Federation.Client.MyCoreService.ItemType> itemType) {
            return base.Channel.GetListTemplateTypesAsync(itemType);
        }
        
        public Federation.Client.MyCoreService.PublicationType[] GetListPublicationTypes() {
            return base.Channel.GetListPublicationTypes();
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.PublicationType[]> GetListPublicationTypesAsync() {
            return base.Channel.GetListPublicationTypesAsync();
        }
        
        public System.Xml.Linq.XElement GetSystemWideListXml(Federation.Client.MyCoreService.SystemWideListFilterData filter) {
            return base.Channel.GetSystemWideListXml(filter);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetSystemWideListXmlAsync(Federation.Client.MyCoreService.SystemWideListFilterData filter) {
            return base.Channel.GetSystemWideListXmlAsync(filter);
        }
        
        public Federation.Client.MyCoreService.IdentifiableObjectData[] GetSystemWideList(Federation.Client.MyCoreService.SystemWideListFilterData filter) {
            return base.Channel.GetSystemWideList(filter);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData[]> GetSystemWideListAsync(Federation.Client.MyCoreService.SystemWideListFilterData filter) {
            return base.Channel.GetSystemWideListAsync(filter);
        }
        
        public System.Xml.Linq.XElement GetListXml(string id, Federation.Client.MyCoreService.SubjectRelatedListFilterData filter) {
            return base.Channel.GetListXml(id, filter);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetListXmlAsync(string id, Federation.Client.MyCoreService.SubjectRelatedListFilterData filter) {
            return base.Channel.GetListXmlAsync(id, filter);
        }
        
        public Federation.Client.MyCoreService.IdentifiableObjectData[] GetList(string id, Federation.Client.MyCoreService.SubjectRelatedListFilterData filter) {
            return base.Channel.GetList(id, filter);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData[]> GetListAsync(string id, Federation.Client.MyCoreService.SubjectRelatedListFilterData filter) {
            return base.Channel.GetListAsync(id, filter);
        }
        
        public string[] GetListDirectoryServiceNames() {
            return base.Channel.GetListDirectoryServiceNames();
        }
        
        public System.Threading.Tasks.Task<string[]> GetListDirectoryServiceNamesAsync() {
            return base.Channel.GetListDirectoryServiceNamesAsync();
        }
        
        public Federation.Client.MyCoreService.WindowsUser[] GetListWindowsDomainUsers(string domainName) {
            return base.Channel.GetListWindowsDomainUsers(domainName);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.WindowsUser[]> GetListWindowsDomainUsersAsync(string domainName) {
            return base.Channel.GetListWindowsDomainUsersAsync(domainName);
        }
        
        public Federation.Client.MyCoreService.DirectoryServiceUser[] GetListDirectoryServiceAllUsers(string directoryServiceName) {
            return base.Channel.GetListDirectoryServiceAllUsers(directoryServiceName);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.DirectoryServiceUser[]> GetListDirectoryServiceAllUsersAsync(string directoryServiceName) {
            return base.Channel.GetListDirectoryServiceAllUsersAsync(directoryServiceName);
        }
        
        public Federation.Client.MyCoreService.DirectoryServiceUser[] GetListDirectoryServiceGroupMembers(string directoryServiceName, string groupDN) {
            return base.Channel.GetListDirectoryServiceGroupMembers(directoryServiceName, groupDN);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.DirectoryServiceUser[]> GetListDirectoryServiceGroupMembersAsync(string directoryServiceName, string groupDN) {
            return base.Channel.GetListDirectoryServiceGroupMembersAsync(directoryServiceName, groupDN);
        }
        
        public Federation.Client.MyCoreService.DirectoryServiceUser[] GetListDirectoryServiceUsers(string directoryServiceName, Federation.Client.MyCoreService.DirectoryUsersFilter filter) {
            return base.Channel.GetListDirectoryServiceUsers(directoryServiceName, filter);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.DirectoryServiceUser[]> GetListDirectoryServiceUsersAsync(string directoryServiceName, Federation.Client.MyCoreService.DirectoryUsersFilter filter) {
            return base.Channel.GetListDirectoryServiceUsersAsync(directoryServiceName, filter);
        }
        
        public Federation.Client.MyCoreService.ClassificationInfoData Classify(string id, string[] keywordIds, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.Classify(id, keywordIds, readOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ClassificationInfoData> ClassifyAsync(string id, string[] keywordIds, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.ClassifyAsync(id, keywordIds, readOptions);
        }
        
        public Federation.Client.MyCoreService.ClassificationInfoData UnClassify(string id, string[] keywordIds, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.UnClassify(id, keywordIds, readOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ClassificationInfoData> UnClassifyAsync(string id, string[] keywordIds, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.UnClassifyAsync(id, keywordIds, readOptions);
        }
        
        public Federation.Client.MyCoreService.ClassificationInfoData ReClassify(string id, string[] keywordIdsToRemove, string[] keywordIdsToAdd, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.ReClassify(id, keywordIdsToRemove, keywordIdsToAdd, readOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ClassificationInfoData> ReClassifyAsync(string id, string[] keywordIdsToRemove, string[] keywordIdsToAdd, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.ReClassifyAsync(id, keywordIdsToRemove, keywordIdsToAdd, readOptions);
        }
        
        public Federation.Client.MyCoreService.ActivityInstanceData StartActivity(string activityInstanceId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.StartActivity(activityInstanceId, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ActivityInstanceData> StartActivityAsync(string activityInstanceId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.StartActivityAsync(activityInstanceId, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.ActivityInstanceData SuspendActivity(string activityInstanceId, string reason, System.Nullable<System.DateTime> resumeAt, string resumeBookmark, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.SuspendActivity(activityInstanceId, reason, resumeAt, resumeBookmark, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ActivityInstanceData> SuspendActivityAsync(string activityInstanceId, string reason, System.Nullable<System.DateTime> resumeAt, string resumeBookmark, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.SuspendActivityAsync(activityInstanceId, reason, resumeAt, resumeBookmark, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.ActivityInstanceData RestartActivity(string activityInstanceId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.RestartActivity(activityInstanceId, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ActivityInstanceData> RestartActivityAsync(string activityInstanceId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.RestartActivityAsync(activityInstanceId, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.ActivityInstanceData ReAssignActivity(string activityInstanceId, string newAssigneeId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.ReAssignActivity(activityInstanceId, newAssigneeId, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ActivityInstanceData> ReAssignActivityAsync(string activityInstanceId, string newAssigneeId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.ReAssignActivityAsync(activityInstanceId, newAssigneeId, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.ActivityInstanceData FinishActivity(string activityInstanceId, Federation.Client.MyCoreService.ActivityFinishData activityFinishData, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.FinishActivity(activityInstanceId, activityFinishData, readOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ActivityInstanceData> FinishActivityAsync(string activityInstanceId, Federation.Client.MyCoreService.ActivityFinishData activityFinishData, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.FinishActivityAsync(activityInstanceId, activityFinishData, readOptions);
        }
        
        public Federation.Client.MyCoreService.ProcessHistoryData ForceFinishProcess(string processInstanceId, string approvalStatusId, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.ForceFinishProcess(processInstanceId, approvalStatusId, readOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ProcessHistoryData> ForceFinishProcessAsync(string processInstanceId, string approvalStatusId, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.ForceFinishProcessAsync(processInstanceId, approvalStatusId, readOptions);
        }
        
        public Federation.Client.MyCoreService.ActivityInstanceData ResumeActivity(string activityInstanceId, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.ResumeActivity(activityInstanceId, readOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ActivityInstanceData> ResumeActivityAsync(string activityInstanceId, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.ResumeActivityAsync(activityInstanceId, readOptions);
        }
        
        public Federation.Client.MyCoreService.QueueMessageData[] GetListQueueMessages(int queueId) {
            return base.Channel.GetListQueueMessages(queueId);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.QueueMessageData[]> GetListQueueMessagesAsync(int queueId) {
            return base.Channel.GetListQueueMessagesAsync(queueId);
        }
        
        public void PurgeQueue(int queueId) {
            base.Channel.PurgeQueue(queueId);
        }
        
        public System.Threading.Tasks.Task PurgeQueueAsync(int queueId) {
            return base.Channel.PurgeQueueAsync(queueId);
        }
        
        public Federation.Client.MyCoreService.QueueData[] GetListQueues() {
            return base.Channel.GetListQueues();
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.QueueData[]> GetListQueuesAsync() {
            return base.Channel.GetListQueuesAsync();
        }
        
        public Federation.Client.MyCoreService.ApplicationData ReadApplicationData(string subjectId, string applicationId) {
            return base.Channel.ReadApplicationData(subjectId, applicationId);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ApplicationData> ReadApplicationDataAsync(string subjectId, string applicationId) {
            return base.Channel.ReadApplicationDataAsync(subjectId, applicationId);
        }
        
        public Federation.Client.MyCoreService.ApplicationData[] ReadAllApplicationData(string subjectId) {
            return base.Channel.ReadAllApplicationData(subjectId);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ApplicationData[]> ReadAllApplicationDataAsync(string subjectId) {
            return base.Channel.ReadAllApplicationDataAsync(subjectId);
        }
        
        public void SaveApplicationData(string subjectId, Federation.Client.MyCoreService.ApplicationData[] applicationData) {
            base.Channel.SaveApplicationData(subjectId, applicationData);
        }
        
        public System.Threading.Tasks.Task SaveApplicationDataAsync(string subjectId, Federation.Client.MyCoreService.ApplicationData[] applicationData) {
            return base.Channel.SaveApplicationDataAsync(subjectId, applicationData);
        }
        
        public void DeleteApplicationData(string subjectId, string applicationId) {
            base.Channel.DeleteApplicationData(subjectId, applicationId);
        }
        
        public System.Threading.Tasks.Task DeleteApplicationDataAsync(string subjectId, string applicationId) {
            return base.Channel.DeleteApplicationDataAsync(subjectId, applicationId);
        }
        
        public string[] GetApplicationIds() {
            return base.Channel.GetApplicationIds();
        }
        
        public System.Threading.Tasks.Task<string[]> GetApplicationIdsAsync() {
            return base.Channel.GetApplicationIdsAsync();
        }
        
        public void PurgeApplicationData(string applicationId) {
            base.Channel.PurgeApplicationData(applicationId);
        }
        
        public System.Threading.Tasks.Task PurgeApplicationDataAsync(string applicationId) {
            return base.Channel.PurgeApplicationDataAsync(applicationId);
        }
        
        public System.Nullable<Federation.Client.MyCoreService.PredefinedBatchOperation> ParsePredefinedBatchOperation(string operation) {
            return base.Channel.ParsePredefinedBatchOperation(operation);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<Federation.Client.MyCoreService.PredefinedBatchOperation>> ParsePredefinedBatchOperationAsync(string operation) {
            return base.Channel.ParsePredefinedBatchOperationAsync(operation);
        }
        
        public string GetPredefinedBatchOperationName(Federation.Client.MyCoreService.PredefinedBatchOperation operation) {
            return base.Channel.GetPredefinedBatchOperationName(operation);
        }
        
        public System.Threading.Tasks.Task<string> GetPredefinedBatchOperationNameAsync(Federation.Client.MyCoreService.PredefinedBatchOperation operation) {
            return base.Channel.GetPredefinedBatchOperationNameAsync(operation);
        }
        
        public Federation.Client.MyCoreService.PublishContextData[] ResolveItems(string[] ids, Federation.Client.MyCoreService.ResolveInstructionData resolveInstruction, string[] targetIdsOrPurposes, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.ResolveItems(ids, resolveInstruction, targetIdsOrPurposes, readOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.PublishContextData[]> ResolveItemsAsync(string[] ids, Federation.Client.MyCoreService.ResolveInstructionData resolveInstruction, string[] targetIdsOrPurposes, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.ResolveItemsAsync(ids, resolveInstruction, targetIdsOrPurposes, readOptions);
        }
        
        public System.Xml.Linq.XElement GetSearchResultsXml(Federation.Client.MyCoreService.SearchQueryData filter) {
            return base.Channel.GetSearchResultsXml(filter);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetSearchResultsXmlAsync(Federation.Client.MyCoreService.SearchQueryData filter) {
            return base.Channel.GetSearchResultsXmlAsync(filter);
        }
        
        public System.Xml.Linq.XElement GetSearchResultsXmlPaged(Federation.Client.MyCoreService.SearchQueryData filter, int startRowIndex, int maxRows) {
            return base.Channel.GetSearchResultsXmlPaged(filter, startRowIndex, maxRows);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetSearchResultsXmlPagedAsync(Federation.Client.MyCoreService.SearchQueryData filter, int startRowIndex, int maxRows) {
            return base.Channel.GetSearchResultsXmlPagedAsync(filter, startRowIndex, maxRows);
        }
        
        public Federation.Client.MyCoreService.IdentifiableObjectData[] GetSearchResults(Federation.Client.MyCoreService.SearchQueryData filter) {
            return base.Channel.GetSearchResults(filter);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData[]> GetSearchResultsAsync(Federation.Client.MyCoreService.SearchQueryData filter) {
            return base.Channel.GetSearchResultsAsync(filter);
        }
        
        public Federation.Client.MyCoreService.IdentifiableObjectData[] GetSearchResultsPaged(Federation.Client.MyCoreService.SearchQueryData filter, int startRowIndex, int maxRows) {
            return base.Channel.GetSearchResultsPaged(filter, startRowIndex, maxRows);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData[]> GetSearchResultsPagedAsync(Federation.Client.MyCoreService.SearchQueryData filter, int startRowIndex, int maxRows) {
            return base.Channel.GetSearchResultsPagedAsync(filter, startRowIndex, maxRows);
        }
        
        public Federation.Client.MyCoreService.RenderedItemData RenderItem(string itemId, string templateId, Federation.Client.MyCoreService.PublishInstructionData publishInstruction, string publicationTargetIdOrPurpose) {
            return base.Channel.RenderItem(itemId, templateId, publishInstruction, publicationTargetIdOrPurpose);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.RenderedItemData> RenderItemAsync(string itemId, string templateId, Federation.Client.MyCoreService.PublishInstructionData publishInstruction, string publicationTargetIdOrPurpose) {
            return base.Channel.RenderItemAsync(itemId, templateId, publishInstruction, publicationTargetIdOrPurpose);
        }
        
        public Federation.Client.MyCoreService.RenderedItemData PreviewItem(Federation.Client.MyCoreService.RepositoryLocalObjectData itemData, Federation.Client.MyCoreService.TemplateData templateData, Federation.Client.MyCoreService.PublishInstructionData publishInstruction, string publicationTargetId) {
            return base.Channel.PreviewItem(itemData, templateData, publishInstruction, publicationTargetId);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.RenderedItemData> PreviewItemAsync(Federation.Client.MyCoreService.RepositoryLocalObjectData itemData, Federation.Client.MyCoreService.TemplateData templateData, Federation.Client.MyCoreService.PublishInstructionData publishInstruction, string publicationTargetId) {
            return base.Channel.PreviewItemAsync(itemData, templateData, publishInstruction, publicationTargetId);
        }
        
        public Federation.Client.MyCoreService.PublishTransactionData[] Publish(string[] ids, Federation.Client.MyCoreService.PublishInstructionData publishInstruction, string[] targetIdsOrPurposes, System.Nullable<Federation.Client.MyCoreService.PublishPriority> priority, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.Publish(ids, publishInstruction, targetIdsOrPurposes, priority, readOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.PublishTransactionData[]> PublishAsync(string[] ids, Federation.Client.MyCoreService.PublishInstructionData publishInstruction, string[] targetIdsOrPurposes, System.Nullable<Federation.Client.MyCoreService.PublishPriority> priority, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.PublishAsync(ids, publishInstruction, targetIdsOrPurposes, priority, readOptions);
        }
        
        public Federation.Client.MyCoreService.PublishTransactionData[] UnPublish(string[] ids, Federation.Client.MyCoreService.UnPublishInstructionData unPublishInstruction, string[] targetIdsOrPurposes, System.Nullable<Federation.Client.MyCoreService.PublishPriority> priority, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.UnPublish(ids, unPublishInstruction, targetIdsOrPurposes, priority, readOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.PublishTransactionData[]> UnPublishAsync(string[] ids, Federation.Client.MyCoreService.UnPublishInstructionData unPublishInstruction, string[] targetIdsOrPurposes, System.Nullable<Federation.Client.MyCoreService.PublishPriority> priority, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.UnPublishAsync(ids, unPublishInstruction, targetIdsOrPurposes, priority, readOptions);
        }
        
        public bool IsPublished(string itemId, string publishingTargetIdOrPurpose, bool isPublishedInContext) {
            return base.Channel.IsPublished(itemId, publishingTargetIdOrPurpose, isPublishedInContext);
        }
        
        public System.Threading.Tasks.Task<bool> IsPublishedAsync(string itemId, string publishingTargetIdOrPurpose, bool isPublishedInContext) {
            return base.Channel.IsPublishedAsync(itemId, publishingTargetIdOrPurpose, isPublishedInContext);
        }
        
        public Federation.Client.MyCoreService.RenderedItemData GetWorkItemSnapshot(string workItemId) {
            return base.Channel.GetWorkItemSnapshot(workItemId);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.RenderedItemData> GetWorkItemSnapshotAsync(string workItemId) {
            return base.Channel.GetWorkItemSnapshotAsync(workItemId);
        }
        
        public Federation.Client.MyCoreService.PublishInfoData[] GetListPublishInfo(string itemId) {
            return base.Channel.GetListPublishInfo(itemId);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.PublishInfoData[]> GetListPublishInfoAsync(string itemId) {
            return base.Channel.GetListPublishInfoAsync(itemId);
        }
        
        public Federation.Client.MyCoreService.ActionFlags CastActions(int numericActions) {
            return base.Channel.CastActions(numericActions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ActionFlags> CastActionsAsync(int numericActions) {
            return base.Channel.CastActionsAsync(numericActions);
        }
        
        public void ValidateXml(Federation.Client.MyCoreService.IdentifiableObjectData data) {
            base.Channel.ValidateXml(data);
        }
        
        public System.Threading.Tasks.Task ValidateXmlAsync(Federation.Client.MyCoreService.IdentifiableObjectData data) {
            return base.Channel.ValidateXmlAsync(data);
        }
        
        public bool IsValidTridionWebSchemaXml(Federation.Client.MyCoreService.SchemaData data) {
            return base.Channel.IsValidTridionWebSchemaXml(data);
        }
        
        public System.Threading.Tasks.Task<bool> IsValidTridionWebSchemaXmlAsync(Federation.Client.MyCoreService.SchemaData data) {
            return base.Channel.IsValidTridionWebSchemaXmlAsync(data);
        }
        
        public Federation.Client.MyCoreService.ArrayOfTcmUri GetSubjectIdsWithApplicationData(string applicationId) {
            return base.Channel.GetSubjectIdsWithApplicationData(applicationId);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ArrayOfTcmUri> GetSubjectIdsWithApplicationDataAsync(string applicationId) {
            return base.Channel.GetSubjectIdsWithApplicationDataAsync(applicationId);
        }
        
        public Federation.Client.MyCoreService.ApplicationDataDictionary ReadApplicationDataForSubjectsIds(string[] subjectIds, string[] applicationIds) {
            return base.Channel.ReadApplicationDataForSubjectsIds(subjectIds, applicationIds);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ApplicationDataDictionary> ReadApplicationDataForSubjectsIdsAsync(string[] subjectIds, string[] applicationIds) {
            return base.Channel.ReadApplicationDataForSubjectsIdsAsync(subjectIds, applicationIds);
        }
        
        public Federation.Client.MyCoreService.SecurityDescriptorDataDictionary GetSecurityDescriptorsForSubjectsIds(string[] subjectIds) {
            return base.Channel.GetSecurityDescriptorsForSubjectsIds(subjectIds);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.SecurityDescriptorDataDictionary> GetSecurityDescriptorsForSubjectsIdsAsync(string[] subjectIds) {
            return base.Channel.GetSecurityDescriptorsForSubjectsIdsAsync(subjectIds);
        }
        
        public Federation.Client.MyCoreService.SecurityDescriptorDataDictionary GetContentSecurityDescriptorsForOrgItemIds(string[] organizationalItemIds) {
            return base.Channel.GetContentSecurityDescriptorsForOrgItemIds(organizationalItemIds);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.SecurityDescriptorDataDictionary> GetContentSecurityDescriptorsForOrgItemIdsAsync(string[] organizationalItemIds) {
            return base.Channel.GetContentSecurityDescriptorsForOrgItemIdsAsync(organizationalItemIds);
        }
        
        public void ReIndex(string id) {
            base.Channel.ReIndex(id);
        }
        
        public System.Threading.Tasks.Task ReIndexAsync(string id) {
            return base.Channel.ReIndexAsync(id);
        }
        
        public System.Nullable<Federation.Client.MyCoreService.PredefinedQueue> CastPredefinedQueue(int queueId) {
            return base.Channel.CastPredefinedQueue(queueId);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<Federation.Client.MyCoreService.PredefinedQueue>> CastPredefinedQueueAsync(int queueId) {
            return base.Channel.CastPredefinedQueueAsync(queueId);
        }
        
        public int PurgeOldVersions(Federation.Client.MyCoreService.PurgeOldVersionsInstructionData instruction) {
            return base.Channel.PurgeOldVersions(instruction);
        }
        
        public System.Threading.Tasks.Task<int> PurgeOldVersionsAsync(Federation.Client.MyCoreService.PurgeOldVersionsInstructionData instruction) {
            return base.Channel.PurgeOldVersionsAsync(instruction);
        }
        
        public System.Xml.Linq.XElement GetListExternalLinks(string id) {
            return base.Channel.GetListExternalLinks(id);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetListExternalLinksAsync(string id) {
            return base.Channel.GetListExternalLinksAsync(id);
        }
        
        public Federation.Client.MyCoreService.SearchQueryData ConvertXmlToSearchQuery(System.Xml.Linq.XElement searchQueryXml) {
            return base.Channel.ConvertXmlToSearchQuery(searchQueryXml);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.SearchQueryData> ConvertXmlToSearchQueryAsync(System.Xml.Linq.XElement searchQueryXml) {
            return base.Channel.ConvertXmlToSearchQueryAsync(searchQueryXml);
        }
        
        public System.Xml.Linq.XElement ConvertSearchQueryToXml(Federation.Client.MyCoreService.SearchQueryData searchQueryData) {
            return base.Channel.ConvertSearchQueryToXml(searchQueryData);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> ConvertSearchQueryToXmlAsync(Federation.Client.MyCoreService.SearchQueryData searchQueryData) {
            return base.Channel.ConvertSearchQueryToXmlAsync(searchQueryData);
        }
        
        public Federation.Client.MyCoreService.SchemaData GetVirtualFolderTypeSchema(string namespaceUri) {
            return base.Channel.GetVirtualFolderTypeSchema(namespaceUri);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.SchemaData> GetVirtualFolderTypeSchemaAsync(string namespaceUri) {
            return base.Channel.GetVirtualFolderTypeSchemaAsync(namespaceUri);
        }
        
        public Federation.Client.MyCoreService.TridionEnumValue[] GetEnumValues(string type) {
            return base.Channel.GetEnumValues(type);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.TridionEnumValue[]> GetEnumValuesAsync(string type) {
            return base.Channel.GetEnumValuesAsync(type);
        }
        
        public Federation.Client.MyCoreService.BundleTypeData[] ResolveBundleTypes(string[] itemIds, bool pruneTree) {
            return base.Channel.ResolveBundleTypes(itemIds, pruneTree);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.BundleTypeData[]> ResolveBundleTypesAsync(string[] itemIds, bool pruneTree) {
            return base.Channel.ResolveBundleTypesAsync(itemIds, pruneTree);
        }
        
        public Federation.Client.MyCoreService.KeywordData CopyToKeyword(string sourceKeywordId, string destinationId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.CopyToKeyword(sourceKeywordId, destinationId, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.KeywordData> CopyToKeywordAsync(string sourceKeywordId, string destinationId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.CopyToKeywordAsync(sourceKeywordId, destinationId, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.KeywordData MoveToKeyword(string sourceKeywordId, string destinationId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.MoveToKeyword(sourceKeywordId, destinationId, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.KeywordData> MoveToKeywordAsync(string sourceKeywordId, string destinationId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.MoveToKeywordAsync(sourceKeywordId, destinationId, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.TridionLanguageInfo[] GetTridionLanguages() {
            return base.Channel.GetTridionLanguages();
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.TridionLanguageInfo[]> GetTridionLanguagesAsync() {
            return base.Channel.GetTridionLanguagesAsync();
        }
        
        public Federation.Client.MyCoreService.WorkflowScriptType[] GetListWorkflowScriptTypes() {
            return base.Channel.GetListWorkflowScriptTypes();
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.WorkflowScriptType[]> GetListWorkflowScriptTypesAsync() {
            return base.Channel.GetListWorkflowScriptTypesAsync();
        }
        
        public Federation.Client.MyCoreService.WorkItemData[] AddToWorkflow(string[] subjectIds, string activityInstanceId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.AddToWorkflow(subjectIds, activityInstanceId, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.WorkItemData[]> AddToWorkflowAsync(string[] subjectIds, string activityInstanceId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.AddToWorkflowAsync(subjectIds, activityInstanceId, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.WorkItemData[] RemoveFromWorkflow(string[] subjectIds, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.RemoveFromWorkflow(subjectIds, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.WorkItemData[]> RemoveFromWorkflowAsync(string[] subjectIds, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.RemoveFromWorkflowAsync(subjectIds, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.OrganizationalItemData Lock(string organizationalItemId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.Lock(organizationalItemId, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.OrganizationalItemData> LockAsync(string organizationalItemId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.LockAsync(organizationalItemId, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.OrganizationalItemData Unlock(string organizationalItemId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.Unlock(organizationalItemId, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.OrganizationalItemData> UnlockAsync(string organizationalItemId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.UnlockAsync(organizationalItemId, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.ProcessInstanceData StartWorkflow(string repositoryId, Federation.Client.MyCoreService.StartWorkflowInstructionData instruction, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.StartWorkflow(repositoryId, instruction, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ProcessInstanceData> StartWorkflowAsync(string repositoryId, Federation.Client.MyCoreService.StartWorkflowInstructionData instruction, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.StartWorkflowAsync(repositoryId, instruction, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.ProcessDefinitionAssociationDictionary GetProcessDefinitionsForItems(string[] itemIds, Federation.Client.MyCoreService.ProcessDefinitionType processDefinitionType) {
            return base.Channel.GetProcessDefinitionsForItems(itemIds, processDefinitionType);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ProcessDefinitionAssociationDictionary> GetProcessDefinitionsForItemsAsync(string[] itemIds, Federation.Client.MyCoreService.ProcessDefinitionType processDefinitionType) {
            return base.Channel.GetProcessDefinitionsForItemsAsync(itemIds, processDefinitionType);
        }
        
        public string GetSystemXsd(string filename) {
            return base.Channel.GetSystemXsd(filename);
        }
        
        public System.Threading.Tasks.Task<string> GetSystemXsdAsync(string filename) {
            return base.Channel.GetSystemXsdAsync(filename);
        }
        
        public Federation.Client.MyCoreService.LinkToSchemaData[] GetSchemasByNamespaceUri(string repositoryId, string namespaceUri, string rootElementName) {
            return base.Channel.GetSchemasByNamespaceUri(repositoryId, namespaceUri, rootElementName);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.LinkToSchemaData[]> GetSchemasByNamespaceUriAsync(string repositoryId, string namespaceUri, string rootElementName) {
            return base.Channel.GetSchemasByNamespaceUriAsync(repositoryId, namespaceUri, rootElementName);
        }
        
        public Federation.Client.MyCoreService.ValidationErrorData[] Validate(Federation.Client.MyCoreService.IdentifiableObjectData deltaData) {
            return base.Channel.Validate(deltaData);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ValidationErrorData[]> ValidateAsync(Federation.Client.MyCoreService.IdentifiableObjectData deltaData) {
            return base.Channel.ValidateAsync(deltaData);
        }
        
        public Federation.Client.MyCoreService.BinaryContentData GetExternalBinaryContentData(string uri) {
            return base.Channel.GetExternalBinaryContentData(uri);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.BinaryContentData> GetExternalBinaryContentDataAsync(string uri) {
            return base.Channel.GetExternalBinaryContentDataAsync(uri);
        }
        
        public Federation.Client.MyCoreService.SynchronizationResult SynchronizeWithSchema(Federation.Client.MyCoreService.IdentifiableObjectData dataObject, Federation.Client.MyCoreService.SynchronizeOptions synchronizeOptions) {
            return base.Channel.SynchronizeWithSchema(dataObject, synchronizeOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.SynchronizationResult> SynchronizeWithSchemaAsync(Federation.Client.MyCoreService.IdentifiableObjectData dataObject, Federation.Client.MyCoreService.SynchronizeOptions synchronizeOptions) {
            return base.Channel.SynchronizeWithSchemaAsync(dataObject, synchronizeOptions);
        }
        
        public Federation.Client.MyCoreService.SynchronizationResult SynchronizeWithSchemaAndUpdate(string itemId, Federation.Client.MyCoreService.SynchronizeOptions synchronizeOptions) {
            return base.Channel.SynchronizeWithSchemaAndUpdate(itemId, synchronizeOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.SynchronizationResult> SynchronizeWithSchemaAndUpdateAsync(string itemId, Federation.Client.MyCoreService.SynchronizeOptions synchronizeOptions) {
            return base.Channel.SynchronizeWithSchemaAndUpdateAsync(itemId, synchronizeOptions);
        }
        
        public void DecommissionPublicationTarget(string publicationTargetId) {
            base.Channel.DecommissionPublicationTarget(publicationTargetId);
        }
        
        public System.Threading.Tasks.Task DecommissionPublicationTargetAsync(string publicationTargetId) {
            return base.Channel.DecommissionPublicationTargetAsync(publicationTargetId);
        }
        
        public Federation.Client.MyCoreService.SchemaFieldsData ConvertXsdToSchemaFields(System.Xml.Linq.XElement xsd, Federation.Client.MyCoreService.SchemaPurpose purpose, string rootElementName, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.ConvertXsdToSchemaFields(xsd, purpose, rootElementName, readOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.SchemaFieldsData> ConvertXsdToSchemaFieldsAsync(System.Xml.Linq.XElement xsd, Federation.Client.MyCoreService.SchemaPurpose purpose, string rootElementName, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.ConvertXsdToSchemaFieldsAsync(xsd, purpose, rootElementName, readOptions);
        }
        
        public string GetPublishUrl(string id, string targetTypeIdOrPurpose) {
            return base.Channel.GetPublishUrl(id, targetTypeIdOrPurpose);
        }
        
        public System.Threading.Tasks.Task<string> GetPublishUrlAsync(string id, string targetTypeIdOrPurpose) {
            return base.Channel.GetPublishUrlAsync(id, targetTypeIdOrPurpose);
        }
        
        public Federation.Client.MyCoreService.LinkToBusinessProcessTypeData[] GetBusinessProcessTypes(string cdTopologyTypeId) {
            return base.Channel.GetBusinessProcessTypes(cdTopologyTypeId);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.LinkToBusinessProcessTypeData[]> GetBusinessProcessTypesAsync(string cdTopologyTypeId) {
            return base.Channel.GetBusinessProcessTypesAsync(cdTopologyTypeId);
        }
        
        public Federation.Client.MyCoreService.PublishSourceData GetPublishSourceByUrl(string url) {
            return base.Channel.GetPublishSourceByUrl(url);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.PublishSourceData> GetPublishSourceByUrlAsync(string url) {
            return base.Channel.GetPublishSourceByUrlAsync(url);
        }
        
        public void RemovePublishStates(string publicationId, string targetTypeIdOrPurpose) {
            base.Channel.RemovePublishStates(publicationId, targetTypeIdOrPurpose);
        }
        
        public System.Threading.Tasks.Task RemovePublishStatesAsync(string publicationId, string targetTypeIdOrPurpose) {
            return base.Channel.RemovePublishStatesAsync(publicationId, targetTypeIdOrPurpose);
        }
        
        public Federation.Client.MyCoreService.ContainingPagesDictionary ResolveContainingPages(string componentId, Federation.Client.MyCoreService.ResolveContainingPagesInstructionData instruction) {
            return base.Channel.ResolveContainingPages(componentId, instruction);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ContainingPagesDictionary> ResolveContainingPagesAsync(string componentId, Federation.Client.MyCoreService.ResolveContainingPagesInstructionData instruction) {
            return base.Channel.ResolveContainingPagesAsync(componentId, instruction);
        }
        
        public void PurgeWorkflowHistory(Federation.Client.MyCoreService.PurgeWorkflowHistoryInstructionData instruction) {
            base.Channel.PurgeWorkflowHistory(instruction);
        }
        
        public System.Threading.Tasks.Task PurgeWorkflowHistoryAsync(Federation.Client.MyCoreService.PurgeWorkflowHistoryInstructionData instruction) {
            return base.Channel.PurgeWorkflowHistoryAsync(instruction);
        }
        
        public void BroadcastNotification(Federation.Client.MyCoreService.NotificationMessage notification) {
            base.Channel.BroadcastNotification(notification);
        }
        
        public System.Threading.Tasks.Task BroadcastNotificationAsync(Federation.Client.MyCoreService.NotificationMessage notification) {
            return base.Channel.BroadcastNotificationAsync(notification);
        }
        
        public Federation.Client.MyCoreService.SystemPrivilege[] GetSystemPrivileges() {
            return base.Channel.GetSystemPrivileges();
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.SystemPrivilege[]> GetSystemPrivilegesAsync() {
            return base.Channel.GetSystemPrivilegesAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.sdltridion.com/ContentManager/CoreService/201603", ConfigurationName="MyCoreService.IStreamDownload", SessionMode=System.ServiceModel.SessionMode.NotAllowed)]
    public interface IStreamDownload {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/IStreamDownload/Downl" +
            "oadBinaryContent", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/IStreamDownload/Downl" +
            "oadBinaryContentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/IStreamDownload/Downl" +
            "oadBinaryContentCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        System.IO.Stream DownloadBinaryContent(string itemIdOrTempFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/IStreamDownload/Downl" +
            "oadBinaryContent", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/IStreamDownload/Downl" +
            "oadBinaryContentResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> DownloadBinaryContentAsync(string itemIdOrTempFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/IStreamDownload/Downl" +
            "oadBinaryContentByUser", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/IStreamDownload/Downl" +
            "oadBinaryContentByUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/IStreamDownload/Downl" +
            "oadBinaryContentByUserCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        System.IO.Stream DownloadBinaryContentByUser(string itemIdOrTempFileId, Federation.Client.MyCoreService.AccessTokenData accessToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/IStreamDownload/Downl" +
            "oadBinaryContentByUser", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/IStreamDownload/Downl" +
            "oadBinaryContentByUserResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> DownloadBinaryContentByUserAsync(string itemIdOrTempFileId, Federation.Client.MyCoreService.AccessTokenData accessToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/IStreamDownload/Downl" +
            "oadRenderedBinary", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/IStreamDownload/Downl" +
            "oadRenderedBinaryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/IStreamDownload/Downl" +
            "oadRenderedBinaryCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        System.IO.Stream DownloadRenderedBinary(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/IStreamDownload/Downl" +
            "oadRenderedBinary", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/IStreamDownload/Downl" +
            "oadRenderedBinaryResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> DownloadRenderedBinaryAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/IStreamDownload/Downl" +
            "oadExternalBinaryContent", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/IStreamDownload/Downl" +
            "oadExternalBinaryContentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/IStreamDownload/Downl" +
            "oadExternalBinaryContentCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        System.IO.Stream DownloadExternalBinaryContent(string uri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/IStreamDownload/Downl" +
            "oadExternalBinaryContent", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/IStreamDownload/Downl" +
            "oadExternalBinaryContentResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> DownloadExternalBinaryContentAsync(string uri);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStreamDownloadChannel : Federation.Client.MyCoreService.IStreamDownload, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StreamDownloadClient : System.ServiceModel.ClientBase<Federation.Client.MyCoreService.IStreamDownload>, Federation.Client.MyCoreService.IStreamDownload {
        
        public StreamDownloadClient() {
        }
        
        public StreamDownloadClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StreamDownloadClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StreamDownloadClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StreamDownloadClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.IO.Stream DownloadBinaryContent(string itemIdOrTempFileId) {
            return base.Channel.DownloadBinaryContent(itemIdOrTempFileId);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> DownloadBinaryContentAsync(string itemIdOrTempFileId) {
            return base.Channel.DownloadBinaryContentAsync(itemIdOrTempFileId);
        }
        
        public System.IO.Stream DownloadBinaryContentByUser(string itemIdOrTempFileId, Federation.Client.MyCoreService.AccessTokenData accessToken) {
            return base.Channel.DownloadBinaryContentByUser(itemIdOrTempFileId, accessToken);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> DownloadBinaryContentByUserAsync(string itemIdOrTempFileId, Federation.Client.MyCoreService.AccessTokenData accessToken) {
            return base.Channel.DownloadBinaryContentByUserAsync(itemIdOrTempFileId, accessToken);
        }
        
        public System.IO.Stream DownloadRenderedBinary(string path) {
            return base.Channel.DownloadRenderedBinary(path);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> DownloadRenderedBinaryAsync(string path) {
            return base.Channel.DownloadRenderedBinaryAsync(path);
        }
        
        public System.IO.Stream DownloadExternalBinaryContent(string uri) {
            return base.Channel.DownloadExternalBinaryContent(uri);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> DownloadExternalBinaryContentAsync(string uri) {
            return base.Channel.DownloadExternalBinaryContentAsync(uri);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.sdltridion.com/ContentManager/CoreService/201603", ConfigurationName="MyCoreService.IStreamUpload", SessionMode=System.ServiceModel.SessionMode.NotAllowed)]
    public interface IStreamUpload {
        
        // CODEGEN: Generating message contract since the wrapper name (UploadRequest) of message UploadRequest does not match the default value (UploadBinaryContent)
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/IStreamUpload/UploadB" +
            "inaryContent", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/IStreamUpload/UploadB" +
            "inaryContentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/IStreamUpload/UploadB" +
            "inaryContentCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.UploadResponse UploadBinaryContent(Federation.Client.MyCoreService.UploadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/IStreamUpload/UploadB" +
            "inaryContent", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/IStreamUpload/UploadB" +
            "inaryContentResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.UploadResponse> UploadBinaryContentAsync(Federation.Client.MyCoreService.UploadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/IStreamUpload/UploadB" +
            "inaryByteArray", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/IStreamUpload/UploadB" +
            "inaryByteArrayResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/IStreamUpload/UploadB" +
            "inaryByteArrayCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string UploadBinaryByteArray(Federation.Client.MyCoreService.AccessTokenData accessToken, byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/IStreamUpload/UploadB" +
            "inaryByteArray", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/IStreamUpload/UploadB" +
            "inaryByteArrayResponse")]
        System.Threading.Tasks.Task<string> UploadBinaryByteArrayAsync(Federation.Client.MyCoreService.AccessTokenData accessToken, byte[] data);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadRequest", WrapperNamespace="http://www.sdltridion.com/ContentManager/CoreService/201603", IsWrapped=true)]
    public partial class UploadRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.sdltridion.com/ContentManager/CoreService/201603")]
        public Federation.Client.MyCoreService.AccessTokenData AccessToken;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.sdltridion.com/ContentManager/CoreService/201603", Order=0)]
        public System.IO.Stream UploadContent;
        
        public UploadRequest() {
        }
        
        public UploadRequest(Federation.Client.MyCoreService.AccessTokenData AccessToken, System.IO.Stream UploadContent) {
            this.AccessToken = AccessToken;
            this.UploadContent = UploadContent;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadResponse", WrapperNamespace="http://www.sdltridion.com/ContentManager/CoreService/201603", IsWrapped=true)]
    public partial class UploadResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.sdltridion.com/ContentManager/CoreService/201603")]
        public string FilePath;
        
        public UploadResponse() {
        }
        
        public UploadResponse(string FilePath) {
            this.FilePath = FilePath;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStreamUploadChannel : Federation.Client.MyCoreService.IStreamUpload, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StreamUploadClient : System.ServiceModel.ClientBase<Federation.Client.MyCoreService.IStreamUpload>, Federation.Client.MyCoreService.IStreamUpload {
        
        public StreamUploadClient() {
        }
        
        public StreamUploadClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StreamUploadClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StreamUploadClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StreamUploadClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Federation.Client.MyCoreService.UploadResponse Federation.Client.MyCoreService.IStreamUpload.UploadBinaryContent(Federation.Client.MyCoreService.UploadRequest request) {
            return base.Channel.UploadBinaryContent(request);
        }
        
        public string UploadBinaryContent(Federation.Client.MyCoreService.AccessTokenData AccessToken, System.IO.Stream UploadContent) {
            Federation.Client.MyCoreService.UploadRequest inValue = new Federation.Client.MyCoreService.UploadRequest();
            inValue.AccessToken = AccessToken;
            inValue.UploadContent = UploadContent;
            Federation.Client.MyCoreService.UploadResponse retVal = ((Federation.Client.MyCoreService.IStreamUpload)(this)).UploadBinaryContent(inValue);
            return retVal.FilePath;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.UploadResponse> Federation.Client.MyCoreService.IStreamUpload.UploadBinaryContentAsync(Federation.Client.MyCoreService.UploadRequest request) {
            return base.Channel.UploadBinaryContentAsync(request);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.UploadResponse> UploadBinaryContentAsync(Federation.Client.MyCoreService.AccessTokenData AccessToken, System.IO.Stream UploadContent) {
            Federation.Client.MyCoreService.UploadRequest inValue = new Federation.Client.MyCoreService.UploadRequest();
            inValue.AccessToken = AccessToken;
            inValue.UploadContent = UploadContent;
            return ((Federation.Client.MyCoreService.IStreamUpload)(this)).UploadBinaryContentAsync(inValue);
        }
        
        public string UploadBinaryByteArray(Federation.Client.MyCoreService.AccessTokenData accessToken, byte[] data) {
            return base.Channel.UploadBinaryByteArray(accessToken, data);
        }
        
        public System.Threading.Tasks.Task<string> UploadBinaryByteArrayAsync(Federation.Client.MyCoreService.AccessTokenData accessToken, byte[] data) {
            return base.Channel.UploadBinaryByteArrayAsync(accessToken, data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.sdltridion.com/ContentManager/CoreService/201603", ConfigurationName="MyCoreService.ICoreServiceBatch")]
    public interface ICoreServiceBatch {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Imp" +
            "ersonateBatch", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Imp" +
            "ersonateBatchResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Imp" +
            "ersonateBatchCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.AccessTokenData ImpersonateBatch(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Imp" +
            "ersonateBatch", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Imp" +
            "ersonateBatchResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.AccessTokenData> ImpersonateBatchAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Imp" +
            "ersonateBatchWithToken", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Imp" +
            "ersonateBatchWithTokenResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Imp" +
            "ersonateBatchWithTokenCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        void ImpersonateBatchWithToken(Federation.Client.MyCoreService.AccessTokenData accessTokenData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Imp" +
            "ersonateBatchWithToken", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Imp" +
            "ersonateBatchWithTokenResponse")]
        System.Threading.Tasks.Task ImpersonateBatchWithTokenAsync(Federation.Client.MyCoreService.AccessTokenData accessTokenData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Imp" +
            "ersonateBatchWithClaims", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Imp" +
            "ersonateBatchWithClaimsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Imp" +
            "ersonateBatchWithClaimsCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.AccessTokenData ImpersonateBatchWithClaims(Federation.Client.MyCoreService.ClaimData[] claims);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Imp" +
            "ersonateBatchWithClaims", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Imp" +
            "ersonateBatchWithClaimsResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.AccessTokenData> ImpersonateBatchWithClaimsAsync(Federation.Client.MyCoreService.ClaimData[] claims);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chLocalize", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chLocalizeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chLocalizeCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string BatchLocalize(Federation.Client.MyCoreService.WeakLink[] subjectLinks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chLocalize", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chLocalizeResponse")]
        System.Threading.Tasks.Task<string> BatchLocalizeAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chUnLocalize", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chUnLocalizeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chUnLocalizeCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string BatchUnLocalize(Federation.Client.MyCoreService.WeakLink[] subjectLinks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chUnLocalize", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chUnLocalizeResponse")]
        System.Threading.Tasks.Task<string> BatchUnLocalizeAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chPromote", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chPromoteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chPromoteCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string BatchPromote(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string destinationRepositoryId, Federation.Client.MyCoreService.OperationInstruction instruction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chPromote", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chPromoteResponse")]
        System.Threading.Tasks.Task<string> BatchPromoteAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string destinationRepositoryId, Federation.Client.MyCoreService.OperationInstruction instruction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chDemote", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chDemoteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chDemoteCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string BatchDemote(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string destinationRepositoryId, Federation.Client.MyCoreService.OperationInstruction instruction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chDemote", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chDemoteResponse")]
        System.Threading.Tasks.Task<string> BatchDemoteAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string destinationRepositoryId, Federation.Client.MyCoreService.OperationInstruction instruction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chCopy", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chCopyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chCopyCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string BatchCopy(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string destinationId, bool makeUnique);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chCopy", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chCopyResponse")]
        System.Threading.Tasks.Task<string> BatchCopyAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string destinationId, bool makeUnique);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chMove", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chMoveResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chMoveCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string BatchMove(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string destinationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chMove", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chMoveResponse")]
        System.Threading.Tasks.Task<string> BatchMoveAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string destinationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chCheckIn", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chCheckInResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chCheckInCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string BatchCheckIn(Federation.Client.MyCoreService.WeakLink[] subjectLinks, bool removePermanentLock, string userComment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chCheckIn", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chCheckInResponse")]
        System.Threading.Tasks.Task<string> BatchCheckInAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, bool removePermanentLock, string userComment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chCheckOut", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chCheckOutResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chCheckOutCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string BatchCheckOut(Federation.Client.MyCoreService.WeakLink[] subjectLinks, bool permanentLock);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chCheckOut", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chCheckOutResponse")]
        System.Threading.Tasks.Task<string> BatchCheckOutAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, bool permanentLock);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chDelete", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chDeleteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chDeleteCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string BatchDelete(Federation.Client.MyCoreService.WeakLink[] subjectLinks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chDelete", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chDeleteResponse")]
        System.Threading.Tasks.Task<string> BatchDeleteAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chPublish", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chPublishResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chPublishCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string BatchPublish(Federation.Client.MyCoreService.WeakLink[] subjectLinks, Federation.Client.MyCoreService.PublishInstructionData publishInstruction, string[] targetIdsOrPurposes, System.Nullable<Federation.Client.MyCoreService.PublishPriority> priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chPublish", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chPublishResponse")]
        System.Threading.Tasks.Task<string> BatchPublishAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, Federation.Client.MyCoreService.PublishInstructionData publishInstruction, string[] targetIdsOrPurposes, System.Nullable<Federation.Client.MyCoreService.PublishPriority> priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chUnPublish", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chUnPublishResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chUnPublishCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string BatchUnPublish(Federation.Client.MyCoreService.WeakLink[] subjectLinks, Federation.Client.MyCoreService.UnPublishInstructionData unPublishInstruction, string[] targetIdsOrPurposes, System.Nullable<Federation.Client.MyCoreService.PublishPriority> priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chUnPublish", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chUnPublishResponse")]
        System.Threading.Tasks.Task<string> BatchUnPublishAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, Federation.Client.MyCoreService.UnPublishInstructionData unPublishInstruction, string[] targetIdsOrPurposes, System.Nullable<Federation.Client.MyCoreService.PublishPriority> priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chUndoCheckOut", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chUndoCheckOutResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chUndoCheckOutCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string BatchUndoCheckOut(Federation.Client.MyCoreService.WeakLink[] subjectLinks, bool permanentLock);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chUndoCheckOut", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chUndoCheckOutResponse")]
        System.Threading.Tasks.Task<string> BatchUndoCheckOutAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, bool permanentLock);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chStartActivity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chStartActivityResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chStartActivityCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string BatchStartActivity(Federation.Client.MyCoreService.WeakLink[] activityInstanceLinks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chStartActivity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chStartActivityResponse")]
        System.Threading.Tasks.Task<string> BatchStartActivityAsync(Federation.Client.MyCoreService.WeakLink[] activityInstanceLinks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chFinishActivity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chFinishActivityResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chFinishActivityCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string BatchFinishActivity(Federation.Client.MyCoreService.WeakLink[] activityInstanceLinks, Federation.Client.MyCoreService.ActivityFinishData activityFinishData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chFinishActivity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chFinishActivityResponse")]
        System.Threading.Tasks.Task<string> BatchFinishActivityAsync(Federation.Client.MyCoreService.WeakLink[] activityInstanceLinks, Federation.Client.MyCoreService.ActivityFinishData activityFinishData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chForceFinishProcess", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chForceFinishProcessResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chForceFinishProcessCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string BatchForceFinishProcess(Federation.Client.MyCoreService.WeakLink[] processInstanceLinks, string approvalStatusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chForceFinishProcess", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chForceFinishProcessResponse")]
        System.Threading.Tasks.Task<string> BatchForceFinishProcessAsync(Federation.Client.MyCoreService.WeakLink[] processInstanceLinks, string approvalStatusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chClassify", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chClassifyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chClassifyCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string BatchClassify(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string[] keywordIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chClassify", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chClassifyResponse")]
        System.Threading.Tasks.Task<string> BatchClassifyAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string[] keywordIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chUnClassify", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chUnClassifyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chUnClassifyCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string BatchUnClassify(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string[] keywordIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chUnClassify", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chUnClassifyResponse")]
        System.Threading.Tasks.Task<string> BatchUnClassifyAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string[] keywordIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chReClassify", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chReClassifyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chReClassifyCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string BatchReClassify(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string[] keywordIdsToRemove, string[] keywordIdsToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chReClassify", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chReClassifyResponse")]
        System.Threading.Tasks.Task<string> BatchReClassifyAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string[] keywordIdsToRemove, string[] keywordIdsToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chDeleteTaxonomyNode", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chDeleteTaxonomyNodeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chDeleteTaxonomyNodeCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string BatchDeleteTaxonomyNode(Federation.Client.MyCoreService.WeakLink[] subjectLinks, Federation.Client.MyCoreService.DeleteTaxonomyNodeMode deleteTaxonomyNodeMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chDeleteTaxonomyNode", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chDeleteTaxonomyNodeResponse")]
        System.Threading.Tasks.Task<string> BatchDeleteTaxonomyNodeAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, Federation.Client.MyCoreService.DeleteTaxonomyNodeMode deleteTaxonomyNodeMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chSwitchUserEnabledState", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chSwitchUserEnabledStateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chSwitchUserEnabledStateCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string BatchSwitchUserEnabledState(Federation.Client.MyCoreService.WeakLink[] subjectLinks, bool isEnabled);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chSwitchUserEnabledState", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chSwitchUserEnabledStateResponse")]
        System.Threading.Tasks.Task<string> BatchSwitchUserEnabledStateAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, bool isEnabled);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chCopyToKeyword", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chCopyToKeywordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chCopyToKeywordCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string BatchCopyToKeyword(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string destinationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chCopyToKeyword", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chCopyToKeywordResponse")]
        System.Threading.Tasks.Task<string> BatchCopyToKeywordAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string destinationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chMoveToKeyword", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chMoveToKeywordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chMoveToKeywordCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string BatchMoveToKeyword(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string destinationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chMoveToKeyword", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chMoveToKeywordResponse")]
        System.Threading.Tasks.Task<string> BatchMoveToKeywordAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string destinationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chReAssignActivity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chReAssignActivityResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chReAssignActivityCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string BatchReAssignActivity(Federation.Client.MyCoreService.WeakLink[] activityInstanceLinks, string newAssigneeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chReAssignActivity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chReAssignActivityResponse")]
        System.Threading.Tasks.Task<string> BatchReAssignActivityAsync(Federation.Client.MyCoreService.WeakLink[] activityInstanceLinks, string newAssigneeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chRestartActivity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chRestartActivityResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chRestartActivityCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string BatchRestartActivity(Federation.Client.MyCoreService.WeakLink[] activityInstanceLinks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chRestartActivity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chRestartActivityResponse")]
        System.Threading.Tasks.Task<string> BatchRestartActivityAsync(Federation.Client.MyCoreService.WeakLink[] activityInstanceLinks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chSuspendActivity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chSuspendActivityResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chSuspendActivityCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string BatchSuspendActivity(Federation.Client.MyCoreService.WeakLink[] activityInstanceLinks, string reason);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chSuspendActivity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chSuspendActivityResponse")]
        System.Threading.Tasks.Task<string> BatchSuspendActivityAsync(Federation.Client.MyCoreService.WeakLink[] activityInstanceLinks, string reason);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chResumeActivity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chResumeActivityResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chResumeActivityCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string BatchResumeActivity(Federation.Client.MyCoreService.WeakLink[] activityInstanceLinks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chResumeActivity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chResumeActivityResponse")]
        System.Threading.Tasks.Task<string> BatchResumeActivityAsync(Federation.Client.MyCoreService.WeakLink[] activityInstanceLinks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chSynchronizeWithSchemaAndUpdate", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chSynchronizeWithSchemaAndUpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chSynchronizeWithSchemaAndUpdateCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string BatchSynchronizeWithSchemaAndUpdate(Federation.Client.MyCoreService.WeakLink[] subjectLinks, Federation.Client.MyCoreService.SynchronizeOptions synchOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chSynchronizeWithSchemaAndUpdate", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreServiceBatch/Bat" +
            "chSynchronizeWithSchemaAndUpdateResponse")]
        System.Threading.Tasks.Task<string> BatchSynchronizeWithSchemaAndUpdateAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, Federation.Client.MyCoreService.SynchronizeOptions synchOptions);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICoreServiceBatchChannel : Federation.Client.MyCoreService.ICoreServiceBatch, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CoreServiceBatchClient : System.ServiceModel.ClientBase<Federation.Client.MyCoreService.ICoreServiceBatch>, Federation.Client.MyCoreService.ICoreServiceBatch {
        
        public CoreServiceBatchClient() {
        }
        
        public CoreServiceBatchClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CoreServiceBatchClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CoreServiceBatchClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CoreServiceBatchClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Federation.Client.MyCoreService.AccessTokenData ImpersonateBatch(string userName) {
            return base.Channel.ImpersonateBatch(userName);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.AccessTokenData> ImpersonateBatchAsync(string userName) {
            return base.Channel.ImpersonateBatchAsync(userName);
        }
        
        public void ImpersonateBatchWithToken(Federation.Client.MyCoreService.AccessTokenData accessTokenData) {
            base.Channel.ImpersonateBatchWithToken(accessTokenData);
        }
        
        public System.Threading.Tasks.Task ImpersonateBatchWithTokenAsync(Federation.Client.MyCoreService.AccessTokenData accessTokenData) {
            return base.Channel.ImpersonateBatchWithTokenAsync(accessTokenData);
        }
        
        public Federation.Client.MyCoreService.AccessTokenData ImpersonateBatchWithClaims(Federation.Client.MyCoreService.ClaimData[] claims) {
            return base.Channel.ImpersonateBatchWithClaims(claims);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.AccessTokenData> ImpersonateBatchWithClaimsAsync(Federation.Client.MyCoreService.ClaimData[] claims) {
            return base.Channel.ImpersonateBatchWithClaimsAsync(claims);
        }
        
        public string BatchLocalize(Federation.Client.MyCoreService.WeakLink[] subjectLinks) {
            return base.Channel.BatchLocalize(subjectLinks);
        }
        
        public System.Threading.Tasks.Task<string> BatchLocalizeAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks) {
            return base.Channel.BatchLocalizeAsync(subjectLinks);
        }
        
        public string BatchUnLocalize(Federation.Client.MyCoreService.WeakLink[] subjectLinks) {
            return base.Channel.BatchUnLocalize(subjectLinks);
        }
        
        public System.Threading.Tasks.Task<string> BatchUnLocalizeAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks) {
            return base.Channel.BatchUnLocalizeAsync(subjectLinks);
        }
        
        public string BatchPromote(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string destinationRepositoryId, Federation.Client.MyCoreService.OperationInstruction instruction) {
            return base.Channel.BatchPromote(subjectLinks, destinationRepositoryId, instruction);
        }
        
        public System.Threading.Tasks.Task<string> BatchPromoteAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string destinationRepositoryId, Federation.Client.MyCoreService.OperationInstruction instruction) {
            return base.Channel.BatchPromoteAsync(subjectLinks, destinationRepositoryId, instruction);
        }
        
        public string BatchDemote(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string destinationRepositoryId, Federation.Client.MyCoreService.OperationInstruction instruction) {
            return base.Channel.BatchDemote(subjectLinks, destinationRepositoryId, instruction);
        }
        
        public System.Threading.Tasks.Task<string> BatchDemoteAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string destinationRepositoryId, Federation.Client.MyCoreService.OperationInstruction instruction) {
            return base.Channel.BatchDemoteAsync(subjectLinks, destinationRepositoryId, instruction);
        }
        
        public string BatchCopy(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string destinationId, bool makeUnique) {
            return base.Channel.BatchCopy(subjectLinks, destinationId, makeUnique);
        }
        
        public System.Threading.Tasks.Task<string> BatchCopyAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string destinationId, bool makeUnique) {
            return base.Channel.BatchCopyAsync(subjectLinks, destinationId, makeUnique);
        }
        
        public string BatchMove(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string destinationId) {
            return base.Channel.BatchMove(subjectLinks, destinationId);
        }
        
        public System.Threading.Tasks.Task<string> BatchMoveAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string destinationId) {
            return base.Channel.BatchMoveAsync(subjectLinks, destinationId);
        }
        
        public string BatchCheckIn(Federation.Client.MyCoreService.WeakLink[] subjectLinks, bool removePermanentLock, string userComment) {
            return base.Channel.BatchCheckIn(subjectLinks, removePermanentLock, userComment);
        }
        
        public System.Threading.Tasks.Task<string> BatchCheckInAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, bool removePermanentLock, string userComment) {
            return base.Channel.BatchCheckInAsync(subjectLinks, removePermanentLock, userComment);
        }
        
        public string BatchCheckOut(Federation.Client.MyCoreService.WeakLink[] subjectLinks, bool permanentLock) {
            return base.Channel.BatchCheckOut(subjectLinks, permanentLock);
        }
        
        public System.Threading.Tasks.Task<string> BatchCheckOutAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, bool permanentLock) {
            return base.Channel.BatchCheckOutAsync(subjectLinks, permanentLock);
        }
        
        public string BatchDelete(Federation.Client.MyCoreService.WeakLink[] subjectLinks) {
            return base.Channel.BatchDelete(subjectLinks);
        }
        
        public System.Threading.Tasks.Task<string> BatchDeleteAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks) {
            return base.Channel.BatchDeleteAsync(subjectLinks);
        }
        
        public string BatchPublish(Federation.Client.MyCoreService.WeakLink[] subjectLinks, Federation.Client.MyCoreService.PublishInstructionData publishInstruction, string[] targetIdsOrPurposes, System.Nullable<Federation.Client.MyCoreService.PublishPriority> priority) {
            return base.Channel.BatchPublish(subjectLinks, publishInstruction, targetIdsOrPurposes, priority);
        }
        
        public System.Threading.Tasks.Task<string> BatchPublishAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, Federation.Client.MyCoreService.PublishInstructionData publishInstruction, string[] targetIdsOrPurposes, System.Nullable<Federation.Client.MyCoreService.PublishPriority> priority) {
            return base.Channel.BatchPublishAsync(subjectLinks, publishInstruction, targetIdsOrPurposes, priority);
        }
        
        public string BatchUnPublish(Federation.Client.MyCoreService.WeakLink[] subjectLinks, Federation.Client.MyCoreService.UnPublishInstructionData unPublishInstruction, string[] targetIdsOrPurposes, System.Nullable<Federation.Client.MyCoreService.PublishPriority> priority) {
            return base.Channel.BatchUnPublish(subjectLinks, unPublishInstruction, targetIdsOrPurposes, priority);
        }
        
        public System.Threading.Tasks.Task<string> BatchUnPublishAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, Federation.Client.MyCoreService.UnPublishInstructionData unPublishInstruction, string[] targetIdsOrPurposes, System.Nullable<Federation.Client.MyCoreService.PublishPriority> priority) {
            return base.Channel.BatchUnPublishAsync(subjectLinks, unPublishInstruction, targetIdsOrPurposes, priority);
        }
        
        public string BatchUndoCheckOut(Federation.Client.MyCoreService.WeakLink[] subjectLinks, bool permanentLock) {
            return base.Channel.BatchUndoCheckOut(subjectLinks, permanentLock);
        }
        
        public System.Threading.Tasks.Task<string> BatchUndoCheckOutAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, bool permanentLock) {
            return base.Channel.BatchUndoCheckOutAsync(subjectLinks, permanentLock);
        }
        
        public string BatchStartActivity(Federation.Client.MyCoreService.WeakLink[] activityInstanceLinks) {
            return base.Channel.BatchStartActivity(activityInstanceLinks);
        }
        
        public System.Threading.Tasks.Task<string> BatchStartActivityAsync(Federation.Client.MyCoreService.WeakLink[] activityInstanceLinks) {
            return base.Channel.BatchStartActivityAsync(activityInstanceLinks);
        }
        
        public string BatchFinishActivity(Federation.Client.MyCoreService.WeakLink[] activityInstanceLinks, Federation.Client.MyCoreService.ActivityFinishData activityFinishData) {
            return base.Channel.BatchFinishActivity(activityInstanceLinks, activityFinishData);
        }
        
        public System.Threading.Tasks.Task<string> BatchFinishActivityAsync(Federation.Client.MyCoreService.WeakLink[] activityInstanceLinks, Federation.Client.MyCoreService.ActivityFinishData activityFinishData) {
            return base.Channel.BatchFinishActivityAsync(activityInstanceLinks, activityFinishData);
        }
        
        public string BatchForceFinishProcess(Federation.Client.MyCoreService.WeakLink[] processInstanceLinks, string approvalStatusId) {
            return base.Channel.BatchForceFinishProcess(processInstanceLinks, approvalStatusId);
        }
        
        public System.Threading.Tasks.Task<string> BatchForceFinishProcessAsync(Federation.Client.MyCoreService.WeakLink[] processInstanceLinks, string approvalStatusId) {
            return base.Channel.BatchForceFinishProcessAsync(processInstanceLinks, approvalStatusId);
        }
        
        public string BatchClassify(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string[] keywordIds) {
            return base.Channel.BatchClassify(subjectLinks, keywordIds);
        }
        
        public System.Threading.Tasks.Task<string> BatchClassifyAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string[] keywordIds) {
            return base.Channel.BatchClassifyAsync(subjectLinks, keywordIds);
        }
        
        public string BatchUnClassify(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string[] keywordIds) {
            return base.Channel.BatchUnClassify(subjectLinks, keywordIds);
        }
        
        public System.Threading.Tasks.Task<string> BatchUnClassifyAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string[] keywordIds) {
            return base.Channel.BatchUnClassifyAsync(subjectLinks, keywordIds);
        }
        
        public string BatchReClassify(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string[] keywordIdsToRemove, string[] keywordIdsToAdd) {
            return base.Channel.BatchReClassify(subjectLinks, keywordIdsToRemove, keywordIdsToAdd);
        }
        
        public System.Threading.Tasks.Task<string> BatchReClassifyAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string[] keywordIdsToRemove, string[] keywordIdsToAdd) {
            return base.Channel.BatchReClassifyAsync(subjectLinks, keywordIdsToRemove, keywordIdsToAdd);
        }
        
        public string BatchDeleteTaxonomyNode(Federation.Client.MyCoreService.WeakLink[] subjectLinks, Federation.Client.MyCoreService.DeleteTaxonomyNodeMode deleteTaxonomyNodeMode) {
            return base.Channel.BatchDeleteTaxonomyNode(subjectLinks, deleteTaxonomyNodeMode);
        }
        
        public System.Threading.Tasks.Task<string> BatchDeleteTaxonomyNodeAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, Federation.Client.MyCoreService.DeleteTaxonomyNodeMode deleteTaxonomyNodeMode) {
            return base.Channel.BatchDeleteTaxonomyNodeAsync(subjectLinks, deleteTaxonomyNodeMode);
        }
        
        public string BatchSwitchUserEnabledState(Federation.Client.MyCoreService.WeakLink[] subjectLinks, bool isEnabled) {
            return base.Channel.BatchSwitchUserEnabledState(subjectLinks, isEnabled);
        }
        
        public System.Threading.Tasks.Task<string> BatchSwitchUserEnabledStateAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, bool isEnabled) {
            return base.Channel.BatchSwitchUserEnabledStateAsync(subjectLinks, isEnabled);
        }
        
        public string BatchCopyToKeyword(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string destinationId) {
            return base.Channel.BatchCopyToKeyword(subjectLinks, destinationId);
        }
        
        public System.Threading.Tasks.Task<string> BatchCopyToKeywordAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string destinationId) {
            return base.Channel.BatchCopyToKeywordAsync(subjectLinks, destinationId);
        }
        
        public string BatchMoveToKeyword(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string destinationId) {
            return base.Channel.BatchMoveToKeyword(subjectLinks, destinationId);
        }
        
        public System.Threading.Tasks.Task<string> BatchMoveToKeywordAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, string destinationId) {
            return base.Channel.BatchMoveToKeywordAsync(subjectLinks, destinationId);
        }
        
        public string BatchReAssignActivity(Federation.Client.MyCoreService.WeakLink[] activityInstanceLinks, string newAssigneeId) {
            return base.Channel.BatchReAssignActivity(activityInstanceLinks, newAssigneeId);
        }
        
        public System.Threading.Tasks.Task<string> BatchReAssignActivityAsync(Federation.Client.MyCoreService.WeakLink[] activityInstanceLinks, string newAssigneeId) {
            return base.Channel.BatchReAssignActivityAsync(activityInstanceLinks, newAssigneeId);
        }
        
        public string BatchRestartActivity(Federation.Client.MyCoreService.WeakLink[] activityInstanceLinks) {
            return base.Channel.BatchRestartActivity(activityInstanceLinks);
        }
        
        public System.Threading.Tasks.Task<string> BatchRestartActivityAsync(Federation.Client.MyCoreService.WeakLink[] activityInstanceLinks) {
            return base.Channel.BatchRestartActivityAsync(activityInstanceLinks);
        }
        
        public string BatchSuspendActivity(Federation.Client.MyCoreService.WeakLink[] activityInstanceLinks, string reason) {
            return base.Channel.BatchSuspendActivity(activityInstanceLinks, reason);
        }
        
        public System.Threading.Tasks.Task<string> BatchSuspendActivityAsync(Federation.Client.MyCoreService.WeakLink[] activityInstanceLinks, string reason) {
            return base.Channel.BatchSuspendActivityAsync(activityInstanceLinks, reason);
        }
        
        public string BatchResumeActivity(Federation.Client.MyCoreService.WeakLink[] activityInstanceLinks) {
            return base.Channel.BatchResumeActivity(activityInstanceLinks);
        }
        
        public System.Threading.Tasks.Task<string> BatchResumeActivityAsync(Federation.Client.MyCoreService.WeakLink[] activityInstanceLinks) {
            return base.Channel.BatchResumeActivityAsync(activityInstanceLinks);
        }
        
        public string BatchSynchronizeWithSchemaAndUpdate(Federation.Client.MyCoreService.WeakLink[] subjectLinks, Federation.Client.MyCoreService.SynchronizeOptions synchOptions) {
            return base.Channel.BatchSynchronizeWithSchemaAndUpdate(subjectLinks, synchOptions);
        }
        
        public System.Threading.Tasks.Task<string> BatchSynchronizeWithSchemaAndUpdateAsync(Federation.Client.MyCoreService.WeakLink[] subjectLinks, Federation.Client.MyCoreService.SynchronizeOptions synchOptions) {
            return base.Channel.BatchSynchronizeWithSchemaAndUpdateAsync(subjectLinks, synchOptions);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.sdltridion.com/ContentManager/CoreService/201603", ConfigurationName="MyCoreService.ISessionAwareCoreService", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ISessionAwareCoreService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetApiVe" +
            "rsion", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetApiVe" +
            "rsionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetApiVe" +
            "rsionCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string GetApiVersion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetApiVe" +
            "rsion", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetApiVe" +
            "rsionResponse")]
        System.Threading.Tasks.Task<string> GetApiVersionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetCurre" +
            "ntUser", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetCurre" +
            "ntUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetCurre" +
            "ntUserCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.AccessTokenData GetCurrentUser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetCurre" +
            "ntUser", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetCurre" +
            "ntUserResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.AccessTokenData> GetCurrentUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/IsExisti" +
            "ngObject", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/IsExisti" +
            "ngObjectResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/IsExisti" +
            "ngObjectCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        bool IsExistingObject(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/IsExisti" +
            "ngObject", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/IsExisti" +
            "ngObjectResponse")]
        System.Threading.Tasks.Task<bool> IsExistingObjectAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetTcmUr" +
            "i", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetTcmUr" +
            "iResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetTcmUr" +
            "iCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string GetTcmUri(string baseUri, string contextRepositoryUri, System.Nullable<uint> version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetTcmUr" +
            "i", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetTcmUr" +
            "iResponse")]
        System.Threading.Tasks.Task<string> GetTcmUriAsync(string baseUri, string contextRepositoryUri, System.Nullable<uint> version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/TryGetTc" +
            "mUri", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/TryGetTc" +
            "mUriResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/TryGetTc" +
            "mUriCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string TryGetTcmUri(string baseUri, string contextRepositoryUri, System.Nullable<uint> version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/TryGetTc" +
            "mUri", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/TryGetTc" +
            "mUriResponse")]
        System.Threading.Tasks.Task<string> TryGetTcmUriAsync(string baseUri, string contextRepositoryUri, System.Nullable<uint> version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Read", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadCore" +
            "ServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.IdentifiableObjectData Read(string id, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Read", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadResp" +
            "onse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData> ReadAsync(string id, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/TryRead", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/TryReadR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/TryReadC" +
            "oreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.IdentifiableObjectData TryRead(string id, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/TryRead", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/TryReadR" +
            "esponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData> TryReadAsync(string id, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/BulkRead" +
            "", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/BulkRead" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/BulkRead" +
            "CoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.ItemReadResultDictionary BulkRead(string[] ids, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/BulkRead" +
            "", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/BulkRead" +
            "Response")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ItemReadResultDictionary> BulkReadAsync(string[] ids, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadSche" +
            "maFields", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadSche" +
            "maFieldsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadSche" +
            "maFieldsCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.SchemaFieldsData ReadSchemaFields(string schemaId, bool expandEmbeddedFields, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadSche" +
            "maFields", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadSche" +
            "maFieldsResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.SchemaFieldsData> ReadSchemaFieldsAsync(string schemaId, bool expandEmbeddedFields, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertS" +
            "chemaFieldsToXsd", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertS" +
            "chemaFieldsToXsdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertS" +
            "chemaFieldsToXsdCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        System.Xml.Linq.XElement ConvertSchemaFieldsToXsd(Federation.Client.MyCoreService.SchemaFieldsData schemaFieldsData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertS" +
            "chemaFieldsToXsd", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertS" +
            "chemaFieldsToXsdResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> ConvertSchemaFieldsToXsdAsync(Federation.Client.MyCoreService.SchemaFieldsData schemaFieldsData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Save", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/SaveResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/SaveCore" +
            "ServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.IdentifiableObjectData Save(Federation.Client.MyCoreService.IdentifiableObjectData deltaData, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Save", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/SaveResp" +
            "onse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData> SaveAsync(Federation.Client.MyCoreService.IdentifiableObjectData deltaData, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Delete", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/DeleteRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/DeleteCo" +
            "reServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        void Delete(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Delete", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/DeleteRe" +
            "sponse")]
        System.Threading.Tasks.Task DeleteAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/DeleteTa" +
            "xonomyNode", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/DeleteTa" +
            "xonomyNodeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/DeleteTa" +
            "xonomyNodeCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        void DeleteTaxonomyNode(string id, Federation.Client.MyCoreService.DeleteTaxonomyNodeMode deleteTaxonomyNodeMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/DeleteTa" +
            "xonomyNode", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/DeleteTa" +
            "xonomyNodeResponse")]
        System.Threading.Tasks.Task DeleteTaxonomyNodeAsync(string id, Federation.Client.MyCoreService.DeleteTaxonomyNodeMode deleteTaxonomyNodeMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetDefau" +
            "ltData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetDefau" +
            "ltDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetDefau" +
            "ltDataCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.IdentifiableObjectData GetDefaultData(Federation.Client.MyCoreService.ItemType itemType, string containerId, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetDefau" +
            "ltData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetDefau" +
            "ltDataResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData> GetDefaultDataAsync(Federation.Client.MyCoreService.ItemType itemType, string containerId, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Move", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/MoveResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/MoveCore" +
            "ServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.RepositoryLocalObjectData Move(string id, string destinationId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Move", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/MoveResp" +
            "onse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.RepositoryLocalObjectData> MoveAsync(string id, string destinationId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Copy", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CopyResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CopyCore" +
            "ServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.RepositoryLocalObjectData Copy(string id, string destinationId, bool makeUnique, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Copy", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CopyResp" +
            "onse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.RepositoryLocalObjectData> CopyAsync(string id, string destinationId, bool makeUnique, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetInsta" +
            "nceData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetInsta" +
            "nceDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetInsta" +
            "nceDataCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.InstanceData GetInstanceData(string schemaId, string containerItemId, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetInsta" +
            "nceData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetInsta" +
            "nceDataResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.InstanceData> GetInstanceDataAsync(string schemaId, string containerItemId, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/TryCheck" +
            "Out", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/TryCheck" +
            "OutResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/TryCheck" +
            "OutCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.IdentifiableObjectData TryCheckOut(string id, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/TryCheck" +
            "Out", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/TryCheck" +
            "OutResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData> TryCheckOutAsync(string id, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CheckOut" +
            "", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CheckOut" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CheckOut" +
            "CoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.VersionedItemData CheckOut(string id, bool permanentLock, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CheckOut" +
            "", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CheckOut" +
            "Response")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.VersionedItemData> CheckOutAsync(string id, bool permanentLock, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CheckIn", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CheckInR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CheckInC" +
            "oreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.VersionedItemData CheckIn(string id, bool removePermanentLock, string userComment, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CheckIn", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CheckInR" +
            "esponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.VersionedItemData> CheckInAsync(string id, bool removePermanentLock, string userComment, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Update", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UpdateRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UpdateCo" +
            "reServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.IdentifiableObjectData Update(Federation.Client.MyCoreService.IdentifiableObjectData deltaData, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Update", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UpdateRe" +
            "sponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData> UpdateAsync(Federation.Client.MyCoreService.IdentifiableObjectData deltaData, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Create", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CreateRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CreateCo" +
            "reServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.IdentifiableObjectData Create(Federation.Client.MyCoreService.IdentifiableObjectData data, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Create", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CreateRe" +
            "sponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData> CreateAsync(Federation.Client.MyCoreService.IdentifiableObjectData data, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UndoChec" +
            "kOut", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UndoChec" +
            "kOutResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UndoChec" +
            "kOutCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.VersionedItemData UndoCheckOut(string id, bool permanentLock, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UndoChec" +
            "kOut", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UndoChec" +
            "kOutResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.VersionedItemData> UndoCheckOutAsync(string id, bool permanentLock, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Rollback" +
            "", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Rollback" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Rollback" +
            "CoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.VersionedItemData Rollback(string id, bool deleteVersions, string comment, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Rollback" +
            "", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Rollback" +
            "Response")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.VersionedItemData> RollbackAsync(string id, bool deleteVersions, string comment, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Localize" +
            "", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Localize" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Localize" +
            "CoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.RepositoryLocalObjectData Localize(string id, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Localize" +
            "", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Localize" +
            "Response")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.RepositoryLocalObjectData> LocalizeAsync(string id, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnLocali" +
            "ze", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnLocali" +
            "zeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnLocali" +
            "zeCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.RepositoryLocalObjectData UnLocalize(string id, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnLocali" +
            "ze", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnLocali" +
            "zeResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.RepositoryLocalObjectData> UnLocalizeAsync(string id, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Promote", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PromoteR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PromoteC" +
            "oreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.OperationResultDataOfRepositoryLocalObjectData Promote(string id, string destinationRepositoryId, Federation.Client.MyCoreService.OperationInstruction instruction, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Promote", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PromoteR" +
            "esponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.OperationResultDataOfRepositoryLocalObjectData> PromoteAsync(string id, string destinationRepositoryId, Federation.Client.MyCoreService.OperationInstruction instruction, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Demote", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/DemoteRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/DemoteCo" +
            "reServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.OperationResultDataOfRepositoryLocalObjectData Demote(string id, string destinationRepositoryId, Federation.Client.MyCoreService.OperationInstruction instruction, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Demote", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/DemoteRe" +
            "sponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.OperationResultDataOfRepositoryLocalObjectData> DemoteAsync(string id, string destinationRepositoryId, Federation.Client.MyCoreService.OperationInstruction instruction, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListT" +
            "emplateTypes", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListT" +
            "emplateTypesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListT" +
            "emplateTypesCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.TemplateType[] GetListTemplateTypes(System.Nullable<Federation.Client.MyCoreService.ItemType> itemType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListT" +
            "emplateTypes", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListT" +
            "emplateTypesResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.TemplateType[]> GetListTemplateTypesAsync(System.Nullable<Federation.Client.MyCoreService.ItemType> itemType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListP" +
            "ublicationTypes", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListP" +
            "ublicationTypesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListP" +
            "ublicationTypesCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.PublicationType[] GetListPublicationTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListP" +
            "ublicationTypes", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListP" +
            "ublicationTypesResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.PublicationType[]> GetListPublicationTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mWideListXml", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mWideListXmlResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mWideListXmlCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        System.Xml.Linq.XElement GetSystemWideListXml(Federation.Client.MyCoreService.SystemWideListFilterData filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mWideListXml", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mWideListXmlResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetSystemWideListXmlAsync(Federation.Client.MyCoreService.SystemWideListFilterData filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mWideList", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mWideListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mWideListCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.IdentifiableObjectData[] GetSystemWideList(Federation.Client.MyCoreService.SystemWideListFilterData filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mWideList", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mWideListResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData[]> GetSystemWideListAsync(Federation.Client.MyCoreService.SystemWideListFilterData filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListX" +
            "ml", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListX" +
            "mlResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListX" +
            "mlCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        System.Xml.Linq.XElement GetListXml(string id, Federation.Client.MyCoreService.SubjectRelatedListFilterData filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListX" +
            "ml", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListX" +
            "mlResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetListXmlAsync(string id, Federation.Client.MyCoreService.SubjectRelatedListFilterData filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetList", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListC" +
            "oreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.IdentifiableObjectData[] GetList(string id, Federation.Client.MyCoreService.SubjectRelatedListFilterData filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetList", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListR" +
            "esponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData[]> GetListAsync(string id, Federation.Client.MyCoreService.SubjectRelatedListFilterData filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceNames", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceNamesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceNamesCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string[] GetListDirectoryServiceNames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceNames", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceNamesResponse")]
        System.Threading.Tasks.Task<string[]> GetListDirectoryServiceNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListW" +
            "indowsDomainUsers", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListW" +
            "indowsDomainUsersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListW" +
            "indowsDomainUsersCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.WindowsUser[] GetListWindowsDomainUsers(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListW" +
            "indowsDomainUsers", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListW" +
            "indowsDomainUsersResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.WindowsUser[]> GetListWindowsDomainUsersAsync(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceAllUsers", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceAllUsersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceAllUsersCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.DirectoryServiceUser[] GetListDirectoryServiceAllUsers(string directoryServiceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceAllUsers", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceAllUsersResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.DirectoryServiceUser[]> GetListDirectoryServiceAllUsersAsync(string directoryServiceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceGroupMembers", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceGroupMembersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceGroupMembersCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.DirectoryServiceUser[] GetListDirectoryServiceGroupMembers(string directoryServiceName, string groupDN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceGroupMembers", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceGroupMembersResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.DirectoryServiceUser[]> GetListDirectoryServiceGroupMembersAsync(string directoryServiceName, string groupDN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceUsers", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceUsersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceUsersCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.DirectoryServiceUser[] GetListDirectoryServiceUsers(string directoryServiceName, Federation.Client.MyCoreService.DirectoryUsersFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceUsers", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListD" +
            "irectoryServiceUsersResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.DirectoryServiceUser[]> GetListDirectoryServiceUsersAsync(string directoryServiceName, Federation.Client.MyCoreService.DirectoryUsersFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Classify" +
            "", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Classify" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Classify" +
            "CoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.ClassificationInfoData Classify(string id, string[] keywordIds, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Classify" +
            "", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Classify" +
            "Response")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ClassificationInfoData> ClassifyAsync(string id, string[] keywordIds, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnClassi" +
            "fy", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnClassi" +
            "fyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnClassi" +
            "fyCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.ClassificationInfoData UnClassify(string id, string[] keywordIds, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnClassi" +
            "fy", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnClassi" +
            "fyResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ClassificationInfoData> UnClassifyAsync(string id, string[] keywordIds, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReClassi" +
            "fy", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReClassi" +
            "fyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReClassi" +
            "fyCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.ClassificationInfoData ReClassify(string id, string[] keywordIdsToRemove, string[] keywordIdsToAdd, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReClassi" +
            "fy", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReClassi" +
            "fyResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ClassificationInfoData> ReClassifyAsync(string id, string[] keywordIdsToRemove, string[] keywordIdsToAdd, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/StartAct" +
            "ivity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/StartAct" +
            "ivityResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/StartAct" +
            "ivityCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.ActivityInstanceData StartActivity(string activityInstanceId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/StartAct" +
            "ivity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/StartAct" +
            "ivityResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ActivityInstanceData> StartActivityAsync(string activityInstanceId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/SuspendA" +
            "ctivity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/SuspendA" +
            "ctivityResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/SuspendA" +
            "ctivityCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.ActivityInstanceData SuspendActivity(string activityInstanceId, string reason, System.Nullable<System.DateTime> resumeAt, string resumeBookmark, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/SuspendA" +
            "ctivity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/SuspendA" +
            "ctivityResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ActivityInstanceData> SuspendActivityAsync(string activityInstanceId, string reason, System.Nullable<System.DateTime> resumeAt, string resumeBookmark, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RestartA" +
            "ctivity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RestartA" +
            "ctivityResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RestartA" +
            "ctivityCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.ActivityInstanceData RestartActivity(string activityInstanceId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RestartA" +
            "ctivity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RestartA" +
            "ctivityResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ActivityInstanceData> RestartActivityAsync(string activityInstanceId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReAssign" +
            "Activity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReAssign" +
            "ActivityResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReAssign" +
            "ActivityCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.ActivityInstanceData ReAssignActivity(string activityInstanceId, string newAssigneeId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReAssign" +
            "Activity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReAssign" +
            "ActivityResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ActivityInstanceData> ReAssignActivityAsync(string activityInstanceId, string newAssigneeId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/FinishAc" +
            "tivity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/FinishAc" +
            "tivityResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/FinishAc" +
            "tivityCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.ActivityInstanceData FinishActivity(string activityInstanceId, Federation.Client.MyCoreService.ActivityFinishData activityFinishData, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/FinishAc" +
            "tivity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/FinishAc" +
            "tivityResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ActivityInstanceData> FinishActivityAsync(string activityInstanceId, Federation.Client.MyCoreService.ActivityFinishData activityFinishData, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ForceFin" +
            "ishProcess", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ForceFin" +
            "ishProcessResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ForceFin" +
            "ishProcessCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.ProcessHistoryData ForceFinishProcess(string processInstanceId, string approvalStatusId, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ForceFin" +
            "ishProcess", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ForceFin" +
            "ishProcessResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ProcessHistoryData> ForceFinishProcessAsync(string processInstanceId, string approvalStatusId, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResumeAc" +
            "tivity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResumeAc" +
            "tivityResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResumeAc" +
            "tivityCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.ActivityInstanceData ResumeActivity(string activityInstanceId, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResumeAc" +
            "tivity", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResumeAc" +
            "tivityResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ActivityInstanceData> ResumeActivityAsync(string activityInstanceId, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListQ" +
            "ueueMessages", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListQ" +
            "ueueMessagesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListQ" +
            "ueueMessagesCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.QueueMessageData[] GetListQueueMessages(int queueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListQ" +
            "ueueMessages", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListQ" +
            "ueueMessagesResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.QueueMessageData[]> GetListQueueMessagesAsync(int queueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeQue" +
            "ue", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeQue" +
            "ueResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeQue" +
            "ueCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        void PurgeQueue(int queueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeQue" +
            "ue", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeQue" +
            "ueResponse")]
        System.Threading.Tasks.Task PurgeQueueAsync(int queueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListQ" +
            "ueues", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListQ" +
            "ueuesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListQ" +
            "ueuesCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.QueueData[] GetListQueues();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListQ" +
            "ueues", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListQ" +
            "ueuesResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.QueueData[]> GetListQueuesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadAppl" +
            "icationData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadAppl" +
            "icationDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadAppl" +
            "icationDataCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.ApplicationData ReadApplicationData(string subjectId, string applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadAppl" +
            "icationData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadAppl" +
            "icationDataResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ApplicationData> ReadApplicationDataAsync(string subjectId, string applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadAllA" +
            "pplicationData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadAllA" +
            "pplicationDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadAllA" +
            "pplicationDataCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.ApplicationData[] ReadAllApplicationData(string subjectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadAllA" +
            "pplicationData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadAllA" +
            "pplicationDataResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ApplicationData[]> ReadAllApplicationDataAsync(string subjectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/SaveAppl" +
            "icationData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/SaveAppl" +
            "icationDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/SaveAppl" +
            "icationDataCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        void SaveApplicationData(string subjectId, Federation.Client.MyCoreService.ApplicationData[] applicationData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/SaveAppl" +
            "icationData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/SaveAppl" +
            "icationDataResponse")]
        System.Threading.Tasks.Task SaveApplicationDataAsync(string subjectId, Federation.Client.MyCoreService.ApplicationData[] applicationData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/DeleteAp" +
            "plicationData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/DeleteAp" +
            "plicationDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/DeleteAp" +
            "plicationDataCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        void DeleteApplicationData(string subjectId, string applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/DeleteAp" +
            "plicationData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/DeleteAp" +
            "plicationDataResponse")]
        System.Threading.Tasks.Task DeleteApplicationDataAsync(string subjectId, string applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetAppli" +
            "cationIds", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetAppli" +
            "cationIdsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetAppli" +
            "cationIdsCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string[] GetApplicationIds();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetAppli" +
            "cationIds", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetAppli" +
            "cationIdsResponse")]
        System.Threading.Tasks.Task<string[]> GetApplicationIdsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeApp" +
            "licationData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeApp" +
            "licationDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeApp" +
            "licationDataCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        void PurgeApplicationData(string applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeApp" +
            "licationData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeApp" +
            "licationDataResponse")]
        System.Threading.Tasks.Task PurgeApplicationDataAsync(string applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ParsePre" +
            "definedBatchOperation", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ParsePre" +
            "definedBatchOperationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ParsePre" +
            "definedBatchOperationCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        System.Nullable<Federation.Client.MyCoreService.PredefinedBatchOperation> ParsePredefinedBatchOperation(string operation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ParsePre" +
            "definedBatchOperation", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ParsePre" +
            "definedBatchOperationResponse")]
        System.Threading.Tasks.Task<System.Nullable<Federation.Client.MyCoreService.PredefinedBatchOperation>> ParsePredefinedBatchOperationAsync(string operation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetPrede" +
            "finedBatchOperationName", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetPrede" +
            "finedBatchOperationNameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetPrede" +
            "finedBatchOperationNameCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string GetPredefinedBatchOperationName(Federation.Client.MyCoreService.PredefinedBatchOperation operation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetPrede" +
            "finedBatchOperationName", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetPrede" +
            "finedBatchOperationNameResponse")]
        System.Threading.Tasks.Task<string> GetPredefinedBatchOperationNameAsync(Federation.Client.MyCoreService.PredefinedBatchOperation operation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResolveI" +
            "tems", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResolveI" +
            "temsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResolveI" +
            "temsCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.PublishContextData[] ResolveItems(string[] ids, Federation.Client.MyCoreService.ResolveInstructionData resolveInstruction, string[] targetIdsOrPurposes, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResolveI" +
            "tems", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResolveI" +
            "temsResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.PublishContextData[]> ResolveItemsAsync(string[] ids, Federation.Client.MyCoreService.ResolveInstructionData resolveInstruction, string[] targetIdsOrPurposes, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsXml", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsXmlResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsXmlCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        System.Xml.Linq.XElement GetSearchResultsXml(Federation.Client.MyCoreService.SearchQueryData filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsXml", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsXmlResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetSearchResultsXmlAsync(Federation.Client.MyCoreService.SearchQueryData filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsXmlPaged", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsXmlPagedResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsXmlPagedCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        System.Xml.Linq.XElement GetSearchResultsXmlPaged(Federation.Client.MyCoreService.SearchQueryData filter, int startRowIndex, int maxRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsXmlPaged", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsXmlPagedResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetSearchResultsXmlPagedAsync(Federation.Client.MyCoreService.SearchQueryData filter, int startRowIndex, int maxRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResults", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.IdentifiableObjectData[] GetSearchResults(Federation.Client.MyCoreService.SearchQueryData filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResults", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData[]> GetSearchResultsAsync(Federation.Client.MyCoreService.SearchQueryData filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsPaged", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsPagedResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsPagedCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.IdentifiableObjectData[] GetSearchResultsPaged(Federation.Client.MyCoreService.SearchQueryData filter, int startRowIndex, int maxRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsPaged", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSearc" +
            "hResultsPagedResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData[]> GetSearchResultsPagedAsync(Federation.Client.MyCoreService.SearchQueryData filter, int startRowIndex, int maxRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RenderIt" +
            "em", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RenderIt" +
            "emResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RenderIt" +
            "emCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.RenderedItemData RenderItem(string itemId, string templateId, Federation.Client.MyCoreService.PublishInstructionData publishInstruction, string publicationTargetIdOrPurpose);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RenderIt" +
            "em", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RenderIt" +
            "emResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.RenderedItemData> RenderItemAsync(string itemId, string templateId, Federation.Client.MyCoreService.PublishInstructionData publishInstruction, string publicationTargetIdOrPurpose);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PreviewI" +
            "tem", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PreviewI" +
            "temResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PreviewI" +
            "temCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.RenderedItemData PreviewItem(Federation.Client.MyCoreService.RepositoryLocalObjectData itemData, Federation.Client.MyCoreService.TemplateData templateData, Federation.Client.MyCoreService.PublishInstructionData publishInstruction, string publicationTargetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PreviewI" +
            "tem", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PreviewI" +
            "temResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.RenderedItemData> PreviewItemAsync(Federation.Client.MyCoreService.RepositoryLocalObjectData itemData, Federation.Client.MyCoreService.TemplateData templateData, Federation.Client.MyCoreService.PublishInstructionData publishInstruction, string publicationTargetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Publish", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PublishR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PublishC" +
            "oreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.PublishTransactionData[] Publish(string[] ids, Federation.Client.MyCoreService.PublishInstructionData publishInstruction, string[] targetIdsOrPurposes, System.Nullable<Federation.Client.MyCoreService.PublishPriority> priority, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Publish", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PublishR" +
            "esponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.PublishTransactionData[]> PublishAsync(string[] ids, Federation.Client.MyCoreService.PublishInstructionData publishInstruction, string[] targetIdsOrPurposes, System.Nullable<Federation.Client.MyCoreService.PublishPriority> priority, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnPublis" +
            "h", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnPublis" +
            "hResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnPublis" +
            "hCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.PublishTransactionData[] UnPublish(string[] ids, Federation.Client.MyCoreService.UnPublishInstructionData unPublishInstruction, string[] targetIdsOrPurposes, System.Nullable<Federation.Client.MyCoreService.PublishPriority> priority, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnPublis" +
            "h", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnPublis" +
            "hResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.PublishTransactionData[]> UnPublishAsync(string[] ids, Federation.Client.MyCoreService.UnPublishInstructionData unPublishInstruction, string[] targetIdsOrPurposes, System.Nullable<Federation.Client.MyCoreService.PublishPriority> priority, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/IsPublis" +
            "hed", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/IsPublis" +
            "hedResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/IsPublis" +
            "hedCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        bool IsPublished(string itemId, string publishingTargetIdOrPurpose, bool isPublishedInContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/IsPublis" +
            "hed", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/IsPublis" +
            "hedResponse")]
        System.Threading.Tasks.Task<bool> IsPublishedAsync(string itemId, string publishingTargetIdOrPurpose, bool isPublishedInContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetWorkI" +
            "temSnapshot", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetWorkI" +
            "temSnapshotResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetWorkI" +
            "temSnapshotCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.RenderedItemData GetWorkItemSnapshot(string workItemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetWorkI" +
            "temSnapshot", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetWorkI" +
            "temSnapshotResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.RenderedItemData> GetWorkItemSnapshotAsync(string workItemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListP" +
            "ublishInfo", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListP" +
            "ublishInfoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListP" +
            "ublishInfoCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.PublishInfoData[] GetListPublishInfo(string itemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListP" +
            "ublishInfo", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListP" +
            "ublishInfoResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.PublishInfoData[]> GetListPublishInfoAsync(string itemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CastActi" +
            "ons", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CastActi" +
            "onsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CastActi" +
            "onsCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.ActionFlags CastActions(int numericActions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CastActi" +
            "ons", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CastActi" +
            "onsResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ActionFlags> CastActionsAsync(int numericActions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Validate" +
            "Xml", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Validate" +
            "XmlResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Validate" +
            "XmlCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        void ValidateXml(Federation.Client.MyCoreService.IdentifiableObjectData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Validate" +
            "Xml", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Validate" +
            "XmlResponse")]
        System.Threading.Tasks.Task ValidateXmlAsync(Federation.Client.MyCoreService.IdentifiableObjectData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/IsValidT" +
            "ridionWebSchemaXml", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/IsValidT" +
            "ridionWebSchemaXmlResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/IsValidT" +
            "ridionWebSchemaXmlCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        bool IsValidTridionWebSchemaXml(Federation.Client.MyCoreService.SchemaData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/IsValidT" +
            "ridionWebSchemaXml", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/IsValidT" +
            "ridionWebSchemaXmlResponse")]
        System.Threading.Tasks.Task<bool> IsValidTridionWebSchemaXmlAsync(Federation.Client.MyCoreService.SchemaData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSubje" +
            "ctIdsWithApplicationData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSubje" +
            "ctIdsWithApplicationDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSubje" +
            "ctIdsWithApplicationDataCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.ArrayOfTcmUri GetSubjectIdsWithApplicationData(string applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSubje" +
            "ctIdsWithApplicationData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSubje" +
            "ctIdsWithApplicationDataResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ArrayOfTcmUri> GetSubjectIdsWithApplicationDataAsync(string applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadAppl" +
            "icationDataForSubjectsIds", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadAppl" +
            "icationDataForSubjectsIdsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadAppl" +
            "icationDataForSubjectsIdsCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.ApplicationDataDictionary ReadApplicationDataForSubjectsIds(string[] subjectIds, string[] applicationIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadAppl" +
            "icationDataForSubjectsIds", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReadAppl" +
            "icationDataForSubjectsIdsResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ApplicationDataDictionary> ReadApplicationDataForSubjectsIdsAsync(string[] subjectIds, string[] applicationIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSecur" +
            "ityDescriptorsForSubjectsIds", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSecur" +
            "ityDescriptorsForSubjectsIdsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSecur" +
            "ityDescriptorsForSubjectsIdsCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.SecurityDescriptorDataDictionary GetSecurityDescriptorsForSubjectsIds(string[] subjectIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSecur" +
            "ityDescriptorsForSubjectsIds", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSecur" +
            "ityDescriptorsForSubjectsIdsResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.SecurityDescriptorDataDictionary> GetSecurityDescriptorsForSubjectsIdsAsync(string[] subjectIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetConte" +
            "ntSecurityDescriptorsForOrgItemIds", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetConte" +
            "ntSecurityDescriptorsForOrgItemIdsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetConte" +
            "ntSecurityDescriptorsForOrgItemIdsCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.SecurityDescriptorDataDictionary GetContentSecurityDescriptorsForOrgItemIds(string[] organizationalItemIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetConte" +
            "ntSecurityDescriptorsForOrgItemIds", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetConte" +
            "ntSecurityDescriptorsForOrgItemIdsResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.SecurityDescriptorDataDictionary> GetContentSecurityDescriptorsForOrgItemIdsAsync(string[] organizationalItemIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReIndex", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReIndexR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReIndexC" +
            "oreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        void ReIndex(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReIndex", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ReIndexR" +
            "esponse")]
        System.Threading.Tasks.Task ReIndexAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CastPred" +
            "efinedQueue", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CastPred" +
            "efinedQueueResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CastPred" +
            "efinedQueueCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        System.Nullable<Federation.Client.MyCoreService.PredefinedQueue> CastPredefinedQueue(int queueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CastPred" +
            "efinedQueue", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CastPred" +
            "efinedQueueResponse")]
        System.Threading.Tasks.Task<System.Nullable<Federation.Client.MyCoreService.PredefinedQueue>> CastPredefinedQueueAsync(int queueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeOld" +
            "Versions", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeOld" +
            "VersionsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeOld" +
            "VersionsCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        int PurgeOldVersions(Federation.Client.MyCoreService.PurgeOldVersionsInstructionData instruction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeOld" +
            "Versions", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeOld" +
            "VersionsResponse")]
        System.Threading.Tasks.Task<int> PurgeOldVersionsAsync(Federation.Client.MyCoreService.PurgeOldVersionsInstructionData instruction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListE" +
            "xternalLinks", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListE" +
            "xternalLinksResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListE" +
            "xternalLinksCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        System.Xml.Linq.XElement GetListExternalLinks(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListE" +
            "xternalLinks", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListE" +
            "xternalLinksResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetListExternalLinksAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertX" +
            "mlToSearchQuery", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertX" +
            "mlToSearchQueryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertX" +
            "mlToSearchQueryCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.SearchQueryData ConvertXmlToSearchQuery(System.Xml.Linq.XElement searchQueryXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertX" +
            "mlToSearchQuery", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertX" +
            "mlToSearchQueryResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.SearchQueryData> ConvertXmlToSearchQueryAsync(System.Xml.Linq.XElement searchQueryXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertS" +
            "earchQueryToXml", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertS" +
            "earchQueryToXmlResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertS" +
            "earchQueryToXmlCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        System.Xml.Linq.XElement ConvertSearchQueryToXml(Federation.Client.MyCoreService.SearchQueryData searchQueryData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertS" +
            "earchQueryToXml", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertS" +
            "earchQueryToXmlResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> ConvertSearchQueryToXmlAsync(Federation.Client.MyCoreService.SearchQueryData searchQueryData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetVirtu" +
            "alFolderTypeSchema", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetVirtu" +
            "alFolderTypeSchemaResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetVirtu" +
            "alFolderTypeSchemaCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.SchemaData GetVirtualFolderTypeSchema(string namespaceUri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetVirtu" +
            "alFolderTypeSchema", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetVirtu" +
            "alFolderTypeSchemaResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.SchemaData> GetVirtualFolderTypeSchemaAsync(string namespaceUri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetEnumV" +
            "alues", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetEnumV" +
            "aluesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetEnumV" +
            "aluesCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.TridionEnumValue[] GetEnumValues(string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetEnumV" +
            "alues", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetEnumV" +
            "aluesResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.TridionEnumValue[]> GetEnumValuesAsync(string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResolveB" +
            "undleTypes", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResolveB" +
            "undleTypesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResolveB" +
            "undleTypesCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.BundleTypeData[] ResolveBundleTypes(string[] itemIds, bool pruneTree);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResolveB" +
            "undleTypes", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResolveB" +
            "undleTypesResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.BundleTypeData[]> ResolveBundleTypesAsync(string[] itemIds, bool pruneTree);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CopyToKe" +
            "yword", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CopyToKe" +
            "ywordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CopyToKe" +
            "ywordCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.KeywordData CopyToKeyword(string sourceKeywordId, string destinationId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CopyToKe" +
            "yword", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/CopyToKe" +
            "ywordResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.KeywordData> CopyToKeywordAsync(string sourceKeywordId, string destinationId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/MoveToKe" +
            "yword", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/MoveToKe" +
            "ywordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/MoveToKe" +
            "ywordCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.KeywordData MoveToKeyword(string sourceKeywordId, string destinationId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/MoveToKe" +
            "yword", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/MoveToKe" +
            "ywordResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.KeywordData> MoveToKeywordAsync(string sourceKeywordId, string destinationId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetTridi" +
            "onLanguages", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetTridi" +
            "onLanguagesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetTridi" +
            "onLanguagesCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.TridionLanguageInfo[] GetTridionLanguages();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetTridi" +
            "onLanguages", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetTridi" +
            "onLanguagesResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.TridionLanguageInfo[]> GetTridionLanguagesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListW" +
            "orkflowScriptTypes", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListW" +
            "orkflowScriptTypesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListW" +
            "orkflowScriptTypesCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.WorkflowScriptType[] GetListWorkflowScriptTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListW" +
            "orkflowScriptTypes", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetListW" +
            "orkflowScriptTypesResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.WorkflowScriptType[]> GetListWorkflowScriptTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/AddToWor" +
            "kflow", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/AddToWor" +
            "kflowResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/AddToWor" +
            "kflowCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.WorkItemData[] AddToWorkflow(string[] subjectIds, string activityInstanceId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/AddToWor" +
            "kflow", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/AddToWor" +
            "kflowResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.WorkItemData[]> AddToWorkflowAsync(string[] subjectIds, string activityInstanceId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RemoveFr" +
            "omWorkflow", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RemoveFr" +
            "omWorkflowResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RemoveFr" +
            "omWorkflowCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.WorkItemData[] RemoveFromWorkflow(string[] subjectIds, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RemoveFr" +
            "omWorkflow", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RemoveFr" +
            "omWorkflowResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.WorkItemData[]> RemoveFromWorkflowAsync(string[] subjectIds, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Lock", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/LockResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/LockCore" +
            "ServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.OrganizationalItemData Lock(string organizationalItemId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Lock", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/LockResp" +
            "onse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.OrganizationalItemData> LockAsync(string organizationalItemId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Unlock", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnlockRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnlockCo" +
            "reServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.OrganizationalItemData Unlock(string organizationalItemId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Unlock", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/UnlockRe" +
            "sponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.OrganizationalItemData> UnlockAsync(string organizationalItemId, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/StartWor" +
            "kflow", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/StartWor" +
            "kflowResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/StartWor" +
            "kflowCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.ProcessInstanceData StartWorkflow(string repositoryId, Federation.Client.MyCoreService.StartWorkflowInstructionData instruction, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/StartWor" +
            "kflow", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/StartWor" +
            "kflowResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ProcessInstanceData> StartWorkflowAsync(string repositoryId, Federation.Client.MyCoreService.StartWorkflowInstructionData instruction, Federation.Client.MyCoreService.ReadOptions readBackOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetProce" +
            "ssDefinitionsForItems", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetProce" +
            "ssDefinitionsForItemsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetProce" +
            "ssDefinitionsForItemsCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.ProcessDefinitionAssociationDictionary GetProcessDefinitionsForItems(string[] itemIds, Federation.Client.MyCoreService.ProcessDefinitionType processDefinitionType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetProce" +
            "ssDefinitionsForItems", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetProce" +
            "ssDefinitionsForItemsResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ProcessDefinitionAssociationDictionary> GetProcessDefinitionsForItemsAsync(string[] itemIds, Federation.Client.MyCoreService.ProcessDefinitionType processDefinitionType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mXsd", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mXsdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mXsdCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string GetSystemXsd(string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mXsd", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mXsdResponse")]
        System.Threading.Tasks.Task<string> GetSystemXsdAsync(string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSchem" +
            "asByNamespaceUri", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSchem" +
            "asByNamespaceUriResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSchem" +
            "asByNamespaceUriCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.LinkToSchemaData[] GetSchemasByNamespaceUri(string repositoryId, string namespaceUri, string rootElementName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSchem" +
            "asByNamespaceUri", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSchem" +
            "asByNamespaceUriResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.LinkToSchemaData[]> GetSchemasByNamespaceUriAsync(string repositoryId, string namespaceUri, string rootElementName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Validate" +
            "", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Validate" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Validate" +
            "CoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.ValidationErrorData[] Validate(Federation.Client.MyCoreService.IdentifiableObjectData deltaData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Validate" +
            "", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Validate" +
            "Response")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ValidationErrorData[]> ValidateAsync(Federation.Client.MyCoreService.IdentifiableObjectData deltaData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetExter" +
            "nalBinaryContentData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetExter" +
            "nalBinaryContentDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetExter" +
            "nalBinaryContentDataCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.BinaryContentData GetExternalBinaryContentData(string uri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetExter" +
            "nalBinaryContentData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetExter" +
            "nalBinaryContentDataResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.BinaryContentData> GetExternalBinaryContentDataAsync(string uri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Synchron" +
            "izeWithSchema", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Synchron" +
            "izeWithSchemaResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Synchron" +
            "izeWithSchemaCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.SynchronizationResult SynchronizeWithSchema(Federation.Client.MyCoreService.IdentifiableObjectData dataObject, Federation.Client.MyCoreService.SynchronizeOptions synchronizeOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Synchron" +
            "izeWithSchema", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Synchron" +
            "izeWithSchemaResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.SynchronizationResult> SynchronizeWithSchemaAsync(Federation.Client.MyCoreService.IdentifiableObjectData dataObject, Federation.Client.MyCoreService.SynchronizeOptions synchronizeOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Synchron" +
            "izeWithSchemaAndUpdate", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Synchron" +
            "izeWithSchemaAndUpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Synchron" +
            "izeWithSchemaAndUpdateCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        Federation.Client.MyCoreService.SynchronizationResult SynchronizeWithSchemaAndUpdate(string itemId, Federation.Client.MyCoreService.SynchronizeOptions synchronizeOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Synchron" +
            "izeWithSchemaAndUpdate", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Synchron" +
            "izeWithSchemaAndUpdateResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.SynchronizationResult> SynchronizeWithSchemaAndUpdateAsync(string itemId, Federation.Client.MyCoreService.SynchronizeOptions synchronizeOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Decommis" +
            "sionPublicationTarget", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Decommis" +
            "sionPublicationTargetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Decommis" +
            "sionPublicationTargetCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        void DecommissionPublicationTarget(string publicationTargetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Decommis" +
            "sionPublicationTarget", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Decommis" +
            "sionPublicationTargetResponse")]
        System.Threading.Tasks.Task DecommissionPublicationTargetAsync(string publicationTargetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertX" +
            "sdToSchemaFields", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertX" +
            "sdToSchemaFieldsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertX" +
            "sdToSchemaFieldsCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.SchemaFieldsData ConvertXsdToSchemaFields(System.Xml.Linq.XElement xsd, Federation.Client.MyCoreService.SchemaPurpose purpose, string rootElementName, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertX" +
            "sdToSchemaFields", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ConvertX" +
            "sdToSchemaFieldsResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.SchemaFieldsData> ConvertXsdToSchemaFieldsAsync(System.Xml.Linq.XElement xsd, Federation.Client.MyCoreService.SchemaPurpose purpose, string rootElementName, Federation.Client.MyCoreService.ReadOptions readOptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetPubli" +
            "shUrl", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetPubli" +
            "shUrlResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetPubli" +
            "shUrlCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string GetPublishUrl(string id, string targetTypeIdOrPurpose);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetPubli" +
            "shUrl", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetPubli" +
            "shUrlResponse")]
        System.Threading.Tasks.Task<string> GetPublishUrlAsync(string id, string targetTypeIdOrPurpose);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetBusin" +
            "essProcessTypes", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetBusin" +
            "essProcessTypesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetBusin" +
            "essProcessTypesCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.LinkToBusinessProcessTypeData[] GetBusinessProcessTypes(string cdTopologyTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetBusin" +
            "essProcessTypes", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetBusin" +
            "essProcessTypesResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.LinkToBusinessProcessTypeData[]> GetBusinessProcessTypesAsync(string cdTopologyTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetPubli" +
            "shSourceByUrl", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetPubli" +
            "shSourceByUrlResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetPubli" +
            "shSourceByUrlCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.PublishSourceData GetPublishSourceByUrl(string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetPubli" +
            "shSourceByUrl", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetPubli" +
            "shSourceByUrlResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.PublishSourceData> GetPublishSourceByUrlAsync(string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RemovePu" +
            "blishStates", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RemovePu" +
            "blishStatesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RemovePu" +
            "blishStatesCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        void RemovePublishStates(string publicationId, string targetTypeIdOrPurpose);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RemovePu" +
            "blishStates", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/RemovePu" +
            "blishStatesResponse")]
        System.Threading.Tasks.Task RemovePublishStatesAsync(string publicationId, string targetTypeIdOrPurpose);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResolveC" +
            "ontainingPages", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResolveC" +
            "ontainingPagesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResolveC" +
            "ontainingPagesCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.ContainingPagesDictionary ResolveContainingPages(string componentId, Federation.Client.MyCoreService.ResolveContainingPagesInstructionData instruction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResolveC" +
            "ontainingPages", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/ResolveC" +
            "ontainingPagesResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.ContainingPagesDictionary> ResolveContainingPagesAsync(string componentId, Federation.Client.MyCoreService.ResolveContainingPagesInstructionData instruction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeWor" +
            "kflowHistory", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeWor" +
            "kflowHistoryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeWor" +
            "kflowHistoryCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        void PurgeWorkflowHistory(Federation.Client.MyCoreService.PurgeWorkflowHistoryInstructionData instruction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeWor" +
            "kflowHistory", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/PurgeWor" +
            "kflowHistoryResponse")]
        System.Threading.Tasks.Task PurgeWorkflowHistoryAsync(Federation.Client.MyCoreService.PurgeWorkflowHistoryInstructionData instruction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Broadcas" +
            "tNotification", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Broadcas" +
            "tNotificationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Broadcas" +
            "tNotificationCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        void BroadcastNotification(Federation.Client.MyCoreService.NotificationMessage notification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Broadcas" +
            "tNotification", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/Broadcas" +
            "tNotificationResponse")]
        System.Threading.Tasks.Task BroadcastNotificationAsync(Federation.Client.MyCoreService.NotificationMessage notification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mPrivileges", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mPrivilegesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mPrivilegesCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.SystemPrivilege[] GetSystemPrivileges();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mPrivileges", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ICoreService/GetSyste" +
            "mPrivilegesResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.SystemPrivilege[]> GetSystemPrivilegesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/Impersonate", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/ImpersonateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/ImpersonateCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.AccessTokenData Impersonate(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/Impersonate", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/ImpersonateResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.AccessTokenData> ImpersonateAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/ImpersonateWithToken", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/ImpersonateWithTokenResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/ImpersonateWithTokenCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        void ImpersonateWithToken(Federation.Client.MyCoreService.AccessTokenData accessToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/ImpersonateWithToken", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/ImpersonateWithTokenResponse")]
        System.Threading.Tasks.Task ImpersonateWithTokenAsync(Federation.Client.MyCoreService.AccessTokenData accessToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/ImpersonateWithClaims", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/ImpersonateWithClaimsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/ImpersonateWithClaimsCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.AccessTokenData ImpersonateWithClaims(Federation.Client.MyCoreService.ClaimData[] claims);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/ImpersonateWithClaims", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/ImpersonateWithClaimsResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.AccessTokenData> ImpersonateWithClaimsAsync(Federation.Client.MyCoreService.ClaimData[] claims);
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, IsInitiating=false, Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/TerminateSession", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/TerminateSessionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/TerminateSessionCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        void TerminateSession();
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, IsInitiating=false, Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/TerminateSession", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/TerminateSessionResponse")]
        System.Threading.Tasks.Task TerminateSessionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/GetSessionId", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/GetSessionIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/GetSessionIdCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        string GetSessionId();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/GetSessionId", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/GetSessionIdResponse")]
        System.Threading.Tasks.Task<string> GetSessionIdAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/SetSessionContextData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/SetSessionContextDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/SetSessionContextDataCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        void SetSessionContextData(Federation.Client.MyCoreService.ApplicationData appData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/SetSessionContextData", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/SetSessionContextDataResponse")]
        System.Threading.Tasks.Task SetSessionContextDataAsync(Federation.Client.MyCoreService.ApplicationData appData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/SetSessionTransactionTimeout", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/SetSessionTransactionTimeoutResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/SetSessionTransactionTimeoutCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        void SetSessionTransactionTimeout(int transactionTimeout);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/SetSessionTransactionTimeout", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/SetSessionTransactionTimeoutResponse")]
        System.Threading.Tasks.Task SetSessionTransactionTimeoutAsync(int transactionTimeout);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/GetSessionTransactionTimeout", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/GetSessionTransactionTimeoutResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/GetSessionTransactionTimeoutCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        int GetSessionTransactionTimeout();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/GetSessionTransactionTimeout", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/GetSessionTransactionTimeoutResponse")]
        System.Threading.Tasks.Task<int> GetSessionTransactionTimeoutAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/StartCaching", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/StartCachingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/StartCachingCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        bool StartCaching();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/StartCaching", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/StartCachingResponse")]
        System.Threading.Tasks.Task<bool> StartCachingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/StopCaching", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/StopCachingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/StopCachingCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        void StopCaching();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/StopCaching", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/StopCachingResponse")]
        System.Threading.Tasks.Task StopCachingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/SetWebDavUrlPrefix", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/SetWebDavUrlPrefixResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/SetWebDavUrlPrefixCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        void SetWebDavUrlPrefix(string prefix);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/SetWebDavUrlPrefix", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/SetWebDavUrlPrefixResponse")]
        System.Threading.Tasks.Task SetWebDavUrlPrefixAsync(string prefix);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/EnlistInTransaction", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/EnlistInTransactionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/EnlistInTransactionCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        void EnlistInTransaction();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/EnlistInTransaction", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/EnlistInTransactionResponse")]
        System.Threading.Tasks.Task EnlistInTransactionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/ElevatePrivileges", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/ElevatePrivilegesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/ElevatePrivilegesCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.UserData ElevatePrivileges(Federation.Client.MyCoreService.Privileges privileges);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/ElevatePrivileges", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/ElevatePrivilegesResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.UserData> ElevatePrivilegesAsync(Federation.Client.MyCoreService.Privileges privileges);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/RestorePrivileges", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/RestorePrivilegesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Federation.Client.MyCoreService.CoreServiceFault), Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/RestorePrivilegesCoreServiceFaultFault", Name="CoreServiceFault", Namespace="http://www.sdltridion.com/ContentManager/R6")]
        Federation.Client.MyCoreService.UserData RestorePrivileges();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/RestorePrivileges", ReplyAction="http://www.sdltridion.com/ContentManager/CoreService/201603/ISessionAwareCoreServ" +
            "ice/RestorePrivilegesResponse")]
        System.Threading.Tasks.Task<Federation.Client.MyCoreService.UserData> RestorePrivilegesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISessionAwareCoreServiceChannel : Federation.Client.MyCoreService.ISessionAwareCoreService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SessionAwareCoreServiceClient : System.ServiceModel.ClientBase<Federation.Client.MyCoreService.ISessionAwareCoreService>, Federation.Client.MyCoreService.ISessionAwareCoreService {
        
        public SessionAwareCoreServiceClient() {
        }
        
        public SessionAwareCoreServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SessionAwareCoreServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SessionAwareCoreServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SessionAwareCoreServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetApiVersion() {
            return base.Channel.GetApiVersion();
        }
        
        public System.Threading.Tasks.Task<string> GetApiVersionAsync() {
            return base.Channel.GetApiVersionAsync();
        }
        
        public Federation.Client.MyCoreService.AccessTokenData GetCurrentUser() {
            return base.Channel.GetCurrentUser();
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.AccessTokenData> GetCurrentUserAsync() {
            return base.Channel.GetCurrentUserAsync();
        }
        
        public bool IsExistingObject(string id) {
            return base.Channel.IsExistingObject(id);
        }
        
        public System.Threading.Tasks.Task<bool> IsExistingObjectAsync(string id) {
            return base.Channel.IsExistingObjectAsync(id);
        }
        
        public string GetTcmUri(string baseUri, string contextRepositoryUri, System.Nullable<uint> version) {
            return base.Channel.GetTcmUri(baseUri, contextRepositoryUri, version);
        }
        
        public System.Threading.Tasks.Task<string> GetTcmUriAsync(string baseUri, string contextRepositoryUri, System.Nullable<uint> version) {
            return base.Channel.GetTcmUriAsync(baseUri, contextRepositoryUri, version);
        }
        
        public string TryGetTcmUri(string baseUri, string contextRepositoryUri, System.Nullable<uint> version) {
            return base.Channel.TryGetTcmUri(baseUri, contextRepositoryUri, version);
        }
        
        public System.Threading.Tasks.Task<string> TryGetTcmUriAsync(string baseUri, string contextRepositoryUri, System.Nullable<uint> version) {
            return base.Channel.TryGetTcmUriAsync(baseUri, contextRepositoryUri, version);
        }
        
        public Federation.Client.MyCoreService.IdentifiableObjectData Read(string id, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.Read(id, readOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData> ReadAsync(string id, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.ReadAsync(id, readOptions);
        }
        
        public Federation.Client.MyCoreService.IdentifiableObjectData TryRead(string id, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.TryRead(id, readOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData> TryReadAsync(string id, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.TryReadAsync(id, readOptions);
        }
        
        public Federation.Client.MyCoreService.ItemReadResultDictionary BulkRead(string[] ids, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.BulkRead(ids, readOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ItemReadResultDictionary> BulkReadAsync(string[] ids, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.BulkReadAsync(ids, readOptions);
        }
        
        public Federation.Client.MyCoreService.SchemaFieldsData ReadSchemaFields(string schemaId, bool expandEmbeddedFields, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.ReadSchemaFields(schemaId, expandEmbeddedFields, readOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.SchemaFieldsData> ReadSchemaFieldsAsync(string schemaId, bool expandEmbeddedFields, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.ReadSchemaFieldsAsync(schemaId, expandEmbeddedFields, readOptions);
        }
        
        public System.Xml.Linq.XElement ConvertSchemaFieldsToXsd(Federation.Client.MyCoreService.SchemaFieldsData schemaFieldsData) {
            return base.Channel.ConvertSchemaFieldsToXsd(schemaFieldsData);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> ConvertSchemaFieldsToXsdAsync(Federation.Client.MyCoreService.SchemaFieldsData schemaFieldsData) {
            return base.Channel.ConvertSchemaFieldsToXsdAsync(schemaFieldsData);
        }
        
        public Federation.Client.MyCoreService.IdentifiableObjectData Save(Federation.Client.MyCoreService.IdentifiableObjectData deltaData, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.Save(deltaData, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData> SaveAsync(Federation.Client.MyCoreService.IdentifiableObjectData deltaData, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.SaveAsync(deltaData, readBackOptions);
        }
        
        public void Delete(string id) {
            base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(string id) {
            return base.Channel.DeleteAsync(id);
        }
        
        public void DeleteTaxonomyNode(string id, Federation.Client.MyCoreService.DeleteTaxonomyNodeMode deleteTaxonomyNodeMode) {
            base.Channel.DeleteTaxonomyNode(id, deleteTaxonomyNodeMode);
        }
        
        public System.Threading.Tasks.Task DeleteTaxonomyNodeAsync(string id, Federation.Client.MyCoreService.DeleteTaxonomyNodeMode deleteTaxonomyNodeMode) {
            return base.Channel.DeleteTaxonomyNodeAsync(id, deleteTaxonomyNodeMode);
        }
        
        public Federation.Client.MyCoreService.IdentifiableObjectData GetDefaultData(Federation.Client.MyCoreService.ItemType itemType, string containerId, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.GetDefaultData(itemType, containerId, readOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData> GetDefaultDataAsync(Federation.Client.MyCoreService.ItemType itemType, string containerId, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.GetDefaultDataAsync(itemType, containerId, readOptions);
        }
        
        public Federation.Client.MyCoreService.RepositoryLocalObjectData Move(string id, string destinationId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.Move(id, destinationId, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.RepositoryLocalObjectData> MoveAsync(string id, string destinationId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.MoveAsync(id, destinationId, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.RepositoryLocalObjectData Copy(string id, string destinationId, bool makeUnique, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.Copy(id, destinationId, makeUnique, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.RepositoryLocalObjectData> CopyAsync(string id, string destinationId, bool makeUnique, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.CopyAsync(id, destinationId, makeUnique, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.InstanceData GetInstanceData(string schemaId, string containerItemId, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.GetInstanceData(schemaId, containerItemId, readOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.InstanceData> GetInstanceDataAsync(string schemaId, string containerItemId, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.GetInstanceDataAsync(schemaId, containerItemId, readOptions);
        }
        
        public Federation.Client.MyCoreService.IdentifiableObjectData TryCheckOut(string id, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.TryCheckOut(id, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData> TryCheckOutAsync(string id, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.TryCheckOutAsync(id, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.VersionedItemData CheckOut(string id, bool permanentLock, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.CheckOut(id, permanentLock, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.VersionedItemData> CheckOutAsync(string id, bool permanentLock, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.CheckOutAsync(id, permanentLock, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.VersionedItemData CheckIn(string id, bool removePermanentLock, string userComment, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.CheckIn(id, removePermanentLock, userComment, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.VersionedItemData> CheckInAsync(string id, bool removePermanentLock, string userComment, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.CheckInAsync(id, removePermanentLock, userComment, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.IdentifiableObjectData Update(Federation.Client.MyCoreService.IdentifiableObjectData deltaData, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.Update(deltaData, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData> UpdateAsync(Federation.Client.MyCoreService.IdentifiableObjectData deltaData, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.UpdateAsync(deltaData, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.IdentifiableObjectData Create(Federation.Client.MyCoreService.IdentifiableObjectData data, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.Create(data, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData> CreateAsync(Federation.Client.MyCoreService.IdentifiableObjectData data, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.CreateAsync(data, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.VersionedItemData UndoCheckOut(string id, bool permanentLock, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.UndoCheckOut(id, permanentLock, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.VersionedItemData> UndoCheckOutAsync(string id, bool permanentLock, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.UndoCheckOutAsync(id, permanentLock, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.VersionedItemData Rollback(string id, bool deleteVersions, string comment, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.Rollback(id, deleteVersions, comment, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.VersionedItemData> RollbackAsync(string id, bool deleteVersions, string comment, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.RollbackAsync(id, deleteVersions, comment, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.RepositoryLocalObjectData Localize(string id, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.Localize(id, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.RepositoryLocalObjectData> LocalizeAsync(string id, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.LocalizeAsync(id, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.RepositoryLocalObjectData UnLocalize(string id, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.UnLocalize(id, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.RepositoryLocalObjectData> UnLocalizeAsync(string id, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.UnLocalizeAsync(id, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.OperationResultDataOfRepositoryLocalObjectData Promote(string id, string destinationRepositoryId, Federation.Client.MyCoreService.OperationInstruction instruction, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.Promote(id, destinationRepositoryId, instruction, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.OperationResultDataOfRepositoryLocalObjectData> PromoteAsync(string id, string destinationRepositoryId, Federation.Client.MyCoreService.OperationInstruction instruction, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.PromoteAsync(id, destinationRepositoryId, instruction, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.OperationResultDataOfRepositoryLocalObjectData Demote(string id, string destinationRepositoryId, Federation.Client.MyCoreService.OperationInstruction instruction, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.Demote(id, destinationRepositoryId, instruction, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.OperationResultDataOfRepositoryLocalObjectData> DemoteAsync(string id, string destinationRepositoryId, Federation.Client.MyCoreService.OperationInstruction instruction, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.DemoteAsync(id, destinationRepositoryId, instruction, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.TemplateType[] GetListTemplateTypes(System.Nullable<Federation.Client.MyCoreService.ItemType> itemType) {
            return base.Channel.GetListTemplateTypes(itemType);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.TemplateType[]> GetListTemplateTypesAsync(System.Nullable<Federation.Client.MyCoreService.ItemType> itemType) {
            return base.Channel.GetListTemplateTypesAsync(itemType);
        }
        
        public Federation.Client.MyCoreService.PublicationType[] GetListPublicationTypes() {
            return base.Channel.GetListPublicationTypes();
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.PublicationType[]> GetListPublicationTypesAsync() {
            return base.Channel.GetListPublicationTypesAsync();
        }
        
        public System.Xml.Linq.XElement GetSystemWideListXml(Federation.Client.MyCoreService.SystemWideListFilterData filter) {
            return base.Channel.GetSystemWideListXml(filter);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetSystemWideListXmlAsync(Federation.Client.MyCoreService.SystemWideListFilterData filter) {
            return base.Channel.GetSystemWideListXmlAsync(filter);
        }
        
        public Federation.Client.MyCoreService.IdentifiableObjectData[] GetSystemWideList(Federation.Client.MyCoreService.SystemWideListFilterData filter) {
            return base.Channel.GetSystemWideList(filter);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData[]> GetSystemWideListAsync(Federation.Client.MyCoreService.SystemWideListFilterData filter) {
            return base.Channel.GetSystemWideListAsync(filter);
        }
        
        public System.Xml.Linq.XElement GetListXml(string id, Federation.Client.MyCoreService.SubjectRelatedListFilterData filter) {
            return base.Channel.GetListXml(id, filter);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetListXmlAsync(string id, Federation.Client.MyCoreService.SubjectRelatedListFilterData filter) {
            return base.Channel.GetListXmlAsync(id, filter);
        }
        
        public Federation.Client.MyCoreService.IdentifiableObjectData[] GetList(string id, Federation.Client.MyCoreService.SubjectRelatedListFilterData filter) {
            return base.Channel.GetList(id, filter);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData[]> GetListAsync(string id, Federation.Client.MyCoreService.SubjectRelatedListFilterData filter) {
            return base.Channel.GetListAsync(id, filter);
        }
        
        public string[] GetListDirectoryServiceNames() {
            return base.Channel.GetListDirectoryServiceNames();
        }
        
        public System.Threading.Tasks.Task<string[]> GetListDirectoryServiceNamesAsync() {
            return base.Channel.GetListDirectoryServiceNamesAsync();
        }
        
        public Federation.Client.MyCoreService.WindowsUser[] GetListWindowsDomainUsers(string domainName) {
            return base.Channel.GetListWindowsDomainUsers(domainName);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.WindowsUser[]> GetListWindowsDomainUsersAsync(string domainName) {
            return base.Channel.GetListWindowsDomainUsersAsync(domainName);
        }
        
        public Federation.Client.MyCoreService.DirectoryServiceUser[] GetListDirectoryServiceAllUsers(string directoryServiceName) {
            return base.Channel.GetListDirectoryServiceAllUsers(directoryServiceName);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.DirectoryServiceUser[]> GetListDirectoryServiceAllUsersAsync(string directoryServiceName) {
            return base.Channel.GetListDirectoryServiceAllUsersAsync(directoryServiceName);
        }
        
        public Federation.Client.MyCoreService.DirectoryServiceUser[] GetListDirectoryServiceGroupMembers(string directoryServiceName, string groupDN) {
            return base.Channel.GetListDirectoryServiceGroupMembers(directoryServiceName, groupDN);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.DirectoryServiceUser[]> GetListDirectoryServiceGroupMembersAsync(string directoryServiceName, string groupDN) {
            return base.Channel.GetListDirectoryServiceGroupMembersAsync(directoryServiceName, groupDN);
        }
        
        public Federation.Client.MyCoreService.DirectoryServiceUser[] GetListDirectoryServiceUsers(string directoryServiceName, Federation.Client.MyCoreService.DirectoryUsersFilter filter) {
            return base.Channel.GetListDirectoryServiceUsers(directoryServiceName, filter);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.DirectoryServiceUser[]> GetListDirectoryServiceUsersAsync(string directoryServiceName, Federation.Client.MyCoreService.DirectoryUsersFilter filter) {
            return base.Channel.GetListDirectoryServiceUsersAsync(directoryServiceName, filter);
        }
        
        public Federation.Client.MyCoreService.ClassificationInfoData Classify(string id, string[] keywordIds, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.Classify(id, keywordIds, readOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ClassificationInfoData> ClassifyAsync(string id, string[] keywordIds, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.ClassifyAsync(id, keywordIds, readOptions);
        }
        
        public Federation.Client.MyCoreService.ClassificationInfoData UnClassify(string id, string[] keywordIds, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.UnClassify(id, keywordIds, readOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ClassificationInfoData> UnClassifyAsync(string id, string[] keywordIds, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.UnClassifyAsync(id, keywordIds, readOptions);
        }
        
        public Federation.Client.MyCoreService.ClassificationInfoData ReClassify(string id, string[] keywordIdsToRemove, string[] keywordIdsToAdd, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.ReClassify(id, keywordIdsToRemove, keywordIdsToAdd, readOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ClassificationInfoData> ReClassifyAsync(string id, string[] keywordIdsToRemove, string[] keywordIdsToAdd, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.ReClassifyAsync(id, keywordIdsToRemove, keywordIdsToAdd, readOptions);
        }
        
        public Federation.Client.MyCoreService.ActivityInstanceData StartActivity(string activityInstanceId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.StartActivity(activityInstanceId, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ActivityInstanceData> StartActivityAsync(string activityInstanceId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.StartActivityAsync(activityInstanceId, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.ActivityInstanceData SuspendActivity(string activityInstanceId, string reason, System.Nullable<System.DateTime> resumeAt, string resumeBookmark, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.SuspendActivity(activityInstanceId, reason, resumeAt, resumeBookmark, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ActivityInstanceData> SuspendActivityAsync(string activityInstanceId, string reason, System.Nullable<System.DateTime> resumeAt, string resumeBookmark, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.SuspendActivityAsync(activityInstanceId, reason, resumeAt, resumeBookmark, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.ActivityInstanceData RestartActivity(string activityInstanceId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.RestartActivity(activityInstanceId, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ActivityInstanceData> RestartActivityAsync(string activityInstanceId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.RestartActivityAsync(activityInstanceId, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.ActivityInstanceData ReAssignActivity(string activityInstanceId, string newAssigneeId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.ReAssignActivity(activityInstanceId, newAssigneeId, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ActivityInstanceData> ReAssignActivityAsync(string activityInstanceId, string newAssigneeId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.ReAssignActivityAsync(activityInstanceId, newAssigneeId, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.ActivityInstanceData FinishActivity(string activityInstanceId, Federation.Client.MyCoreService.ActivityFinishData activityFinishData, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.FinishActivity(activityInstanceId, activityFinishData, readOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ActivityInstanceData> FinishActivityAsync(string activityInstanceId, Federation.Client.MyCoreService.ActivityFinishData activityFinishData, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.FinishActivityAsync(activityInstanceId, activityFinishData, readOptions);
        }
        
        public Federation.Client.MyCoreService.ProcessHistoryData ForceFinishProcess(string processInstanceId, string approvalStatusId, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.ForceFinishProcess(processInstanceId, approvalStatusId, readOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ProcessHistoryData> ForceFinishProcessAsync(string processInstanceId, string approvalStatusId, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.ForceFinishProcessAsync(processInstanceId, approvalStatusId, readOptions);
        }
        
        public Federation.Client.MyCoreService.ActivityInstanceData ResumeActivity(string activityInstanceId, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.ResumeActivity(activityInstanceId, readOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ActivityInstanceData> ResumeActivityAsync(string activityInstanceId, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.ResumeActivityAsync(activityInstanceId, readOptions);
        }
        
        public Federation.Client.MyCoreService.QueueMessageData[] GetListQueueMessages(int queueId) {
            return base.Channel.GetListQueueMessages(queueId);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.QueueMessageData[]> GetListQueueMessagesAsync(int queueId) {
            return base.Channel.GetListQueueMessagesAsync(queueId);
        }
        
        public void PurgeQueue(int queueId) {
            base.Channel.PurgeQueue(queueId);
        }
        
        public System.Threading.Tasks.Task PurgeQueueAsync(int queueId) {
            return base.Channel.PurgeQueueAsync(queueId);
        }
        
        public Federation.Client.MyCoreService.QueueData[] GetListQueues() {
            return base.Channel.GetListQueues();
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.QueueData[]> GetListQueuesAsync() {
            return base.Channel.GetListQueuesAsync();
        }
        
        public Federation.Client.MyCoreService.ApplicationData ReadApplicationData(string subjectId, string applicationId) {
            return base.Channel.ReadApplicationData(subjectId, applicationId);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ApplicationData> ReadApplicationDataAsync(string subjectId, string applicationId) {
            return base.Channel.ReadApplicationDataAsync(subjectId, applicationId);
        }
        
        public Federation.Client.MyCoreService.ApplicationData[] ReadAllApplicationData(string subjectId) {
            return base.Channel.ReadAllApplicationData(subjectId);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ApplicationData[]> ReadAllApplicationDataAsync(string subjectId) {
            return base.Channel.ReadAllApplicationDataAsync(subjectId);
        }
        
        public void SaveApplicationData(string subjectId, Federation.Client.MyCoreService.ApplicationData[] applicationData) {
            base.Channel.SaveApplicationData(subjectId, applicationData);
        }
        
        public System.Threading.Tasks.Task SaveApplicationDataAsync(string subjectId, Federation.Client.MyCoreService.ApplicationData[] applicationData) {
            return base.Channel.SaveApplicationDataAsync(subjectId, applicationData);
        }
        
        public void DeleteApplicationData(string subjectId, string applicationId) {
            base.Channel.DeleteApplicationData(subjectId, applicationId);
        }
        
        public System.Threading.Tasks.Task DeleteApplicationDataAsync(string subjectId, string applicationId) {
            return base.Channel.DeleteApplicationDataAsync(subjectId, applicationId);
        }
        
        public string[] GetApplicationIds() {
            return base.Channel.GetApplicationIds();
        }
        
        public System.Threading.Tasks.Task<string[]> GetApplicationIdsAsync() {
            return base.Channel.GetApplicationIdsAsync();
        }
        
        public void PurgeApplicationData(string applicationId) {
            base.Channel.PurgeApplicationData(applicationId);
        }
        
        public System.Threading.Tasks.Task PurgeApplicationDataAsync(string applicationId) {
            return base.Channel.PurgeApplicationDataAsync(applicationId);
        }
        
        public System.Nullable<Federation.Client.MyCoreService.PredefinedBatchOperation> ParsePredefinedBatchOperation(string operation) {
            return base.Channel.ParsePredefinedBatchOperation(operation);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<Federation.Client.MyCoreService.PredefinedBatchOperation>> ParsePredefinedBatchOperationAsync(string operation) {
            return base.Channel.ParsePredefinedBatchOperationAsync(operation);
        }
        
        public string GetPredefinedBatchOperationName(Federation.Client.MyCoreService.PredefinedBatchOperation operation) {
            return base.Channel.GetPredefinedBatchOperationName(operation);
        }
        
        public System.Threading.Tasks.Task<string> GetPredefinedBatchOperationNameAsync(Federation.Client.MyCoreService.PredefinedBatchOperation operation) {
            return base.Channel.GetPredefinedBatchOperationNameAsync(operation);
        }
        
        public Federation.Client.MyCoreService.PublishContextData[] ResolveItems(string[] ids, Federation.Client.MyCoreService.ResolveInstructionData resolveInstruction, string[] targetIdsOrPurposes, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.ResolveItems(ids, resolveInstruction, targetIdsOrPurposes, readOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.PublishContextData[]> ResolveItemsAsync(string[] ids, Federation.Client.MyCoreService.ResolveInstructionData resolveInstruction, string[] targetIdsOrPurposes, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.ResolveItemsAsync(ids, resolveInstruction, targetIdsOrPurposes, readOptions);
        }
        
        public System.Xml.Linq.XElement GetSearchResultsXml(Federation.Client.MyCoreService.SearchQueryData filter) {
            return base.Channel.GetSearchResultsXml(filter);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetSearchResultsXmlAsync(Federation.Client.MyCoreService.SearchQueryData filter) {
            return base.Channel.GetSearchResultsXmlAsync(filter);
        }
        
        public System.Xml.Linq.XElement GetSearchResultsXmlPaged(Federation.Client.MyCoreService.SearchQueryData filter, int startRowIndex, int maxRows) {
            return base.Channel.GetSearchResultsXmlPaged(filter, startRowIndex, maxRows);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetSearchResultsXmlPagedAsync(Federation.Client.MyCoreService.SearchQueryData filter, int startRowIndex, int maxRows) {
            return base.Channel.GetSearchResultsXmlPagedAsync(filter, startRowIndex, maxRows);
        }
        
        public Federation.Client.MyCoreService.IdentifiableObjectData[] GetSearchResults(Federation.Client.MyCoreService.SearchQueryData filter) {
            return base.Channel.GetSearchResults(filter);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData[]> GetSearchResultsAsync(Federation.Client.MyCoreService.SearchQueryData filter) {
            return base.Channel.GetSearchResultsAsync(filter);
        }
        
        public Federation.Client.MyCoreService.IdentifiableObjectData[] GetSearchResultsPaged(Federation.Client.MyCoreService.SearchQueryData filter, int startRowIndex, int maxRows) {
            return base.Channel.GetSearchResultsPaged(filter, startRowIndex, maxRows);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.IdentifiableObjectData[]> GetSearchResultsPagedAsync(Federation.Client.MyCoreService.SearchQueryData filter, int startRowIndex, int maxRows) {
            return base.Channel.GetSearchResultsPagedAsync(filter, startRowIndex, maxRows);
        }
        
        public Federation.Client.MyCoreService.RenderedItemData RenderItem(string itemId, string templateId, Federation.Client.MyCoreService.PublishInstructionData publishInstruction, string publicationTargetIdOrPurpose) {
            return base.Channel.RenderItem(itemId, templateId, publishInstruction, publicationTargetIdOrPurpose);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.RenderedItemData> RenderItemAsync(string itemId, string templateId, Federation.Client.MyCoreService.PublishInstructionData publishInstruction, string publicationTargetIdOrPurpose) {
            return base.Channel.RenderItemAsync(itemId, templateId, publishInstruction, publicationTargetIdOrPurpose);
        }
        
        public Federation.Client.MyCoreService.RenderedItemData PreviewItem(Federation.Client.MyCoreService.RepositoryLocalObjectData itemData, Federation.Client.MyCoreService.TemplateData templateData, Federation.Client.MyCoreService.PublishInstructionData publishInstruction, string publicationTargetId) {
            return base.Channel.PreviewItem(itemData, templateData, publishInstruction, publicationTargetId);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.RenderedItemData> PreviewItemAsync(Federation.Client.MyCoreService.RepositoryLocalObjectData itemData, Federation.Client.MyCoreService.TemplateData templateData, Federation.Client.MyCoreService.PublishInstructionData publishInstruction, string publicationTargetId) {
            return base.Channel.PreviewItemAsync(itemData, templateData, publishInstruction, publicationTargetId);
        }
        
        public Federation.Client.MyCoreService.PublishTransactionData[] Publish(string[] ids, Federation.Client.MyCoreService.PublishInstructionData publishInstruction, string[] targetIdsOrPurposes, System.Nullable<Federation.Client.MyCoreService.PublishPriority> priority, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.Publish(ids, publishInstruction, targetIdsOrPurposes, priority, readOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.PublishTransactionData[]> PublishAsync(string[] ids, Federation.Client.MyCoreService.PublishInstructionData publishInstruction, string[] targetIdsOrPurposes, System.Nullable<Federation.Client.MyCoreService.PublishPriority> priority, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.PublishAsync(ids, publishInstruction, targetIdsOrPurposes, priority, readOptions);
        }
        
        public Federation.Client.MyCoreService.PublishTransactionData[] UnPublish(string[] ids, Federation.Client.MyCoreService.UnPublishInstructionData unPublishInstruction, string[] targetIdsOrPurposes, System.Nullable<Federation.Client.MyCoreService.PublishPriority> priority, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.UnPublish(ids, unPublishInstruction, targetIdsOrPurposes, priority, readOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.PublishTransactionData[]> UnPublishAsync(string[] ids, Federation.Client.MyCoreService.UnPublishInstructionData unPublishInstruction, string[] targetIdsOrPurposes, System.Nullable<Federation.Client.MyCoreService.PublishPriority> priority, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.UnPublishAsync(ids, unPublishInstruction, targetIdsOrPurposes, priority, readOptions);
        }
        
        public bool IsPublished(string itemId, string publishingTargetIdOrPurpose, bool isPublishedInContext) {
            return base.Channel.IsPublished(itemId, publishingTargetIdOrPurpose, isPublishedInContext);
        }
        
        public System.Threading.Tasks.Task<bool> IsPublishedAsync(string itemId, string publishingTargetIdOrPurpose, bool isPublishedInContext) {
            return base.Channel.IsPublishedAsync(itemId, publishingTargetIdOrPurpose, isPublishedInContext);
        }
        
        public Federation.Client.MyCoreService.RenderedItemData GetWorkItemSnapshot(string workItemId) {
            return base.Channel.GetWorkItemSnapshot(workItemId);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.RenderedItemData> GetWorkItemSnapshotAsync(string workItemId) {
            return base.Channel.GetWorkItemSnapshotAsync(workItemId);
        }
        
        public Federation.Client.MyCoreService.PublishInfoData[] GetListPublishInfo(string itemId) {
            return base.Channel.GetListPublishInfo(itemId);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.PublishInfoData[]> GetListPublishInfoAsync(string itemId) {
            return base.Channel.GetListPublishInfoAsync(itemId);
        }
        
        public Federation.Client.MyCoreService.ActionFlags CastActions(int numericActions) {
            return base.Channel.CastActions(numericActions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ActionFlags> CastActionsAsync(int numericActions) {
            return base.Channel.CastActionsAsync(numericActions);
        }
        
        public void ValidateXml(Federation.Client.MyCoreService.IdentifiableObjectData data) {
            base.Channel.ValidateXml(data);
        }
        
        public System.Threading.Tasks.Task ValidateXmlAsync(Federation.Client.MyCoreService.IdentifiableObjectData data) {
            return base.Channel.ValidateXmlAsync(data);
        }
        
        public bool IsValidTridionWebSchemaXml(Federation.Client.MyCoreService.SchemaData data) {
            return base.Channel.IsValidTridionWebSchemaXml(data);
        }
        
        public System.Threading.Tasks.Task<bool> IsValidTridionWebSchemaXmlAsync(Federation.Client.MyCoreService.SchemaData data) {
            return base.Channel.IsValidTridionWebSchemaXmlAsync(data);
        }
        
        public Federation.Client.MyCoreService.ArrayOfTcmUri GetSubjectIdsWithApplicationData(string applicationId) {
            return base.Channel.GetSubjectIdsWithApplicationData(applicationId);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ArrayOfTcmUri> GetSubjectIdsWithApplicationDataAsync(string applicationId) {
            return base.Channel.GetSubjectIdsWithApplicationDataAsync(applicationId);
        }
        
        public Federation.Client.MyCoreService.ApplicationDataDictionary ReadApplicationDataForSubjectsIds(string[] subjectIds, string[] applicationIds) {
            return base.Channel.ReadApplicationDataForSubjectsIds(subjectIds, applicationIds);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ApplicationDataDictionary> ReadApplicationDataForSubjectsIdsAsync(string[] subjectIds, string[] applicationIds) {
            return base.Channel.ReadApplicationDataForSubjectsIdsAsync(subjectIds, applicationIds);
        }
        
        public Federation.Client.MyCoreService.SecurityDescriptorDataDictionary GetSecurityDescriptorsForSubjectsIds(string[] subjectIds) {
            return base.Channel.GetSecurityDescriptorsForSubjectsIds(subjectIds);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.SecurityDescriptorDataDictionary> GetSecurityDescriptorsForSubjectsIdsAsync(string[] subjectIds) {
            return base.Channel.GetSecurityDescriptorsForSubjectsIdsAsync(subjectIds);
        }
        
        public Federation.Client.MyCoreService.SecurityDescriptorDataDictionary GetContentSecurityDescriptorsForOrgItemIds(string[] organizationalItemIds) {
            return base.Channel.GetContentSecurityDescriptorsForOrgItemIds(organizationalItemIds);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.SecurityDescriptorDataDictionary> GetContentSecurityDescriptorsForOrgItemIdsAsync(string[] organizationalItemIds) {
            return base.Channel.GetContentSecurityDescriptorsForOrgItemIdsAsync(organizationalItemIds);
        }
        
        public void ReIndex(string id) {
            base.Channel.ReIndex(id);
        }
        
        public System.Threading.Tasks.Task ReIndexAsync(string id) {
            return base.Channel.ReIndexAsync(id);
        }
        
        public System.Nullable<Federation.Client.MyCoreService.PredefinedQueue> CastPredefinedQueue(int queueId) {
            return base.Channel.CastPredefinedQueue(queueId);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<Federation.Client.MyCoreService.PredefinedQueue>> CastPredefinedQueueAsync(int queueId) {
            return base.Channel.CastPredefinedQueueAsync(queueId);
        }
        
        public int PurgeOldVersions(Federation.Client.MyCoreService.PurgeOldVersionsInstructionData instruction) {
            return base.Channel.PurgeOldVersions(instruction);
        }
        
        public System.Threading.Tasks.Task<int> PurgeOldVersionsAsync(Federation.Client.MyCoreService.PurgeOldVersionsInstructionData instruction) {
            return base.Channel.PurgeOldVersionsAsync(instruction);
        }
        
        public System.Xml.Linq.XElement GetListExternalLinks(string id) {
            return base.Channel.GetListExternalLinks(id);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetListExternalLinksAsync(string id) {
            return base.Channel.GetListExternalLinksAsync(id);
        }
        
        public Federation.Client.MyCoreService.SearchQueryData ConvertXmlToSearchQuery(System.Xml.Linq.XElement searchQueryXml) {
            return base.Channel.ConvertXmlToSearchQuery(searchQueryXml);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.SearchQueryData> ConvertXmlToSearchQueryAsync(System.Xml.Linq.XElement searchQueryXml) {
            return base.Channel.ConvertXmlToSearchQueryAsync(searchQueryXml);
        }
        
        public System.Xml.Linq.XElement ConvertSearchQueryToXml(Federation.Client.MyCoreService.SearchQueryData searchQueryData) {
            return base.Channel.ConvertSearchQueryToXml(searchQueryData);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> ConvertSearchQueryToXmlAsync(Federation.Client.MyCoreService.SearchQueryData searchQueryData) {
            return base.Channel.ConvertSearchQueryToXmlAsync(searchQueryData);
        }
        
        public Federation.Client.MyCoreService.SchemaData GetVirtualFolderTypeSchema(string namespaceUri) {
            return base.Channel.GetVirtualFolderTypeSchema(namespaceUri);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.SchemaData> GetVirtualFolderTypeSchemaAsync(string namespaceUri) {
            return base.Channel.GetVirtualFolderTypeSchemaAsync(namespaceUri);
        }
        
        public Federation.Client.MyCoreService.TridionEnumValue[] GetEnumValues(string type) {
            return base.Channel.GetEnumValues(type);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.TridionEnumValue[]> GetEnumValuesAsync(string type) {
            return base.Channel.GetEnumValuesAsync(type);
        }
        
        public Federation.Client.MyCoreService.BundleTypeData[] ResolveBundleTypes(string[] itemIds, bool pruneTree) {
            return base.Channel.ResolveBundleTypes(itemIds, pruneTree);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.BundleTypeData[]> ResolveBundleTypesAsync(string[] itemIds, bool pruneTree) {
            return base.Channel.ResolveBundleTypesAsync(itemIds, pruneTree);
        }
        
        public Federation.Client.MyCoreService.KeywordData CopyToKeyword(string sourceKeywordId, string destinationId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.CopyToKeyword(sourceKeywordId, destinationId, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.KeywordData> CopyToKeywordAsync(string sourceKeywordId, string destinationId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.CopyToKeywordAsync(sourceKeywordId, destinationId, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.KeywordData MoveToKeyword(string sourceKeywordId, string destinationId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.MoveToKeyword(sourceKeywordId, destinationId, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.KeywordData> MoveToKeywordAsync(string sourceKeywordId, string destinationId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.MoveToKeywordAsync(sourceKeywordId, destinationId, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.TridionLanguageInfo[] GetTridionLanguages() {
            return base.Channel.GetTridionLanguages();
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.TridionLanguageInfo[]> GetTridionLanguagesAsync() {
            return base.Channel.GetTridionLanguagesAsync();
        }
        
        public Federation.Client.MyCoreService.WorkflowScriptType[] GetListWorkflowScriptTypes() {
            return base.Channel.GetListWorkflowScriptTypes();
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.WorkflowScriptType[]> GetListWorkflowScriptTypesAsync() {
            return base.Channel.GetListWorkflowScriptTypesAsync();
        }
        
        public Federation.Client.MyCoreService.WorkItemData[] AddToWorkflow(string[] subjectIds, string activityInstanceId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.AddToWorkflow(subjectIds, activityInstanceId, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.WorkItemData[]> AddToWorkflowAsync(string[] subjectIds, string activityInstanceId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.AddToWorkflowAsync(subjectIds, activityInstanceId, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.WorkItemData[] RemoveFromWorkflow(string[] subjectIds, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.RemoveFromWorkflow(subjectIds, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.WorkItemData[]> RemoveFromWorkflowAsync(string[] subjectIds, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.RemoveFromWorkflowAsync(subjectIds, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.OrganizationalItemData Lock(string organizationalItemId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.Lock(organizationalItemId, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.OrganizationalItemData> LockAsync(string organizationalItemId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.LockAsync(organizationalItemId, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.OrganizationalItemData Unlock(string organizationalItemId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.Unlock(organizationalItemId, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.OrganizationalItemData> UnlockAsync(string organizationalItemId, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.UnlockAsync(organizationalItemId, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.ProcessInstanceData StartWorkflow(string repositoryId, Federation.Client.MyCoreService.StartWorkflowInstructionData instruction, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.StartWorkflow(repositoryId, instruction, readBackOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ProcessInstanceData> StartWorkflowAsync(string repositoryId, Federation.Client.MyCoreService.StartWorkflowInstructionData instruction, Federation.Client.MyCoreService.ReadOptions readBackOptions) {
            return base.Channel.StartWorkflowAsync(repositoryId, instruction, readBackOptions);
        }
        
        public Federation.Client.MyCoreService.ProcessDefinitionAssociationDictionary GetProcessDefinitionsForItems(string[] itemIds, Federation.Client.MyCoreService.ProcessDefinitionType processDefinitionType) {
            return base.Channel.GetProcessDefinitionsForItems(itemIds, processDefinitionType);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ProcessDefinitionAssociationDictionary> GetProcessDefinitionsForItemsAsync(string[] itemIds, Federation.Client.MyCoreService.ProcessDefinitionType processDefinitionType) {
            return base.Channel.GetProcessDefinitionsForItemsAsync(itemIds, processDefinitionType);
        }
        
        public string GetSystemXsd(string filename) {
            return base.Channel.GetSystemXsd(filename);
        }
        
        public System.Threading.Tasks.Task<string> GetSystemXsdAsync(string filename) {
            return base.Channel.GetSystemXsdAsync(filename);
        }
        
        public Federation.Client.MyCoreService.LinkToSchemaData[] GetSchemasByNamespaceUri(string repositoryId, string namespaceUri, string rootElementName) {
            return base.Channel.GetSchemasByNamespaceUri(repositoryId, namespaceUri, rootElementName);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.LinkToSchemaData[]> GetSchemasByNamespaceUriAsync(string repositoryId, string namespaceUri, string rootElementName) {
            return base.Channel.GetSchemasByNamespaceUriAsync(repositoryId, namespaceUri, rootElementName);
        }
        
        public Federation.Client.MyCoreService.ValidationErrorData[] Validate(Federation.Client.MyCoreService.IdentifiableObjectData deltaData) {
            return base.Channel.Validate(deltaData);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ValidationErrorData[]> ValidateAsync(Federation.Client.MyCoreService.IdentifiableObjectData deltaData) {
            return base.Channel.ValidateAsync(deltaData);
        }
        
        public Federation.Client.MyCoreService.BinaryContentData GetExternalBinaryContentData(string uri) {
            return base.Channel.GetExternalBinaryContentData(uri);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.BinaryContentData> GetExternalBinaryContentDataAsync(string uri) {
            return base.Channel.GetExternalBinaryContentDataAsync(uri);
        }
        
        public Federation.Client.MyCoreService.SynchronizationResult SynchronizeWithSchema(Federation.Client.MyCoreService.IdentifiableObjectData dataObject, Federation.Client.MyCoreService.SynchronizeOptions synchronizeOptions) {
            return base.Channel.SynchronizeWithSchema(dataObject, synchronizeOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.SynchronizationResult> SynchronizeWithSchemaAsync(Federation.Client.MyCoreService.IdentifiableObjectData dataObject, Federation.Client.MyCoreService.SynchronizeOptions synchronizeOptions) {
            return base.Channel.SynchronizeWithSchemaAsync(dataObject, synchronizeOptions);
        }
        
        public Federation.Client.MyCoreService.SynchronizationResult SynchronizeWithSchemaAndUpdate(string itemId, Federation.Client.MyCoreService.SynchronizeOptions synchronizeOptions) {
            return base.Channel.SynchronizeWithSchemaAndUpdate(itemId, synchronizeOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.SynchronizationResult> SynchronizeWithSchemaAndUpdateAsync(string itemId, Federation.Client.MyCoreService.SynchronizeOptions synchronizeOptions) {
            return base.Channel.SynchronizeWithSchemaAndUpdateAsync(itemId, synchronizeOptions);
        }
        
        public void DecommissionPublicationTarget(string publicationTargetId) {
            base.Channel.DecommissionPublicationTarget(publicationTargetId);
        }
        
        public System.Threading.Tasks.Task DecommissionPublicationTargetAsync(string publicationTargetId) {
            return base.Channel.DecommissionPublicationTargetAsync(publicationTargetId);
        }
        
        public Federation.Client.MyCoreService.SchemaFieldsData ConvertXsdToSchemaFields(System.Xml.Linq.XElement xsd, Federation.Client.MyCoreService.SchemaPurpose purpose, string rootElementName, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.ConvertXsdToSchemaFields(xsd, purpose, rootElementName, readOptions);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.SchemaFieldsData> ConvertXsdToSchemaFieldsAsync(System.Xml.Linq.XElement xsd, Federation.Client.MyCoreService.SchemaPurpose purpose, string rootElementName, Federation.Client.MyCoreService.ReadOptions readOptions) {
            return base.Channel.ConvertXsdToSchemaFieldsAsync(xsd, purpose, rootElementName, readOptions);
        }
        
        public string GetPublishUrl(string id, string targetTypeIdOrPurpose) {
            return base.Channel.GetPublishUrl(id, targetTypeIdOrPurpose);
        }
        
        public System.Threading.Tasks.Task<string> GetPublishUrlAsync(string id, string targetTypeIdOrPurpose) {
            return base.Channel.GetPublishUrlAsync(id, targetTypeIdOrPurpose);
        }
        
        public Federation.Client.MyCoreService.LinkToBusinessProcessTypeData[] GetBusinessProcessTypes(string cdTopologyTypeId) {
            return base.Channel.GetBusinessProcessTypes(cdTopologyTypeId);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.LinkToBusinessProcessTypeData[]> GetBusinessProcessTypesAsync(string cdTopologyTypeId) {
            return base.Channel.GetBusinessProcessTypesAsync(cdTopologyTypeId);
        }
        
        public Federation.Client.MyCoreService.PublishSourceData GetPublishSourceByUrl(string url) {
            return base.Channel.GetPublishSourceByUrl(url);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.PublishSourceData> GetPublishSourceByUrlAsync(string url) {
            return base.Channel.GetPublishSourceByUrlAsync(url);
        }
        
        public void RemovePublishStates(string publicationId, string targetTypeIdOrPurpose) {
            base.Channel.RemovePublishStates(publicationId, targetTypeIdOrPurpose);
        }
        
        public System.Threading.Tasks.Task RemovePublishStatesAsync(string publicationId, string targetTypeIdOrPurpose) {
            return base.Channel.RemovePublishStatesAsync(publicationId, targetTypeIdOrPurpose);
        }
        
        public Federation.Client.MyCoreService.ContainingPagesDictionary ResolveContainingPages(string componentId, Federation.Client.MyCoreService.ResolveContainingPagesInstructionData instruction) {
            return base.Channel.ResolveContainingPages(componentId, instruction);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.ContainingPagesDictionary> ResolveContainingPagesAsync(string componentId, Federation.Client.MyCoreService.ResolveContainingPagesInstructionData instruction) {
            return base.Channel.ResolveContainingPagesAsync(componentId, instruction);
        }
        
        public void PurgeWorkflowHistory(Federation.Client.MyCoreService.PurgeWorkflowHistoryInstructionData instruction) {
            base.Channel.PurgeWorkflowHistory(instruction);
        }
        
        public System.Threading.Tasks.Task PurgeWorkflowHistoryAsync(Federation.Client.MyCoreService.PurgeWorkflowHistoryInstructionData instruction) {
            return base.Channel.PurgeWorkflowHistoryAsync(instruction);
        }
        
        public void BroadcastNotification(Federation.Client.MyCoreService.NotificationMessage notification) {
            base.Channel.BroadcastNotification(notification);
        }
        
        public System.Threading.Tasks.Task BroadcastNotificationAsync(Federation.Client.MyCoreService.NotificationMessage notification) {
            return base.Channel.BroadcastNotificationAsync(notification);
        }
        
        public Federation.Client.MyCoreService.SystemPrivilege[] GetSystemPrivileges() {
            return base.Channel.GetSystemPrivileges();
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.SystemPrivilege[]> GetSystemPrivilegesAsync() {
            return base.Channel.GetSystemPrivilegesAsync();
        }
        
        public Federation.Client.MyCoreService.AccessTokenData Impersonate(string userName) {
            return base.Channel.Impersonate(userName);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.AccessTokenData> ImpersonateAsync(string userName) {
            return base.Channel.ImpersonateAsync(userName);
        }
        
        public void ImpersonateWithToken(Federation.Client.MyCoreService.AccessTokenData accessToken) {
            base.Channel.ImpersonateWithToken(accessToken);
        }
        
        public System.Threading.Tasks.Task ImpersonateWithTokenAsync(Federation.Client.MyCoreService.AccessTokenData accessToken) {
            return base.Channel.ImpersonateWithTokenAsync(accessToken);
        }
        
        public Federation.Client.MyCoreService.AccessTokenData ImpersonateWithClaims(Federation.Client.MyCoreService.ClaimData[] claims) {
            return base.Channel.ImpersonateWithClaims(claims);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.AccessTokenData> ImpersonateWithClaimsAsync(Federation.Client.MyCoreService.ClaimData[] claims) {
            return base.Channel.ImpersonateWithClaimsAsync(claims);
        }
        
        public void TerminateSession() {
            base.Channel.TerminateSession();
        }
        
        public System.Threading.Tasks.Task TerminateSessionAsync() {
            return base.Channel.TerminateSessionAsync();
        }
        
        public string GetSessionId() {
            return base.Channel.GetSessionId();
        }
        
        public System.Threading.Tasks.Task<string> GetSessionIdAsync() {
            return base.Channel.GetSessionIdAsync();
        }
        
        public void SetSessionContextData(Federation.Client.MyCoreService.ApplicationData appData) {
            base.Channel.SetSessionContextData(appData);
        }
        
        public System.Threading.Tasks.Task SetSessionContextDataAsync(Federation.Client.MyCoreService.ApplicationData appData) {
            return base.Channel.SetSessionContextDataAsync(appData);
        }
        
        public void SetSessionTransactionTimeout(int transactionTimeout) {
            base.Channel.SetSessionTransactionTimeout(transactionTimeout);
        }
        
        public System.Threading.Tasks.Task SetSessionTransactionTimeoutAsync(int transactionTimeout) {
            return base.Channel.SetSessionTransactionTimeoutAsync(transactionTimeout);
        }
        
        public int GetSessionTransactionTimeout() {
            return base.Channel.GetSessionTransactionTimeout();
        }
        
        public System.Threading.Tasks.Task<int> GetSessionTransactionTimeoutAsync() {
            return base.Channel.GetSessionTransactionTimeoutAsync();
        }
        
        public bool StartCaching() {
            return base.Channel.StartCaching();
        }
        
        public System.Threading.Tasks.Task<bool> StartCachingAsync() {
            return base.Channel.StartCachingAsync();
        }
        
        public void StopCaching() {
            base.Channel.StopCaching();
        }
        
        public System.Threading.Tasks.Task StopCachingAsync() {
            return base.Channel.StopCachingAsync();
        }
        
        public void SetWebDavUrlPrefix(string prefix) {
            base.Channel.SetWebDavUrlPrefix(prefix);
        }
        
        public System.Threading.Tasks.Task SetWebDavUrlPrefixAsync(string prefix) {
            return base.Channel.SetWebDavUrlPrefixAsync(prefix);
        }
        
        public void EnlistInTransaction() {
            base.Channel.EnlistInTransaction();
        }
        
        public System.Threading.Tasks.Task EnlistInTransactionAsync() {
            return base.Channel.EnlistInTransactionAsync();
        }
        
        public Federation.Client.MyCoreService.UserData ElevatePrivileges(Federation.Client.MyCoreService.Privileges privileges) {
            return base.Channel.ElevatePrivileges(privileges);
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.UserData> ElevatePrivilegesAsync(Federation.Client.MyCoreService.Privileges privileges) {
            return base.Channel.ElevatePrivilegesAsync(privileges);
        }
        
        public Federation.Client.MyCoreService.UserData RestorePrivileges() {
            return base.Channel.RestorePrivileges();
        }
        
        public System.Threading.Tasks.Task<Federation.Client.MyCoreService.UserData> RestorePrivilegesAsync() {
            return base.Channel.RestorePrivilegesAsync();
        }
    }
}
